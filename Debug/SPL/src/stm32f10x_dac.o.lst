   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_dac.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	DAC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	DAC_DeInit:
  24              	.LFB29:
  25              		.file 1 "../SPL/src/stm32f10x_dac.c"
   1:../SPL/src/stm32f10x_dac.c **** /**
   2:../SPL/src/stm32f10x_dac.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_dac.c ****   * @file    stm32f10x_dac.c
   4:../SPL/src/stm32f10x_dac.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_dac.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_dac.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_dac.c ****   * @brief   This file provides all the DAC firmware functions.
   8:../SPL/src/stm32f10x_dac.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_dac.c ****   * @attention
  10:../SPL/src/stm32f10x_dac.c ****   *
  11:../SPL/src/stm32f10x_dac.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_dac.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_dac.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_dac.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_dac.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_dac.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_dac.c ****   *
  18:../SPL/src/stm32f10x_dac.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_dac.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_dac.c ****   */
  21:../SPL/src/stm32f10x_dac.c **** 
  22:../SPL/src/stm32f10x_dac.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_dac.c **** #include "stm32f10x_dac.h"
  24:../SPL/src/stm32f10x_dac.c **** #include "stm32f10x_rcc.h"
  25:../SPL/src/stm32f10x_dac.c **** 
  26:../SPL/src/stm32f10x_dac.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../SPL/src/stm32f10x_dac.c ****   * @{
  28:../SPL/src/stm32f10x_dac.c ****   */
  29:../SPL/src/stm32f10x_dac.c **** 
  30:../SPL/src/stm32f10x_dac.c **** /** @defgroup DAC 
  31:../SPL/src/stm32f10x_dac.c ****   * @brief DAC driver modules
  32:../SPL/src/stm32f10x_dac.c ****   * @{
  33:../SPL/src/stm32f10x_dac.c ****   */ 
  34:../SPL/src/stm32f10x_dac.c **** 
  35:../SPL/src/stm32f10x_dac.c **** /** @defgroup DAC_Private_TypesDefinitions
  36:../SPL/src/stm32f10x_dac.c ****   * @{
  37:../SPL/src/stm32f10x_dac.c ****   */
  38:../SPL/src/stm32f10x_dac.c **** 
  39:../SPL/src/stm32f10x_dac.c **** /**
  40:../SPL/src/stm32f10x_dac.c ****   * @}
  41:../SPL/src/stm32f10x_dac.c ****   */
  42:../SPL/src/stm32f10x_dac.c **** 
  43:../SPL/src/stm32f10x_dac.c **** /** @defgroup DAC_Private_Defines
  44:../SPL/src/stm32f10x_dac.c ****   * @{
  45:../SPL/src/stm32f10x_dac.c ****   */
  46:../SPL/src/stm32f10x_dac.c **** 
  47:../SPL/src/stm32f10x_dac.c **** /* CR register Mask */
  48:../SPL/src/stm32f10x_dac.c **** #define CR_CLEAR_MASK              ((uint32_t)0x00000FFE)
  49:../SPL/src/stm32f10x_dac.c **** 
  50:../SPL/src/stm32f10x_dac.c **** /* DAC Dual Channels SWTRIG masks */
  51:../SPL/src/stm32f10x_dac.c **** #define DUAL_SWTRIG_SET            ((uint32_t)0x00000003)
  52:../SPL/src/stm32f10x_dac.c **** #define DUAL_SWTRIG_RESET          ((uint32_t)0xFFFFFFFC)
  53:../SPL/src/stm32f10x_dac.c **** 
  54:../SPL/src/stm32f10x_dac.c **** /* DHR registers offsets */
  55:../SPL/src/stm32f10x_dac.c **** #define DHR12R1_OFFSET             ((uint32_t)0x00000008)
  56:../SPL/src/stm32f10x_dac.c **** #define DHR12R2_OFFSET             ((uint32_t)0x00000014)
  57:../SPL/src/stm32f10x_dac.c **** #define DHR12RD_OFFSET             ((uint32_t)0x00000020)
  58:../SPL/src/stm32f10x_dac.c **** 
  59:../SPL/src/stm32f10x_dac.c **** /* DOR register offset */
  60:../SPL/src/stm32f10x_dac.c **** #define DOR_OFFSET                 ((uint32_t)0x0000002C)
  61:../SPL/src/stm32f10x_dac.c **** /**
  62:../SPL/src/stm32f10x_dac.c ****   * @}
  63:../SPL/src/stm32f10x_dac.c ****   */
  64:../SPL/src/stm32f10x_dac.c **** 
  65:../SPL/src/stm32f10x_dac.c **** /** @defgroup DAC_Private_Macros
  66:../SPL/src/stm32f10x_dac.c ****   * @{
  67:../SPL/src/stm32f10x_dac.c ****   */
  68:../SPL/src/stm32f10x_dac.c **** 
  69:../SPL/src/stm32f10x_dac.c **** /**
  70:../SPL/src/stm32f10x_dac.c ****   * @}
  71:../SPL/src/stm32f10x_dac.c ****   */
  72:../SPL/src/stm32f10x_dac.c **** 
  73:../SPL/src/stm32f10x_dac.c **** /** @defgroup DAC_Private_Variables
  74:../SPL/src/stm32f10x_dac.c ****   * @{
  75:../SPL/src/stm32f10x_dac.c ****   */
  76:../SPL/src/stm32f10x_dac.c **** 
  77:../SPL/src/stm32f10x_dac.c **** /**
  78:../SPL/src/stm32f10x_dac.c ****   * @}
  79:../SPL/src/stm32f10x_dac.c ****   */
  80:../SPL/src/stm32f10x_dac.c **** 
  81:../SPL/src/stm32f10x_dac.c **** /** @defgroup DAC_Private_FunctionPrototypes
  82:../SPL/src/stm32f10x_dac.c ****   * @{
  83:../SPL/src/stm32f10x_dac.c ****   */
  84:../SPL/src/stm32f10x_dac.c **** 
  85:../SPL/src/stm32f10x_dac.c **** /**
  86:../SPL/src/stm32f10x_dac.c ****   * @}
  87:../SPL/src/stm32f10x_dac.c ****   */
  88:../SPL/src/stm32f10x_dac.c **** 
  89:../SPL/src/stm32f10x_dac.c **** /** @defgroup DAC_Private_Functions
  90:../SPL/src/stm32f10x_dac.c ****   * @{
  91:../SPL/src/stm32f10x_dac.c ****   */
  92:../SPL/src/stm32f10x_dac.c **** 
  93:../SPL/src/stm32f10x_dac.c **** /**
  94:../SPL/src/stm32f10x_dac.c ****   * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  95:../SPL/src/stm32f10x_dac.c ****   * @param  None
  96:../SPL/src/stm32f10x_dac.c ****   * @retval None
  97:../SPL/src/stm32f10x_dac.c ****   */
  98:../SPL/src/stm32f10x_dac.c **** void DAC_DeInit(void)
  99:../SPL/src/stm32f10x_dac.c **** {
  26              		.loc 1 99 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 100:../SPL/src/stm32f10x_dac.c ****   /* Enable DAC reset state */
 101:../SPL/src/stm32f10x_dac.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  38              		.loc 1 101 0
  39 0004 4FF00050 		mov	r0, #536870912
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 102:../SPL/src/stm32f10x_dac.c ****   /* Release DAC from reset state */
 103:../SPL/src/stm32f10x_dac.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
  42              		.loc 1 103 0
  43 0010 4FF00050 		mov	r0, #536870912
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 104:../SPL/src/stm32f10x_dac.c **** }
  46              		.loc 1 104 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE29:
  51 001e 00BF     		.align	2
  52              		.global	DAC_Init
  53              		.thumb
  54              		.thumb_func
  56              	DAC_Init:
  57              	.LFB30:
 105:../SPL/src/stm32f10x_dac.c **** 
 106:../SPL/src/stm32f10x_dac.c **** /**
 107:../SPL/src/stm32f10x_dac.c ****   * @brief  Initializes the DAC peripheral according to the specified 
 108:../SPL/src/stm32f10x_dac.c ****   *         parameters in the DAC_InitStruct.
 109:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 110:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 111:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 112:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 113:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
 114:../SPL/src/stm32f10x_dac.c ****   *        contains the configuration information for the specified DAC channel.
 115:../SPL/src/stm32f10x_dac.c ****   * @retval None
 116:../SPL/src/stm32f10x_dac.c ****   */
 117:../SPL/src/stm32f10x_dac.c **** void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
 118:../SPL/src/stm32f10x_dac.c **** {
  58              		.loc 1 118 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0020 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0022 85B0     		sub	sp, sp, #20
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 24
  70 0024 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0026 7860     		str	r0, [r7, #4]
  74 0028 3960     		str	r1, [r7, #0]
 119:../SPL/src/stm32f10x_dac.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
  75              		.loc 1 119 0
  76 002a 4FF00003 		mov	r3, #0
  77 002e FB60     		str	r3, [r7, #12]
  78 0030 4FF00003 		mov	r3, #0
  79 0034 BB60     		str	r3, [r7, #8]
 120:../SPL/src/stm32f10x_dac.c ****   /* Check the DAC parameters */
 121:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
 122:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
 123:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitu
 124:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
 125:../SPL/src/stm32f10x_dac.c **** /*---------------------------- DAC CR Configuration --------------------------*/
 126:../SPL/src/stm32f10x_dac.c ****   /* Get the DAC CR value */
 127:../SPL/src/stm32f10x_dac.c ****   tmpreg1 = DAC->CR;
  80              		.loc 1 127 0
  81 0036 144B     		ldr	r3, .L3
  82 0038 1B68     		ldr	r3, [r3, #0]
  83 003a FB60     		str	r3, [r7, #12]
 128:../SPL/src/stm32f10x_dac.c ****   /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
 129:../SPL/src/stm32f10x_dac.c ****   tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
  84              		.loc 1 129 0
  85 003c 7B68     		ldr	r3, [r7, #4]
  86 003e 40F6FE72 		movw	r2, #4094
  87 0042 02FA03F3 		lsl	r3, r2, r3
  88 0046 6FEA0303 		mvn	r3, r3
  89 004a FA68     		ldr	r2, [r7, #12]
  90 004c 1340     		ands	r3, r3, r2
  91 004e FB60     		str	r3, [r7, #12]
 130:../SPL/src/stm32f10x_dac.c ****   /* Configure for the selected DAC channel: buffer output, trigger, wave generation,
 131:../SPL/src/stm32f10x_dac.c ****      mask/amplitude for wave generation */
 132:../SPL/src/stm32f10x_dac.c ****   /* Set TSELx and TENx bits according to DAC_Trigger value */
 133:../SPL/src/stm32f10x_dac.c ****   /* Set WAVEx bits according to DAC_WaveGeneration value */
 134:../SPL/src/stm32f10x_dac.c ****   /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
 135:../SPL/src/stm32f10x_dac.c ****   /* Set BOFFx bit according to DAC_OutputBuffer value */   
 136:../SPL/src/stm32f10x_dac.c ****   tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
  92              		.loc 1 136 0
  93 0050 3B68     		ldr	r3, [r7, #0]
  94 0052 1A68     		ldr	r2, [r3, #0]
  95 0054 3B68     		ldr	r3, [r7, #0]
  96 0056 5B68     		ldr	r3, [r3, #4]
  97 0058 1A43     		orrs	r2, r2, r3
 137:../SPL/src/stm32f10x_dac.c ****              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
  98              		.loc 1 137 0
  99 005a 3B68     		ldr	r3, [r7, #0]
 100 005c 9B68     		ldr	r3, [r3, #8]
 136:../SPL/src/stm32f10x_dac.c ****   tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 101              		.loc 1 136 0
 102 005e 1A43     		orrs	r2, r2, r3
 103              		.loc 1 137 0
 104 0060 3B68     		ldr	r3, [r7, #0]
 105 0062 DB68     		ldr	r3, [r3, #12]
 136:../SPL/src/stm32f10x_dac.c ****   tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 106              		.loc 1 136 0
 107 0064 1343     		orrs	r3, r3, r2
 108 0066 BB60     		str	r3, [r7, #8]
 138:../SPL/src/stm32f10x_dac.c ****   /* Calculate CR register value depending on DAC_Channel */
 139:../SPL/src/stm32f10x_dac.c ****   tmpreg1 |= tmpreg2 << DAC_Channel;
 109              		.loc 1 139 0
 110 0068 7B68     		ldr	r3, [r7, #4]
 111 006a BA68     		ldr	r2, [r7, #8]
 112 006c 02FA03F3 		lsl	r3, r2, r3
 113 0070 FA68     		ldr	r2, [r7, #12]
 114 0072 1343     		orrs	r3, r3, r2
 115 0074 FB60     		str	r3, [r7, #12]
 140:../SPL/src/stm32f10x_dac.c ****   /* Write to DAC CR */
 141:../SPL/src/stm32f10x_dac.c ****   DAC->CR = tmpreg1;
 116              		.loc 1 141 0
 117 0076 044B     		ldr	r3, .L3
 118 0078 FA68     		ldr	r2, [r7, #12]
 119 007a 1A60     		str	r2, [r3, #0]
 142:../SPL/src/stm32f10x_dac.c **** }
 120              		.loc 1 142 0
 121 007c 07F11407 		add	r7, r7, #20
 122 0080 BD46     		mov	sp, r7
 123 0082 80BC     		pop	{r7}
 124 0084 7047     		bx	lr
 125              	.L4:
 126 0086 00BF     		.align	2
 127              	.L3:
 128 0088 00740040 		.word	1073771520
 129              		.cfi_endproc
 130              	.LFE30:
 132              		.align	2
 133              		.global	DAC_StructInit
 134              		.thumb
 135              		.thumb_func
 137              	DAC_StructInit:
 138              	.LFB31:
 143:../SPL/src/stm32f10x_dac.c **** 
 144:../SPL/src/stm32f10x_dac.c **** /**
 145:../SPL/src/stm32f10x_dac.c ****   * @brief  Fills each DAC_InitStruct member with its default value.
 146:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_InitStruct : pointer to a DAC_InitTypeDef structure which will
 147:../SPL/src/stm32f10x_dac.c ****   *         be initialized.
 148:../SPL/src/stm32f10x_dac.c ****   * @retval None
 149:../SPL/src/stm32f10x_dac.c ****   */
 150:../SPL/src/stm32f10x_dac.c **** void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
 151:../SPL/src/stm32f10x_dac.c **** {
 139              		.loc 1 151 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144 008c 80B4     		push	{r7}
 145              	.LCFI5:
 146              		.cfi_def_cfa_offset 4
 147              		.cfi_offset 7, -4
 148 008e 83B0     		sub	sp, sp, #12
 149              	.LCFI6:
 150              		.cfi_def_cfa_offset 16
 151 0090 00AF     		add	r7, sp, #0
 152              	.LCFI7:
 153              		.cfi_def_cfa_register 7
 154 0092 7860     		str	r0, [r7, #4]
 152:../SPL/src/stm32f10x_dac.c **** /*--------------- Reset DAC init structure parameters values -----------------*/
 153:../SPL/src/stm32f10x_dac.c ****   /* Initialize the DAC_Trigger member */
 154:../SPL/src/stm32f10x_dac.c ****   DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 155              		.loc 1 154 0
 156 0094 7B68     		ldr	r3, [r7, #4]
 157 0096 4FF00002 		mov	r2, #0
 158 009a 1A60     		str	r2, [r3, #0]
 155:../SPL/src/stm32f10x_dac.c ****   /* Initialize the DAC_WaveGeneration member */
 156:../SPL/src/stm32f10x_dac.c ****   DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 159              		.loc 1 156 0
 160 009c 7B68     		ldr	r3, [r7, #4]
 161 009e 4FF00002 		mov	r2, #0
 162 00a2 5A60     		str	r2, [r3, #4]
 157:../SPL/src/stm32f10x_dac.c ****   /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
 158:../SPL/src/stm32f10x_dac.c ****   DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 163              		.loc 1 158 0
 164 00a4 7B68     		ldr	r3, [r7, #4]
 165 00a6 4FF00002 		mov	r2, #0
 166 00aa 9A60     		str	r2, [r3, #8]
 159:../SPL/src/stm32f10x_dac.c ****   /* Initialize the DAC_OutputBuffer member */
 160:../SPL/src/stm32f10x_dac.c ****   DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 167              		.loc 1 160 0
 168 00ac 7B68     		ldr	r3, [r7, #4]
 169 00ae 4FF00002 		mov	r2, #0
 170 00b2 DA60     		str	r2, [r3, #12]
 161:../SPL/src/stm32f10x_dac.c **** }
 171              		.loc 1 161 0
 172 00b4 07F10C07 		add	r7, r7, #12
 173 00b8 BD46     		mov	sp, r7
 174 00ba 80BC     		pop	{r7}
 175 00bc 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE31:
 179 00be 00BF     		.align	2
 180              		.global	DAC_Cmd
 181              		.thumb
 182              		.thumb_func
 184              	DAC_Cmd:
 185              	.LFB32:
 162:../SPL/src/stm32f10x_dac.c **** 
 163:../SPL/src/stm32f10x_dac.c **** /**
 164:../SPL/src/stm32f10x_dac.c ****   * @brief  Enables or disables the specified DAC channel.
 165:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 166:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 167:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 168:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 169:../SPL/src/stm32f10x_dac.c ****   * @param  NewState: new state of the DAC channel. 
 170:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be: ENABLE or DISABLE.
 171:../SPL/src/stm32f10x_dac.c ****   * @retval None
 172:../SPL/src/stm32f10x_dac.c ****   */
 173:../SPL/src/stm32f10x_dac.c **** void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
 174:../SPL/src/stm32f10x_dac.c **** {
 186              		.loc 1 174 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 8
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 00c0 80B4     		push	{r7}
 192              	.LCFI8:
 193              		.cfi_def_cfa_offset 4
 194              		.cfi_offset 7, -4
 195 00c2 83B0     		sub	sp, sp, #12
 196              	.LCFI9:
 197              		.cfi_def_cfa_offset 16
 198 00c4 00AF     		add	r7, sp, #0
 199              	.LCFI10:
 200              		.cfi_def_cfa_register 7
 201 00c6 7860     		str	r0, [r7, #4]
 202 00c8 0B46     		mov	r3, r1
 203 00ca FB70     		strb	r3, [r7, #3]
 175:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 176:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 177:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 178:../SPL/src/stm32f10x_dac.c ****   if (NewState != DISABLE)
 204              		.loc 1 178 0
 205 00cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 206 00ce 002B     		cmp	r3, #0
 207 00d0 0AD0     		beq	.L7
 179:../SPL/src/stm32f10x_dac.c ****   {
 180:../SPL/src/stm32f10x_dac.c ****     /* Enable the selected DAC channel */
 181:../SPL/src/stm32f10x_dac.c ****     DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 208              		.loc 1 181 0
 209 00d2 0E4B     		ldr	r3, .L9
 210 00d4 0D4A     		ldr	r2, .L9
 211 00d6 1168     		ldr	r1, [r2, #0]
 212 00d8 7A68     		ldr	r2, [r7, #4]
 213 00da 4FF00100 		mov	r0, #1
 214 00de 00FA02F2 		lsl	r2, r0, r2
 215 00e2 0A43     		orrs	r2, r2, r1
 216 00e4 1A60     		str	r2, [r3, #0]
 217 00e6 0BE0     		b	.L6
 218              	.L7:
 182:../SPL/src/stm32f10x_dac.c ****   }
 183:../SPL/src/stm32f10x_dac.c ****   else
 184:../SPL/src/stm32f10x_dac.c ****   {
 185:../SPL/src/stm32f10x_dac.c ****     /* Disable the selected DAC channel */
 186:../SPL/src/stm32f10x_dac.c ****     DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
 219              		.loc 1 186 0
 220 00e8 084B     		ldr	r3, .L9
 221 00ea 084A     		ldr	r2, .L9
 222 00ec 1168     		ldr	r1, [r2, #0]
 223 00ee 7A68     		ldr	r2, [r7, #4]
 224 00f0 4FF00100 		mov	r0, #1
 225 00f4 00FA02F2 		lsl	r2, r0, r2
 226 00f8 6FEA0202 		mvn	r2, r2
 227 00fc 0A40     		ands	r2, r2, r1
 228 00fe 1A60     		str	r2, [r3, #0]
 229              	.L6:
 187:../SPL/src/stm32f10x_dac.c ****   }
 188:../SPL/src/stm32f10x_dac.c **** }
 230              		.loc 1 188 0
 231 0100 07F10C07 		add	r7, r7, #12
 232 0104 BD46     		mov	sp, r7
 233 0106 80BC     		pop	{r7}
 234 0108 7047     		bx	lr
 235              	.L10:
 236 010a 00BF     		.align	2
 237              	.L9:
 238 010c 00740040 		.word	1073771520
 239              		.cfi_endproc
 240              	.LFE32:
 242              		.align	2
 243              		.global	DAC_ITConfig
 244              		.thumb
 245              		.thumb_func
 247              	DAC_ITConfig:
 248              	.LFB33:
 189:../SPL/src/stm32f10x_dac.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 190:../SPL/src/stm32f10x_dac.c **** /**
 191:../SPL/src/stm32f10x_dac.c ****   * @brief  Enables or disables the specified DAC interrupts.
 192:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 193:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 194:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 195:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 196:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt sources to be enabled or disabled. 
 197:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be the following values:
 198:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                      
 199:../SPL/src/stm32f10x_dac.c ****   * @param  NewState: new state of the specified DAC interrupts.
 200:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be: ENABLE or DISABLE.
 201:../SPL/src/stm32f10x_dac.c ****   * @retval None
 202:../SPL/src/stm32f10x_dac.c ****   */ 
 203:../SPL/src/stm32f10x_dac.c **** void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
 204:../SPL/src/stm32f10x_dac.c **** {
 249              		.loc 1 204 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 16
 252              		@ frame_needed = 1, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254 0110 80B4     		push	{r7}
 255              	.LCFI11:
 256              		.cfi_def_cfa_offset 4
 257              		.cfi_offset 7, -4
 258 0112 85B0     		sub	sp, sp, #20
 259              	.LCFI12:
 260              		.cfi_def_cfa_offset 24
 261 0114 00AF     		add	r7, sp, #0
 262              	.LCFI13:
 263              		.cfi_def_cfa_register 7
 264 0116 F860     		str	r0, [r7, #12]
 265 0118 B960     		str	r1, [r7, #8]
 266 011a 1346     		mov	r3, r2
 267 011c FB71     		strb	r3, [r7, #7]
 205:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 206:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 207:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 208:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_IT(DAC_IT)); 
 209:../SPL/src/stm32f10x_dac.c **** 
 210:../SPL/src/stm32f10x_dac.c ****   if (NewState != DISABLE)
 268              		.loc 1 210 0
 269 011e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 270 0120 002B     		cmp	r3, #0
 271 0122 09D0     		beq	.L12
 211:../SPL/src/stm32f10x_dac.c ****   {
 212:../SPL/src/stm32f10x_dac.c ****     /* Enable the selected DAC interrupts */
 213:../SPL/src/stm32f10x_dac.c ****     DAC->CR |=  (DAC_IT << DAC_Channel);
 272              		.loc 1 213 0
 273 0124 0C4B     		ldr	r3, .L14
 274 0126 0C4A     		ldr	r2, .L14
 275 0128 1168     		ldr	r1, [r2, #0]
 276 012a FA68     		ldr	r2, [r7, #12]
 277 012c B868     		ldr	r0, [r7, #8]
 278 012e 00FA02F2 		lsl	r2, r0, r2
 279 0132 0A43     		orrs	r2, r2, r1
 280 0134 1A60     		str	r2, [r3, #0]
 281 0136 0AE0     		b	.L11
 282              	.L12:
 214:../SPL/src/stm32f10x_dac.c ****   }
 215:../SPL/src/stm32f10x_dac.c ****   else
 216:../SPL/src/stm32f10x_dac.c ****   {
 217:../SPL/src/stm32f10x_dac.c ****     /* Disable the selected DAC interrupts */
 218:../SPL/src/stm32f10x_dac.c ****     DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 283              		.loc 1 218 0
 284 0138 074B     		ldr	r3, .L14
 285 013a 074A     		ldr	r2, .L14
 286 013c 1168     		ldr	r1, [r2, #0]
 287 013e FA68     		ldr	r2, [r7, #12]
 288 0140 B868     		ldr	r0, [r7, #8]
 289 0142 00FA02F2 		lsl	r2, r0, r2
 290 0146 6FEA0202 		mvn	r2, r2
 291 014a 0A40     		ands	r2, r2, r1
 292 014c 1A60     		str	r2, [r3, #0]
 293              	.L11:
 219:../SPL/src/stm32f10x_dac.c ****   }
 220:../SPL/src/stm32f10x_dac.c **** }
 294              		.loc 1 220 0
 295 014e 07F11407 		add	r7, r7, #20
 296 0152 BD46     		mov	sp, r7
 297 0154 80BC     		pop	{r7}
 298 0156 7047     		bx	lr
 299              	.L15:
 300              		.align	2
 301              	.L14:
 302 0158 00740040 		.word	1073771520
 303              		.cfi_endproc
 304              	.LFE33:
 306              		.align	2
 307              		.global	DAC_DMACmd
 308              		.thumb
 309              		.thumb_func
 311              	DAC_DMACmd:
 312              	.LFB34:
 221:../SPL/src/stm32f10x_dac.c **** #endif
 222:../SPL/src/stm32f10x_dac.c **** 
 223:../SPL/src/stm32f10x_dac.c **** /**
 224:../SPL/src/stm32f10x_dac.c ****   * @brief  Enables or disables the specified DAC channel DMA request.
 225:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 226:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 227:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 228:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 229:../SPL/src/stm32f10x_dac.c ****   * @param  NewState: new state of the selected DAC channel DMA request.
 230:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be: ENABLE or DISABLE.
 231:../SPL/src/stm32f10x_dac.c ****   * @retval None
 232:../SPL/src/stm32f10x_dac.c ****   */
 233:../SPL/src/stm32f10x_dac.c **** void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
 234:../SPL/src/stm32f10x_dac.c **** {
 313              		.loc 1 234 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 8
 316              		@ frame_needed = 1, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 318 015c 80B4     		push	{r7}
 319              	.LCFI14:
 320              		.cfi_def_cfa_offset 4
 321              		.cfi_offset 7, -4
 322 015e 83B0     		sub	sp, sp, #12
 323              	.LCFI15:
 324              		.cfi_def_cfa_offset 16
 325 0160 00AF     		add	r7, sp, #0
 326              	.LCFI16:
 327              		.cfi_def_cfa_register 7
 328 0162 7860     		str	r0, [r7, #4]
 329 0164 0B46     		mov	r3, r1
 330 0166 FB70     		strb	r3, [r7, #3]
 235:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 236:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 237:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 238:../SPL/src/stm32f10x_dac.c ****   if (NewState != DISABLE)
 331              		.loc 1 238 0
 332 0168 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 333 016a 002B     		cmp	r3, #0
 334 016c 0AD0     		beq	.L17
 239:../SPL/src/stm32f10x_dac.c ****   {
 240:../SPL/src/stm32f10x_dac.c ****     /* Enable the selected DAC channel DMA request */
 241:../SPL/src/stm32f10x_dac.c ****     DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 335              		.loc 1 241 0
 336 016e 0E4B     		ldr	r3, .L19
 337 0170 0D4A     		ldr	r2, .L19
 338 0172 1168     		ldr	r1, [r2, #0]
 339 0174 7A68     		ldr	r2, [r7, #4]
 340 0176 4FF48050 		mov	r0, #4096
 341 017a 00FA02F2 		lsl	r2, r0, r2
 342 017e 0A43     		orrs	r2, r2, r1
 343 0180 1A60     		str	r2, [r3, #0]
 344 0182 0BE0     		b	.L16
 345              	.L17:
 242:../SPL/src/stm32f10x_dac.c ****   }
 243:../SPL/src/stm32f10x_dac.c ****   else
 244:../SPL/src/stm32f10x_dac.c ****   {
 245:../SPL/src/stm32f10x_dac.c ****     /* Disable the selected DAC channel DMA request */
 246:../SPL/src/stm32f10x_dac.c ****     DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
 346              		.loc 1 246 0
 347 0184 084B     		ldr	r3, .L19
 348 0186 084A     		ldr	r2, .L19
 349 0188 1168     		ldr	r1, [r2, #0]
 350 018a 7A68     		ldr	r2, [r7, #4]
 351 018c 4FF48050 		mov	r0, #4096
 352 0190 00FA02F2 		lsl	r2, r0, r2
 353 0194 6FEA0202 		mvn	r2, r2
 354 0198 0A40     		ands	r2, r2, r1
 355 019a 1A60     		str	r2, [r3, #0]
 356              	.L16:
 247:../SPL/src/stm32f10x_dac.c ****   }
 248:../SPL/src/stm32f10x_dac.c **** }
 357              		.loc 1 248 0
 358 019c 07F10C07 		add	r7, r7, #12
 359 01a0 BD46     		mov	sp, r7
 360 01a2 80BC     		pop	{r7}
 361 01a4 7047     		bx	lr
 362              	.L20:
 363 01a6 00BF     		.align	2
 364              	.L19:
 365 01a8 00740040 		.word	1073771520
 366              		.cfi_endproc
 367              	.LFE34:
 369              		.align	2
 370              		.global	DAC_SoftwareTriggerCmd
 371              		.thumb
 372              		.thumb_func
 374              	DAC_SoftwareTriggerCmd:
 375              	.LFB35:
 249:../SPL/src/stm32f10x_dac.c **** 
 250:../SPL/src/stm32f10x_dac.c **** /**
 251:../SPL/src/stm32f10x_dac.c ****   * @brief  Enables or disables the selected DAC channel software trigger.
 252:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 253:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 254:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 255:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 256:../SPL/src/stm32f10x_dac.c ****   * @param  NewState: new state of the selected DAC channel software trigger.
 257:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be: ENABLE or DISABLE.
 258:../SPL/src/stm32f10x_dac.c ****   * @retval None
 259:../SPL/src/stm32f10x_dac.c ****   */
 260:../SPL/src/stm32f10x_dac.c **** void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
 261:../SPL/src/stm32f10x_dac.c **** {
 376              		.loc 1 261 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 8
 379              		@ frame_needed = 1, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381 01ac 80B4     		push	{r7}
 382              	.LCFI17:
 383              		.cfi_def_cfa_offset 4
 384              		.cfi_offset 7, -4
 385 01ae 83B0     		sub	sp, sp, #12
 386              	.LCFI18:
 387              		.cfi_def_cfa_offset 16
 388 01b0 00AF     		add	r7, sp, #0
 389              	.LCFI19:
 390              		.cfi_def_cfa_register 7
 391 01b2 7860     		str	r0, [r7, #4]
 392 01b4 0B46     		mov	r3, r1
 393 01b6 FB70     		strb	r3, [r7, #3]
 262:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 263:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 264:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 265:../SPL/src/stm32f10x_dac.c ****   if (NewState != DISABLE)
 394              		.loc 1 265 0
 395 01b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 396 01ba 002B     		cmp	r3, #0
 397 01bc 0CD0     		beq	.L22
 266:../SPL/src/stm32f10x_dac.c ****   {
 267:../SPL/src/stm32f10x_dac.c ****     /* Enable software trigger for the selected DAC channel */
 268:../SPL/src/stm32f10x_dac.c ****     DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 398              		.loc 1 268 0
 399 01be 104B     		ldr	r3, .L24
 400 01c0 0F4A     		ldr	r2, .L24
 401 01c2 5168     		ldr	r1, [r2, #4]
 402 01c4 7A68     		ldr	r2, [r7, #4]
 403 01c6 4FEA1212 		lsr	r2, r2, #4
 404 01ca 4FF00100 		mov	r0, #1
 405 01ce 00FA02F2 		lsl	r2, r0, r2
 406 01d2 0A43     		orrs	r2, r2, r1
 407 01d4 5A60     		str	r2, [r3, #4]
 408 01d6 0DE0     		b	.L21
 409              	.L22:
 269:../SPL/src/stm32f10x_dac.c ****   }
 270:../SPL/src/stm32f10x_dac.c ****   else
 271:../SPL/src/stm32f10x_dac.c ****   {
 272:../SPL/src/stm32f10x_dac.c ****     /* Disable software trigger for the selected DAC channel */
 273:../SPL/src/stm32f10x_dac.c ****     DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 410              		.loc 1 273 0
 411 01d8 094B     		ldr	r3, .L24
 412 01da 094A     		ldr	r2, .L24
 413 01dc 5168     		ldr	r1, [r2, #4]
 414 01de 7A68     		ldr	r2, [r7, #4]
 415 01e0 4FEA1212 		lsr	r2, r2, #4
 416 01e4 4FF00100 		mov	r0, #1
 417 01e8 00FA02F2 		lsl	r2, r0, r2
 418 01ec 6FEA0202 		mvn	r2, r2
 419 01f0 0A40     		ands	r2, r2, r1
 420 01f2 5A60     		str	r2, [r3, #4]
 421              	.L21:
 274:../SPL/src/stm32f10x_dac.c ****   }
 275:../SPL/src/stm32f10x_dac.c **** }
 422              		.loc 1 275 0
 423 01f4 07F10C07 		add	r7, r7, #12
 424 01f8 BD46     		mov	sp, r7
 425 01fa 80BC     		pop	{r7}
 426 01fc 7047     		bx	lr
 427              	.L25:
 428 01fe 00BF     		.align	2
 429              	.L24:
 430 0200 00740040 		.word	1073771520
 431              		.cfi_endproc
 432              	.LFE35:
 434              		.align	2
 435              		.global	DAC_DualSoftwareTriggerCmd
 436              		.thumb
 437              		.thumb_func
 439              	DAC_DualSoftwareTriggerCmd:
 440              	.LFB36:
 276:../SPL/src/stm32f10x_dac.c **** 
 277:../SPL/src/stm32f10x_dac.c **** /**
 278:../SPL/src/stm32f10x_dac.c ****   * @brief  Enables or disables simultaneously the two DAC channels software
 279:../SPL/src/stm32f10x_dac.c ****   *   triggers.
 280:../SPL/src/stm32f10x_dac.c ****   * @param  NewState: new state of the DAC channels software triggers.
 281:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be: ENABLE or DISABLE.
 282:../SPL/src/stm32f10x_dac.c ****   * @retval None
 283:../SPL/src/stm32f10x_dac.c ****   */
 284:../SPL/src/stm32f10x_dac.c **** void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
 285:../SPL/src/stm32f10x_dac.c **** {
 441              		.loc 1 285 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0204 80B4     		push	{r7}
 447              	.LCFI20:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 0206 83B0     		sub	sp, sp, #12
 451              	.LCFI21:
 452              		.cfi_def_cfa_offset 16
 453 0208 00AF     		add	r7, sp, #0
 454              	.LCFI22:
 455              		.cfi_def_cfa_register 7
 456 020a 0346     		mov	r3, r0
 457 020c FB71     		strb	r3, [r7, #7]
 286:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 287:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 288:../SPL/src/stm32f10x_dac.c ****   if (NewState != DISABLE)
 458              		.loc 1 288 0
 459 020e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 460 0210 002B     		cmp	r3, #0
 461 0212 06D0     		beq	.L27
 289:../SPL/src/stm32f10x_dac.c ****   {
 290:../SPL/src/stm32f10x_dac.c ****     /* Enable software trigger for both DAC channels */
 291:../SPL/src/stm32f10x_dac.c ****     DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
 462              		.loc 1 291 0
 463 0214 084B     		ldr	r3, .L29
 464 0216 084A     		ldr	r2, .L29
 465 0218 5268     		ldr	r2, [r2, #4]
 466 021a 42F00302 		orr	r2, r2, #3
 467 021e 5A60     		str	r2, [r3, #4]
 468 0220 05E0     		b	.L26
 469              	.L27:
 292:../SPL/src/stm32f10x_dac.c ****   }
 293:../SPL/src/stm32f10x_dac.c ****   else
 294:../SPL/src/stm32f10x_dac.c ****   {
 295:../SPL/src/stm32f10x_dac.c ****     /* Disable software trigger for both DAC channels */
 296:../SPL/src/stm32f10x_dac.c ****     DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 470              		.loc 1 296 0
 471 0222 054B     		ldr	r3, .L29
 472 0224 044A     		ldr	r2, .L29
 473 0226 5268     		ldr	r2, [r2, #4]
 474 0228 22F00302 		bic	r2, r2, #3
 475 022c 5A60     		str	r2, [r3, #4]
 476              	.L26:
 297:../SPL/src/stm32f10x_dac.c ****   }
 298:../SPL/src/stm32f10x_dac.c **** }
 477              		.loc 1 298 0
 478 022e 07F10C07 		add	r7, r7, #12
 479 0232 BD46     		mov	sp, r7
 480 0234 80BC     		pop	{r7}
 481 0236 7047     		bx	lr
 482              	.L30:
 483              		.align	2
 484              	.L29:
 485 0238 00740040 		.word	1073771520
 486              		.cfi_endproc
 487              	.LFE36:
 489              		.align	2
 490              		.global	DAC_WaveGenerationCmd
 491              		.thumb
 492              		.thumb_func
 494              	DAC_WaveGenerationCmd:
 495              	.LFB37:
 299:../SPL/src/stm32f10x_dac.c **** 
 300:../SPL/src/stm32f10x_dac.c **** /**
 301:../SPL/src/stm32f10x_dac.c ****   * @brief  Enables or disables the selected DAC channel wave generation.
 302:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 303:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 304:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 305:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 306:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Wave: Specifies the wave type to enable or disable.
 307:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 308:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Wave_Noise: noise wave generation
 309:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Wave_Triangle: triangle wave generation
 310:../SPL/src/stm32f10x_dac.c ****   * @param  NewState: new state of the selected DAC channel wave generation.
 311:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be: ENABLE or DISABLE.
 312:../SPL/src/stm32f10x_dac.c ****   * @retval None
 313:../SPL/src/stm32f10x_dac.c ****   */
 314:../SPL/src/stm32f10x_dac.c **** void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
 315:../SPL/src/stm32f10x_dac.c **** {
 496              		.loc 1 315 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 16
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 023c 80B4     		push	{r7}
 502              	.LCFI23:
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 7, -4
 505 023e 85B0     		sub	sp, sp, #20
 506              	.LCFI24:
 507              		.cfi_def_cfa_offset 24
 508 0240 00AF     		add	r7, sp, #0
 509              	.LCFI25:
 510              		.cfi_def_cfa_register 7
 511 0242 F860     		str	r0, [r7, #12]
 512 0244 B960     		str	r1, [r7, #8]
 513 0246 1346     		mov	r3, r2
 514 0248 FB71     		strb	r3, [r7, #7]
 316:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 317:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 318:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_WAVE(DAC_Wave)); 
 319:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 320:../SPL/src/stm32f10x_dac.c ****   if (NewState != DISABLE)
 515              		.loc 1 320 0
 516 024a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 517 024c 002B     		cmp	r3, #0
 518 024e 09D0     		beq	.L32
 321:../SPL/src/stm32f10x_dac.c ****   {
 322:../SPL/src/stm32f10x_dac.c ****     /* Enable the selected wave generation for the selected DAC channel */
 323:../SPL/src/stm32f10x_dac.c ****     DAC->CR |= DAC_Wave << DAC_Channel;
 519              		.loc 1 323 0
 520 0250 0C4B     		ldr	r3, .L34
 521 0252 0C4A     		ldr	r2, .L34
 522 0254 1168     		ldr	r1, [r2, #0]
 523 0256 FA68     		ldr	r2, [r7, #12]
 524 0258 B868     		ldr	r0, [r7, #8]
 525 025a 00FA02F2 		lsl	r2, r0, r2
 526 025e 0A43     		orrs	r2, r2, r1
 527 0260 1A60     		str	r2, [r3, #0]
 528 0262 0AE0     		b	.L31
 529              	.L32:
 324:../SPL/src/stm32f10x_dac.c ****   }
 325:../SPL/src/stm32f10x_dac.c ****   else
 326:../SPL/src/stm32f10x_dac.c ****   {
 327:../SPL/src/stm32f10x_dac.c ****     /* Disable the selected wave generation for the selected DAC channel */
 328:../SPL/src/stm32f10x_dac.c ****     DAC->CR &= ~(DAC_Wave << DAC_Channel);
 530              		.loc 1 328 0
 531 0264 074B     		ldr	r3, .L34
 532 0266 074A     		ldr	r2, .L34
 533 0268 1168     		ldr	r1, [r2, #0]
 534 026a FA68     		ldr	r2, [r7, #12]
 535 026c B868     		ldr	r0, [r7, #8]
 536 026e 00FA02F2 		lsl	r2, r0, r2
 537 0272 6FEA0202 		mvn	r2, r2
 538 0276 0A40     		ands	r2, r2, r1
 539 0278 1A60     		str	r2, [r3, #0]
 540              	.L31:
 329:../SPL/src/stm32f10x_dac.c ****   }
 330:../SPL/src/stm32f10x_dac.c **** }
 541              		.loc 1 330 0
 542 027a 07F11407 		add	r7, r7, #20
 543 027e BD46     		mov	sp, r7
 544 0280 80BC     		pop	{r7}
 545 0282 7047     		bx	lr
 546              	.L35:
 547              		.align	2
 548              	.L34:
 549 0284 00740040 		.word	1073771520
 550              		.cfi_endproc
 551              	.LFE37:
 553              		.align	2
 554              		.global	DAC_SetChannel1Data
 555              		.thumb
 556              		.thumb_func
 558              	DAC_SetChannel1Data:
 559              	.LFB38:
 331:../SPL/src/stm32f10x_dac.c **** 
 332:../SPL/src/stm32f10x_dac.c **** /**
 333:../SPL/src/stm32f10x_dac.c ****   * @brief  Set the specified data holding register value for DAC channel1.
 334:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Align: Specifies the data alignment for DAC channel1.
 335:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 336:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_8b_R: 8bit right data alignment selected
 337:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_12b_L: 12bit left data alignment selected
 338:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_12b_R: 12bit right data alignment selected
 339:../SPL/src/stm32f10x_dac.c ****   * @param  Data : Data to be loaded in the selected data holding register.
 340:../SPL/src/stm32f10x_dac.c ****   * @retval None
 341:../SPL/src/stm32f10x_dac.c ****   */
 342:../SPL/src/stm32f10x_dac.c **** void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
 343:../SPL/src/stm32f10x_dac.c **** {  
 560              		.loc 1 343 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 16
 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565 0288 80B4     		push	{r7}
 566              	.LCFI26:
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 028a 85B0     		sub	sp, sp, #20
 570              	.LCFI27:
 571              		.cfi_def_cfa_offset 24
 572 028c 00AF     		add	r7, sp, #0
 573              	.LCFI28:
 574              		.cfi_def_cfa_register 7
 575 028e 7860     		str	r0, [r7, #4]
 576 0290 0B46     		mov	r3, r1
 577 0292 7B80     		strh	r3, [r7, #2]	@ movhi
 344:../SPL/src/stm32f10x_dac.c ****   __IO uint32_t tmp = 0;
 578              		.loc 1 344 0
 579 0294 4FF00003 		mov	r3, #0
 580 0298 FB60     		str	r3, [r7, #12]
 345:../SPL/src/stm32f10x_dac.c ****   
 346:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 347:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 348:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_DATA(Data));
 349:../SPL/src/stm32f10x_dac.c ****   
 350:../SPL/src/stm32f10x_dac.c ****   tmp = (uint32_t)DAC_BASE; 
 581              		.loc 1 350 0
 582 029a 084B     		ldr	r3, .L37
 583 029c FB60     		str	r3, [r7, #12]
 351:../SPL/src/stm32f10x_dac.c ****   tmp += DHR12R1_OFFSET + DAC_Align;
 584              		.loc 1 351 0
 585 029e FA68     		ldr	r2, [r7, #12]
 586 02a0 7B68     		ldr	r3, [r7, #4]
 587 02a2 D318     		adds	r3, r2, r3
 588 02a4 03F10803 		add	r3, r3, #8
 589 02a8 FB60     		str	r3, [r7, #12]
 352:../SPL/src/stm32f10x_dac.c **** 
 353:../SPL/src/stm32f10x_dac.c ****   /* Set the DAC channel1 selected data holding register */
 354:../SPL/src/stm32f10x_dac.c ****   *(__IO uint32_t *) tmp = Data;
 590              		.loc 1 354 0
 591 02aa FB68     		ldr	r3, [r7, #12]
 592 02ac 7A88     		ldrh	r2, [r7, #2]
 593 02ae 1A60     		str	r2, [r3, #0]
 355:../SPL/src/stm32f10x_dac.c **** }
 594              		.loc 1 355 0
 595 02b0 07F11407 		add	r7, r7, #20
 596 02b4 BD46     		mov	sp, r7
 597 02b6 80BC     		pop	{r7}
 598 02b8 7047     		bx	lr
 599              	.L38:
 600 02ba 00BF     		.align	2
 601              	.L37:
 602 02bc 00740040 		.word	1073771520
 603              		.cfi_endproc
 604              	.LFE38:
 606              		.align	2
 607              		.global	DAC_SetChannel2Data
 608              		.thumb
 609              		.thumb_func
 611              	DAC_SetChannel2Data:
 612              	.LFB39:
 356:../SPL/src/stm32f10x_dac.c **** 
 357:../SPL/src/stm32f10x_dac.c **** /**
 358:../SPL/src/stm32f10x_dac.c ****   * @brief  Set the specified data holding register value for DAC channel2.
 359:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Align: Specifies the data alignment for DAC channel2.
 360:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 361:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_8b_R: 8bit right data alignment selected
 362:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_12b_L: 12bit left data alignment selected
 363:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_12b_R: 12bit right data alignment selected
 364:../SPL/src/stm32f10x_dac.c ****   * @param  Data : Data to be loaded in the selected data holding register.
 365:../SPL/src/stm32f10x_dac.c ****   * @retval None
 366:../SPL/src/stm32f10x_dac.c ****   */
 367:../SPL/src/stm32f10x_dac.c **** void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
 368:../SPL/src/stm32f10x_dac.c **** {
 613              		.loc 1 368 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 16
 616              		@ frame_needed = 1, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 618 02c0 80B4     		push	{r7}
 619              	.LCFI29:
 620              		.cfi_def_cfa_offset 4
 621              		.cfi_offset 7, -4
 622 02c2 85B0     		sub	sp, sp, #20
 623              	.LCFI30:
 624              		.cfi_def_cfa_offset 24
 625 02c4 00AF     		add	r7, sp, #0
 626              	.LCFI31:
 627              		.cfi_def_cfa_register 7
 628 02c6 7860     		str	r0, [r7, #4]
 629 02c8 0B46     		mov	r3, r1
 630 02ca 7B80     		strh	r3, [r7, #2]	@ movhi
 369:../SPL/src/stm32f10x_dac.c ****   __IO uint32_t tmp = 0;
 631              		.loc 1 369 0
 632 02cc 4FF00003 		mov	r3, #0
 633 02d0 FB60     		str	r3, [r7, #12]
 370:../SPL/src/stm32f10x_dac.c **** 
 371:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 372:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 373:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_DATA(Data));
 374:../SPL/src/stm32f10x_dac.c ****   
 375:../SPL/src/stm32f10x_dac.c ****   tmp = (uint32_t)DAC_BASE;
 634              		.loc 1 375 0
 635 02d2 084B     		ldr	r3, .L40
 636 02d4 FB60     		str	r3, [r7, #12]
 376:../SPL/src/stm32f10x_dac.c ****   tmp += DHR12R2_OFFSET + DAC_Align;
 637              		.loc 1 376 0
 638 02d6 FA68     		ldr	r2, [r7, #12]
 639 02d8 7B68     		ldr	r3, [r7, #4]
 640 02da D318     		adds	r3, r2, r3
 641 02dc 03F11403 		add	r3, r3, #20
 642 02e0 FB60     		str	r3, [r7, #12]
 377:../SPL/src/stm32f10x_dac.c **** 
 378:../SPL/src/stm32f10x_dac.c ****   /* Set the DAC channel2 selected data holding register */
 379:../SPL/src/stm32f10x_dac.c ****   *(__IO uint32_t *)tmp = Data;
 643              		.loc 1 379 0
 644 02e2 FB68     		ldr	r3, [r7, #12]
 645 02e4 7A88     		ldrh	r2, [r7, #2]
 646 02e6 1A60     		str	r2, [r3, #0]
 380:../SPL/src/stm32f10x_dac.c **** }
 647              		.loc 1 380 0
 648 02e8 07F11407 		add	r7, r7, #20
 649 02ec BD46     		mov	sp, r7
 650 02ee 80BC     		pop	{r7}
 651 02f0 7047     		bx	lr
 652              	.L41:
 653 02f2 00BF     		.align	2
 654              	.L40:
 655 02f4 00740040 		.word	1073771520
 656              		.cfi_endproc
 657              	.LFE39:
 659              		.align	2
 660              		.global	DAC_SetDualChannelData
 661              		.thumb
 662              		.thumb_func
 664              	DAC_SetDualChannelData:
 665              	.LFB40:
 381:../SPL/src/stm32f10x_dac.c **** 
 382:../SPL/src/stm32f10x_dac.c **** /**
 383:../SPL/src/stm32f10x_dac.c ****   * @brief  Set the specified data holding register value for dual channel
 384:../SPL/src/stm32f10x_dac.c ****   *   DAC.
 385:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Align: Specifies the data alignment for dual channel DAC.
 386:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 387:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_8b_R: 8bit right data alignment selected
 388:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_12b_L: 12bit left data alignment selected
 389:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Align_12b_R: 12bit right data alignment selected
 390:../SPL/src/stm32f10x_dac.c ****   * @param  Data2: Data for DAC Channel2 to be loaded in the selected data 
 391:../SPL/src/stm32f10x_dac.c ****   *   holding register.
 392:../SPL/src/stm32f10x_dac.c ****   * @param  Data1: Data for DAC Channel1 to be loaded in the selected data 
 393:../SPL/src/stm32f10x_dac.c ****   *   holding register.
 394:../SPL/src/stm32f10x_dac.c ****   * @retval None
 395:../SPL/src/stm32f10x_dac.c ****   */
 396:../SPL/src/stm32f10x_dac.c **** void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
 397:../SPL/src/stm32f10x_dac.c **** {
 666              		.loc 1 397 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 16
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 671 02f8 80B4     		push	{r7}
 672              	.LCFI32:
 673              		.cfi_def_cfa_offset 4
 674              		.cfi_offset 7, -4
 675 02fa 85B0     		sub	sp, sp, #20
 676              	.LCFI33:
 677              		.cfi_def_cfa_offset 24
 678 02fc 00AF     		add	r7, sp, #0
 679              	.LCFI34:
 680              		.cfi_def_cfa_register 7
 681 02fe 7860     		str	r0, [r7, #4]
 682 0300 1346     		mov	r3, r2
 683 0302 0A46     		mov	r2, r1	@ movhi
 684 0304 7A80     		strh	r2, [r7, #2]	@ movhi
 685 0306 3B80     		strh	r3, [r7, #0]	@ movhi
 398:../SPL/src/stm32f10x_dac.c ****   uint32_t data = 0, tmp = 0;
 686              		.loc 1 398 0
 687 0308 4FF00003 		mov	r3, #0
 688 030c FB60     		str	r3, [r7, #12]
 689 030e 4FF00003 		mov	r3, #0
 690 0312 BB60     		str	r3, [r7, #8]
 399:../SPL/src/stm32f10x_dac.c ****   
 400:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 401:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 402:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_DATA(Data1));
 403:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_DATA(Data2));
 404:../SPL/src/stm32f10x_dac.c ****   
 405:../SPL/src/stm32f10x_dac.c ****   /* Calculate and set dual DAC data holding register value */
 406:../SPL/src/stm32f10x_dac.c ****   if (DAC_Align == DAC_Align_8b_R)
 691              		.loc 1 406 0
 692 0314 7B68     		ldr	r3, [r7, #4]
 693 0316 082B     		cmp	r3, #8
 694 0318 06D1     		bne	.L43
 407:../SPL/src/stm32f10x_dac.c ****   {
 408:../SPL/src/stm32f10x_dac.c ****     data = ((uint32_t)Data2 << 8) | Data1; 
 695              		.loc 1 408 0
 696 031a 7B88     		ldrh	r3, [r7, #2]
 697 031c 4FEA0322 		lsl	r2, r3, #8
 698 0320 3B88     		ldrh	r3, [r7, #0]
 699 0322 1343     		orrs	r3, r3, r2
 700 0324 FB60     		str	r3, [r7, #12]
 701 0326 05E0     		b	.L44
 702              	.L43:
 409:../SPL/src/stm32f10x_dac.c ****   }
 410:../SPL/src/stm32f10x_dac.c ****   else
 411:../SPL/src/stm32f10x_dac.c ****   {
 412:../SPL/src/stm32f10x_dac.c ****     data = ((uint32_t)Data2 << 16) | Data1;
 703              		.loc 1 412 0
 704 0328 7B88     		ldrh	r3, [r7, #2]
 705 032a 4FEA0342 		lsl	r2, r3, #16
 706 032e 3B88     		ldrh	r3, [r7, #0]
 707 0330 1343     		orrs	r3, r3, r2
 708 0332 FB60     		str	r3, [r7, #12]
 709              	.L44:
 413:../SPL/src/stm32f10x_dac.c ****   }
 414:../SPL/src/stm32f10x_dac.c ****   
 415:../SPL/src/stm32f10x_dac.c ****   tmp = (uint32_t)DAC_BASE;
 710              		.loc 1 415 0
 711 0334 074B     		ldr	r3, .L45
 712 0336 BB60     		str	r3, [r7, #8]
 416:../SPL/src/stm32f10x_dac.c ****   tmp += DHR12RD_OFFSET + DAC_Align;
 713              		.loc 1 416 0
 714 0338 7A68     		ldr	r2, [r7, #4]
 715 033a BB68     		ldr	r3, [r7, #8]
 716 033c D318     		adds	r3, r2, r3
 717 033e 03F12003 		add	r3, r3, #32
 718 0342 BB60     		str	r3, [r7, #8]
 417:../SPL/src/stm32f10x_dac.c **** 
 418:../SPL/src/stm32f10x_dac.c ****   /* Set the dual DAC selected data holding register */
 419:../SPL/src/stm32f10x_dac.c ****   *(__IO uint32_t *)tmp = data;
 719              		.loc 1 419 0
 720 0344 BB68     		ldr	r3, [r7, #8]
 721 0346 FA68     		ldr	r2, [r7, #12]
 722 0348 1A60     		str	r2, [r3, #0]
 420:../SPL/src/stm32f10x_dac.c **** }
 723              		.loc 1 420 0
 724 034a 07F11407 		add	r7, r7, #20
 725 034e BD46     		mov	sp, r7
 726 0350 80BC     		pop	{r7}
 727 0352 7047     		bx	lr
 728              	.L46:
 729              		.align	2
 730              	.L45:
 731 0354 00740040 		.word	1073771520
 732              		.cfi_endproc
 733              	.LFE40:
 735              		.align	2
 736              		.global	DAC_GetDataOutputValue
 737              		.thumb
 738              		.thumb_func
 740              	DAC_GetDataOutputValue:
 741              	.LFB41:
 421:../SPL/src/stm32f10x_dac.c **** 
 422:../SPL/src/stm32f10x_dac.c **** /**
 423:../SPL/src/stm32f10x_dac.c ****   * @brief  Returns the last data output value of the selected DAC channel.
 424:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 425:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 426:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 427:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 428:../SPL/src/stm32f10x_dac.c ****   * @retval The selected DAC channel data output value.
 429:../SPL/src/stm32f10x_dac.c ****   */
 430:../SPL/src/stm32f10x_dac.c **** uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
 431:../SPL/src/stm32f10x_dac.c **** {
 742              		.loc 1 431 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 16
 745              		@ frame_needed = 1, uses_anonymous_args = 0
 746              		@ link register save eliminated.
 747 0358 80B4     		push	{r7}
 748              	.LCFI35:
 749              		.cfi_def_cfa_offset 4
 750              		.cfi_offset 7, -4
 751 035a 85B0     		sub	sp, sp, #20
 752              	.LCFI36:
 753              		.cfi_def_cfa_offset 24
 754 035c 00AF     		add	r7, sp, #0
 755              	.LCFI37:
 756              		.cfi_def_cfa_register 7
 757 035e 7860     		str	r0, [r7, #4]
 432:../SPL/src/stm32f10x_dac.c ****   __IO uint32_t tmp = 0;
 758              		.loc 1 432 0
 759 0360 4FF00003 		mov	r3, #0
 760 0364 FB60     		str	r3, [r7, #12]
 433:../SPL/src/stm32f10x_dac.c ****   
 434:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 435:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 436:../SPL/src/stm32f10x_dac.c ****   
 437:../SPL/src/stm32f10x_dac.c ****   tmp = (uint32_t) DAC_BASE ;
 761              		.loc 1 437 0
 762 0366 094B     		ldr	r3, .L49
 763 0368 FB60     		str	r3, [r7, #12]
 438:../SPL/src/stm32f10x_dac.c ****   tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 764              		.loc 1 438 0
 765 036a 7B68     		ldr	r3, [r7, #4]
 766 036c 4FEA9302 		lsr	r2, r3, #2
 767 0370 FB68     		ldr	r3, [r7, #12]
 768 0372 D318     		adds	r3, r2, r3
 769 0374 03F12C03 		add	r3, r3, #44
 770 0378 FB60     		str	r3, [r7, #12]
 439:../SPL/src/stm32f10x_dac.c ****   
 440:../SPL/src/stm32f10x_dac.c ****   /* Returns the DAC channel data output register value */
 441:../SPL/src/stm32f10x_dac.c ****   return (uint16_t) (*(__IO uint32_t*) tmp);
 771              		.loc 1 441 0
 772 037a FB68     		ldr	r3, [r7, #12]
 773 037c 1B68     		ldr	r3, [r3, #0]
 774 037e 9BB2     		uxth	r3, r3
 442:../SPL/src/stm32f10x_dac.c **** }
 775              		.loc 1 442 0
 776 0380 1846     		mov	r0, r3
 777 0382 07F11407 		add	r7, r7, #20
 778 0386 BD46     		mov	sp, r7
 779 0388 80BC     		pop	{r7}
 780 038a 7047     		bx	lr
 781              	.L50:
 782              		.align	2
 783              	.L49:
 784 038c 00740040 		.word	1073771520
 785              		.cfi_endproc
 786              	.LFE41:
 788              		.align	2
 789              		.global	DAC_GetFlagStatus
 790              		.thumb
 791              		.thumb_func
 793              	DAC_GetFlagStatus:
 794              	.LFB42:
 443:../SPL/src/stm32f10x_dac.c **** 
 444:../SPL/src/stm32f10x_dac.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 445:../SPL/src/stm32f10x_dac.c **** /**
 446:../SPL/src/stm32f10x_dac.c ****   * @brief  Checks whether the specified DAC flag is set or not.
 447:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: thee selected DAC channel. 
 448:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 449:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 450:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 451:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_FLAG: specifies the flag to check. 
 452:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be only of the following value:
 453:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_FLAG_DMAUDR: DMA underrun flag                                                 
 454:../SPL/src/stm32f10x_dac.c ****   * @retval The new state of DAC_FLAG (SET or RESET).
 455:../SPL/src/stm32f10x_dac.c ****   */
 456:../SPL/src/stm32f10x_dac.c **** FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
 457:../SPL/src/stm32f10x_dac.c **** {
 795              		.loc 1 457 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 16
 798              		@ frame_needed = 1, uses_anonymous_args = 0
 799              		@ link register save eliminated.
 800 0390 80B4     		push	{r7}
 801              	.LCFI38:
 802              		.cfi_def_cfa_offset 4
 803              		.cfi_offset 7, -4
 804 0392 85B0     		sub	sp, sp, #20
 805              	.LCFI39:
 806              		.cfi_def_cfa_offset 24
 807 0394 00AF     		add	r7, sp, #0
 808              	.LCFI40:
 809              		.cfi_def_cfa_register 7
 810 0396 7860     		str	r0, [r7, #4]
 811 0398 3960     		str	r1, [r7, #0]
 458:../SPL/src/stm32f10x_dac.c ****   FlagStatus bitstatus = RESET;
 812              		.loc 1 458 0
 813 039a 4FF00003 		mov	r3, #0
 814 039e FB73     		strb	r3, [r7, #15]
 459:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 460:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 461:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_FLAG(DAC_FLAG));
 462:../SPL/src/stm32f10x_dac.c **** 
 463:../SPL/src/stm32f10x_dac.c ****   /* Check the status of the specified DAC flag */
 464:../SPL/src/stm32f10x_dac.c ****   if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 815              		.loc 1 464 0
 816 03a0 0B4B     		ldr	r3, .L55
 817 03a2 5A6B     		ldr	r2, [r3, #52]
 818 03a4 7B68     		ldr	r3, [r7, #4]
 819 03a6 3968     		ldr	r1, [r7, #0]
 820 03a8 01FA03F3 		lsl	r3, r1, r3
 821 03ac 1340     		ands	r3, r3, r2
 822 03ae 002B     		cmp	r3, #0
 823 03b0 03D0     		beq	.L52
 465:../SPL/src/stm32f10x_dac.c ****   {
 466:../SPL/src/stm32f10x_dac.c ****     /* DAC_FLAG is set */
 467:../SPL/src/stm32f10x_dac.c ****     bitstatus = SET;
 824              		.loc 1 467 0
 825 03b2 4FF00103 		mov	r3, #1
 826 03b6 FB73     		strb	r3, [r7, #15]
 827 03b8 02E0     		b	.L53
 828              	.L52:
 468:../SPL/src/stm32f10x_dac.c ****   }
 469:../SPL/src/stm32f10x_dac.c ****   else
 470:../SPL/src/stm32f10x_dac.c ****   {
 471:../SPL/src/stm32f10x_dac.c ****     /* DAC_FLAG is reset */
 472:../SPL/src/stm32f10x_dac.c ****     bitstatus = RESET;
 829              		.loc 1 472 0
 830 03ba 4FF00003 		mov	r3, #0
 831 03be FB73     		strb	r3, [r7, #15]
 832              	.L53:
 473:../SPL/src/stm32f10x_dac.c ****   }
 474:../SPL/src/stm32f10x_dac.c ****   /* Return the DAC_FLAG status */
 475:../SPL/src/stm32f10x_dac.c ****   return  bitstatus;
 833              		.loc 1 475 0
 834 03c0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 476:../SPL/src/stm32f10x_dac.c **** }
 835              		.loc 1 476 0
 836 03c2 1846     		mov	r0, r3
 837 03c4 07F11407 		add	r7, r7, #20
 838 03c8 BD46     		mov	sp, r7
 839 03ca 80BC     		pop	{r7}
 840 03cc 7047     		bx	lr
 841              	.L56:
 842 03ce 00BF     		.align	2
 843              	.L55:
 844 03d0 00740040 		.word	1073771520
 845              		.cfi_endproc
 846              	.LFE42:
 848              		.align	2
 849              		.global	DAC_ClearFlag
 850              		.thumb
 851              		.thumb_func
 853              	DAC_ClearFlag:
 854              	.LFB43:
 477:../SPL/src/stm32f10x_dac.c **** 
 478:../SPL/src/stm32f10x_dac.c **** /**
 479:../SPL/src/stm32f10x_dac.c ****   * @brief  Clears the DAC channelx's pending flags.
 480:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 481:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 482:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 483:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 484:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_FLAG: specifies the flag to clear. 
 485:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be of the following value:
 486:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_FLAG_DMAUDR: DMA underrun flag                           
 487:../SPL/src/stm32f10x_dac.c ****   * @retval None
 488:../SPL/src/stm32f10x_dac.c ****   */
 489:../SPL/src/stm32f10x_dac.c **** void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
 490:../SPL/src/stm32f10x_dac.c **** {
 855              		.loc 1 490 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 8
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860 03d4 80B4     		push	{r7}
 861              	.LCFI41:
 862              		.cfi_def_cfa_offset 4
 863              		.cfi_offset 7, -4
 864 03d6 83B0     		sub	sp, sp, #12
 865              	.LCFI42:
 866              		.cfi_def_cfa_offset 16
 867 03d8 00AF     		add	r7, sp, #0
 868              	.LCFI43:
 869              		.cfi_def_cfa_register 7
 870 03da 7860     		str	r0, [r7, #4]
 871 03dc 3960     		str	r1, [r7, #0]
 491:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 492:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 493:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_FLAG(DAC_FLAG));
 494:../SPL/src/stm32f10x_dac.c **** 
 495:../SPL/src/stm32f10x_dac.c ****   /* Clear the selected DAC flags */
 496:../SPL/src/stm32f10x_dac.c ****   DAC->SR = (DAC_FLAG << DAC_Channel);
 872              		.loc 1 496 0
 873 03de 054B     		ldr	r3, .L58
 874 03e0 7A68     		ldr	r2, [r7, #4]
 875 03e2 3968     		ldr	r1, [r7, #0]
 876 03e4 01FA02F2 		lsl	r2, r1, r2
 877 03e8 5A63     		str	r2, [r3, #52]
 497:../SPL/src/stm32f10x_dac.c **** }
 878              		.loc 1 497 0
 879 03ea 07F10C07 		add	r7, r7, #12
 880 03ee BD46     		mov	sp, r7
 881 03f0 80BC     		pop	{r7}
 882 03f2 7047     		bx	lr
 883              	.L59:
 884              		.align	2
 885              	.L58:
 886 03f4 00740040 		.word	1073771520
 887              		.cfi_endproc
 888              	.LFE43:
 890              		.align	2
 891              		.global	DAC_GetITStatus
 892              		.thumb
 893              		.thumb_func
 895              	DAC_GetITStatus:
 896              	.LFB44:
 498:../SPL/src/stm32f10x_dac.c **** 
 499:../SPL/src/stm32f10x_dac.c **** /**
 500:../SPL/src/stm32f10x_dac.c ****   * @brief  Checks whether the specified DAC interrupt has occurred or not.
 501:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 502:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 503:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 504:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 505:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt source to check. 
 506:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be the following values:
 507:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                       
 508:../SPL/src/stm32f10x_dac.c ****   * @retval The new state of DAC_IT (SET or RESET).
 509:../SPL/src/stm32f10x_dac.c ****   */
 510:../SPL/src/stm32f10x_dac.c **** ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
 511:../SPL/src/stm32f10x_dac.c **** {
 897              		.loc 1 511 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 16
 900              		@ frame_needed = 1, uses_anonymous_args = 0
 901              		@ link register save eliminated.
 902 03f8 80B4     		push	{r7}
 903              	.LCFI44:
 904              		.cfi_def_cfa_offset 4
 905              		.cfi_offset 7, -4
 906 03fa 85B0     		sub	sp, sp, #20
 907              	.LCFI45:
 908              		.cfi_def_cfa_offset 24
 909 03fc 00AF     		add	r7, sp, #0
 910              	.LCFI46:
 911              		.cfi_def_cfa_register 7
 912 03fe 7860     		str	r0, [r7, #4]
 913 0400 3960     		str	r1, [r7, #0]
 512:../SPL/src/stm32f10x_dac.c ****   ITStatus bitstatus = RESET;
 914              		.loc 1 512 0
 915 0402 4FF00003 		mov	r3, #0
 916 0406 FB73     		strb	r3, [r7, #15]
 513:../SPL/src/stm32f10x_dac.c ****   uint32_t enablestatus = 0;
 917              		.loc 1 513 0
 918 0408 4FF00003 		mov	r3, #0
 919 040c BB60     		str	r3, [r7, #8]
 514:../SPL/src/stm32f10x_dac.c ****   
 515:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 516:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 517:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_IT(DAC_IT));
 518:../SPL/src/stm32f10x_dac.c **** 
 519:../SPL/src/stm32f10x_dac.c ****   /* Get the DAC_IT enable bit status */
 520:../SPL/src/stm32f10x_dac.c ****   enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 920              		.loc 1 520 0
 921 040e 114B     		ldr	r3, .L64
 922 0410 1A68     		ldr	r2, [r3, #0]
 923 0412 7B68     		ldr	r3, [r7, #4]
 924 0414 3968     		ldr	r1, [r7, #0]
 925 0416 01FA03F3 		lsl	r3, r1, r3
 926 041a 1340     		ands	r3, r3, r2
 927 041c BB60     		str	r3, [r7, #8]
 521:../SPL/src/stm32f10x_dac.c ****   
 522:../SPL/src/stm32f10x_dac.c ****   /* Check the status of the specified DAC interrupt */
 523:../SPL/src/stm32f10x_dac.c ****   if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 928              		.loc 1 523 0
 929 041e 0D4B     		ldr	r3, .L64
 930 0420 5A6B     		ldr	r2, [r3, #52]
 931 0422 7B68     		ldr	r3, [r7, #4]
 932 0424 3968     		ldr	r1, [r7, #0]
 933 0426 01FA03F3 		lsl	r3, r1, r3
 934 042a 1340     		ands	r3, r3, r2
 935 042c 002B     		cmp	r3, #0
 936 042e 06D0     		beq	.L61
 937              		.loc 1 523 0 is_stmt 0 discriminator 1
 938 0430 BB68     		ldr	r3, [r7, #8]
 939 0432 002B     		cmp	r3, #0
 940 0434 03D0     		beq	.L61
 524:../SPL/src/stm32f10x_dac.c ****   {
 525:../SPL/src/stm32f10x_dac.c ****     /* DAC_IT is set */
 526:../SPL/src/stm32f10x_dac.c ****     bitstatus = SET;
 941              		.loc 1 526 0 is_stmt 1
 942 0436 4FF00103 		mov	r3, #1
 943 043a FB73     		strb	r3, [r7, #15]
 944 043c 02E0     		b	.L62
 945              	.L61:
 527:../SPL/src/stm32f10x_dac.c ****   }
 528:../SPL/src/stm32f10x_dac.c ****   else
 529:../SPL/src/stm32f10x_dac.c ****   {
 530:../SPL/src/stm32f10x_dac.c ****     /* DAC_IT is reset */
 531:../SPL/src/stm32f10x_dac.c ****     bitstatus = RESET;
 946              		.loc 1 531 0
 947 043e 4FF00003 		mov	r3, #0
 948 0442 FB73     		strb	r3, [r7, #15]
 949              	.L62:
 532:../SPL/src/stm32f10x_dac.c ****   }
 533:../SPL/src/stm32f10x_dac.c ****   /* Return the DAC_IT status */
 534:../SPL/src/stm32f10x_dac.c ****   return  bitstatus;
 950              		.loc 1 534 0
 951 0444 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 535:../SPL/src/stm32f10x_dac.c **** }
 952              		.loc 1 535 0
 953 0446 1846     		mov	r0, r3
 954 0448 07F11407 		add	r7, r7, #20
 955 044c BD46     		mov	sp, r7
 956 044e 80BC     		pop	{r7}
 957 0450 7047     		bx	lr
 958              	.L65:
 959 0452 00BF     		.align	2
 960              	.L64:
 961 0454 00740040 		.word	1073771520
 962              		.cfi_endproc
 963              	.LFE44:
 965              		.align	2
 966              		.global	DAC_ClearITPendingBit
 967              		.thumb
 968              		.thumb_func
 970              	DAC_ClearITPendingBit:
 971              	.LFB45:
 536:../SPL/src/stm32f10x_dac.c **** 
 537:../SPL/src/stm32f10x_dac.c **** /**
 538:../SPL/src/stm32f10x_dac.c ****   * @brief  Clears the DAC channelx's interrupt pending bits.
 539:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 540:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be one of the following values:
 541:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_1: DAC Channel1 selected
 542:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_Channel_2: DAC Channel2 selected
 543:../SPL/src/stm32f10x_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt pending bit to clear.
 544:../SPL/src/stm32f10x_dac.c ****   *   This parameter can be the following values:
 545:../SPL/src/stm32f10x_dac.c ****   *     @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                         
 546:../SPL/src/stm32f10x_dac.c ****   * @retval None
 547:../SPL/src/stm32f10x_dac.c ****   */
 548:../SPL/src/stm32f10x_dac.c **** void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
 549:../SPL/src/stm32f10x_dac.c **** {
 972              		.loc 1 549 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 8
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976              		@ link register save eliminated.
 977 0458 80B4     		push	{r7}
 978              	.LCFI47:
 979              		.cfi_def_cfa_offset 4
 980              		.cfi_offset 7, -4
 981 045a 83B0     		sub	sp, sp, #12
 982              	.LCFI48:
 983              		.cfi_def_cfa_offset 16
 984 045c 00AF     		add	r7, sp, #0
 985              	.LCFI49:
 986              		.cfi_def_cfa_register 7
 987 045e 7860     		str	r0, [r7, #4]
 988 0460 3960     		str	r1, [r7, #0]
 550:../SPL/src/stm32f10x_dac.c ****   /* Check the parameters */
 551:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 552:../SPL/src/stm32f10x_dac.c ****   assert_param(IS_DAC_IT(DAC_IT)); 
 553:../SPL/src/stm32f10x_dac.c **** 
 554:../SPL/src/stm32f10x_dac.c ****   /* Clear the selected DAC interrupt pending bits */
 555:../SPL/src/stm32f10x_dac.c ****   DAC->SR = (DAC_IT << DAC_Channel);
 989              		.loc 1 555 0
 990 0462 054B     		ldr	r3, .L67
 991 0464 7A68     		ldr	r2, [r7, #4]
 992 0466 3968     		ldr	r1, [r7, #0]
 993 0468 01FA02F2 		lsl	r2, r1, r2
 994 046c 5A63     		str	r2, [r3, #52]
 556:../SPL/src/stm32f10x_dac.c **** }
 995              		.loc 1 556 0
 996 046e 07F10C07 		add	r7, r7, #12
 997 0472 BD46     		mov	sp, r7
 998 0474 80BC     		pop	{r7}
 999 0476 7047     		bx	lr
 1000              	.L68:
 1001              		.align	2
 1002              	.L67:
 1003 0478 00740040 		.word	1073771520
 1004              		.cfi_endproc
 1005              	.LFE45:
 1007              	.Letext0:
 1008              		.file 2 "/home/knik/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-eabi
 1009              		.file 3 "/home/knik/temp/workspace/stm32_ld_vl/CMSIS/stm32f10x.h"
 1010              		.file 4 "/home/knik/temp/workspace/stm32_ld_vl/SPL/inc/stm32f10x_dac.h"
 1011              		.file 5 "/home/knik/temp/workspace/stm32_ld_vl/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_dac.c
     /tmp/ccVOsjO4.s:18     .text:00000000 $t
     /tmp/ccVOsjO4.s:23     .text:00000000 DAC_DeInit
     /tmp/ccVOsjO4.s:56     .text:00000020 DAC_Init
     /tmp/ccVOsjO4.s:128    .text:00000088 $d
     /tmp/ccVOsjO4.s:132    .text:0000008c $t
     /tmp/ccVOsjO4.s:137    .text:0000008c DAC_StructInit
     /tmp/ccVOsjO4.s:184    .text:000000c0 DAC_Cmd
     /tmp/ccVOsjO4.s:238    .text:0000010c $d
     /tmp/ccVOsjO4.s:242    .text:00000110 $t
     /tmp/ccVOsjO4.s:247    .text:00000110 DAC_ITConfig
     /tmp/ccVOsjO4.s:302    .text:00000158 $d
     /tmp/ccVOsjO4.s:306    .text:0000015c $t
     /tmp/ccVOsjO4.s:311    .text:0000015c DAC_DMACmd
     /tmp/ccVOsjO4.s:365    .text:000001a8 $d
     /tmp/ccVOsjO4.s:369    .text:000001ac $t
     /tmp/ccVOsjO4.s:374    .text:000001ac DAC_SoftwareTriggerCmd
     /tmp/ccVOsjO4.s:430    .text:00000200 $d
     /tmp/ccVOsjO4.s:434    .text:00000204 $t
     /tmp/ccVOsjO4.s:439    .text:00000204 DAC_DualSoftwareTriggerCmd
     /tmp/ccVOsjO4.s:485    .text:00000238 $d
     /tmp/ccVOsjO4.s:489    .text:0000023c $t
     /tmp/ccVOsjO4.s:494    .text:0000023c DAC_WaveGenerationCmd
     /tmp/ccVOsjO4.s:549    .text:00000284 $d
     /tmp/ccVOsjO4.s:553    .text:00000288 $t
     /tmp/ccVOsjO4.s:558    .text:00000288 DAC_SetChannel1Data
     /tmp/ccVOsjO4.s:602    .text:000002bc $d
     /tmp/ccVOsjO4.s:606    .text:000002c0 $t
     /tmp/ccVOsjO4.s:611    .text:000002c0 DAC_SetChannel2Data
     /tmp/ccVOsjO4.s:655    .text:000002f4 $d
     /tmp/ccVOsjO4.s:659    .text:000002f8 $t
     /tmp/ccVOsjO4.s:664    .text:000002f8 DAC_SetDualChannelData
     /tmp/ccVOsjO4.s:731    .text:00000354 $d
     /tmp/ccVOsjO4.s:735    .text:00000358 $t
     /tmp/ccVOsjO4.s:740    .text:00000358 DAC_GetDataOutputValue
     /tmp/ccVOsjO4.s:784    .text:0000038c $d
     /tmp/ccVOsjO4.s:788    .text:00000390 $t
     /tmp/ccVOsjO4.s:793    .text:00000390 DAC_GetFlagStatus
     /tmp/ccVOsjO4.s:844    .text:000003d0 $d
     /tmp/ccVOsjO4.s:848    .text:000003d4 $t
     /tmp/ccVOsjO4.s:853    .text:000003d4 DAC_ClearFlag
     /tmp/ccVOsjO4.s:886    .text:000003f4 $d
     /tmp/ccVOsjO4.s:890    .text:000003f8 $t
     /tmp/ccVOsjO4.s:895    .text:000003f8 DAC_GetITStatus
     /tmp/ccVOsjO4.s:961    .text:00000454 $d
     /tmp/ccVOsjO4.s:965    .text:00000458 $t
     /tmp/ccVOsjO4.s:970    .text:00000458 DAC_ClearITPendingBit
     /tmp/ccVOsjO4.s:1003   .text:00000478 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.15d5e41296b380d25e233262bbc38056
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_dac.h.79.ca40b40bb9e330152233f0089586c358

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
