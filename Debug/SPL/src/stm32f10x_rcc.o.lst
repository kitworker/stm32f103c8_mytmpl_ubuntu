   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.align	2
  42              	ADCPrescTable:
  43 0010 02       		.byte	2
  44 0011 04       		.byte	4
  45 0012 06       		.byte	6
  46 0013 08       		.byte	8
  47              		.text
  48              		.align	2
  49              		.global	RCC_DeInit
  50              		.thumb
  51              		.thumb_func
  53              	RCC_DeInit:
  54              	.LFB29:
  55              		.file 1 "../SPL/src/stm32f10x_rcc.c"
   1:../SPL/src/stm32f10x_rcc.c **** /**
   2:../SPL/src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../SPL/src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../SPL/src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_rcc.c ****   * @attention
  10:../SPL/src/stm32f10x_rcc.c ****   *
  11:../SPL/src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_rcc.c ****   *
  18:../SPL/src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_rcc.c ****   */
  21:../SPL/src/stm32f10x_rcc.c **** 
  22:../SPL/src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../SPL/src/stm32f10x_rcc.c **** 
  25:../SPL/src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../SPL/src/stm32f10x_rcc.c ****   * @{
  27:../SPL/src/stm32f10x_rcc.c ****   */
  28:../SPL/src/stm32f10x_rcc.c **** 
  29:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../SPL/src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../SPL/src/stm32f10x_rcc.c ****   * @{
  32:../SPL/src/stm32f10x_rcc.c ****   */ 
  33:../SPL/src/stm32f10x_rcc.c **** 
  34:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../SPL/src/stm32f10x_rcc.c ****   * @{
  36:../SPL/src/stm32f10x_rcc.c ****   */
  37:../SPL/src/stm32f10x_rcc.c **** 
  38:../SPL/src/stm32f10x_rcc.c **** /**
  39:../SPL/src/stm32f10x_rcc.c ****   * @}
  40:../SPL/src/stm32f10x_rcc.c ****   */
  41:../SPL/src/stm32f10x_rcc.c **** 
  42:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../SPL/src/stm32f10x_rcc.c ****   * @{
  44:../SPL/src/stm32f10x_rcc.c ****   */
  45:../SPL/src/stm32f10x_rcc.c **** 
  46:../SPL/src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../SPL/src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../SPL/src/stm32f10x_rcc.c **** 
  49:../SPL/src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../SPL/src/stm32f10x_rcc.c **** 
  51:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../SPL/src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../SPL/src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../SPL/src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../SPL/src/stm32f10x_rcc.c **** 
  56:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../SPL/src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../SPL/src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../SPL/src/stm32f10x_rcc.c **** 
  60:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../SPL/src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../SPL/src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../SPL/src/stm32f10x_rcc.c **** 
  65:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../SPL/src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../SPL/src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../SPL/src/stm32f10x_rcc.c **** 
  70:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../SPL/src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../SPL/src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../SPL/src/stm32f10x_rcc.c **** 
  74:../SPL/src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../SPL/src/stm32f10x_rcc.c **** 
  76:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../SPL/src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../SPL/src/stm32f10x_rcc.c **** 
  79:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../SPL/src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../SPL/src/stm32f10x_rcc.c **** #else
  83:../SPL/src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../SPL/src/stm32f10x_rcc.c **** 
  87:../SPL/src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../SPL/src/stm32f10x_rcc.c **** 
  89:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../SPL/src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../SPL/src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../SPL/src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../SPL/src/stm32f10x_rcc.c **** 
  94:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../SPL/src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../SPL/src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../SPL/src/stm32f10x_rcc.c **** 
  98:../SPL/src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../SPL/src/stm32f10x_rcc.c **** 
 100:../SPL/src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../SPL/src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../SPL/src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../SPL/src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../SPL/src/stm32f10x_rcc.c **** 
 105:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../SPL/src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../SPL/src/stm32f10x_rcc.c **** 
 108:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../SPL/src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../SPL/src/stm32f10x_rcc.c **** 
 113:../SPL/src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../SPL/src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../SPL/src/stm32f10x_rcc.c **** 
 118:../SPL/src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../SPL/src/stm32f10x_rcc.c **** 
 120:../SPL/src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../SPL/src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../SPL/src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../SPL/src/stm32f10x_rcc.c **** 
 127:../SPL/src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../SPL/src/stm32f10x_rcc.c **** #else
 131:../SPL/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../SPL/src/stm32f10x_rcc.c **** 
 134:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../SPL/src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../SPL/src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../SPL/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../SPL/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../SPL/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../SPL/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../SPL/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../SPL/src/stm32f10x_rcc.c **** 
 148:../SPL/src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../SPL/src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../SPL/src/stm32f10x_rcc.c **** 
 151:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../SPL/src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../SPL/src/stm32f10x_rcc.c **** #endif
 156:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../SPL/src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../SPL/src/stm32f10x_rcc.c **** 
 162:../SPL/src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../SPL/src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../SPL/src/stm32f10x_rcc.c **** 
 165:../SPL/src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../SPL/src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../SPL/src/stm32f10x_rcc.c **** 
 168:../SPL/src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../SPL/src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../SPL/src/stm32f10x_rcc.c **** 
 171:../SPL/src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../SPL/src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../SPL/src/stm32f10x_rcc.c **** 
 174:../SPL/src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../SPL/src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../SPL/src/stm32f10x_rcc.c **** 
 177:../SPL/src/stm32f10x_rcc.c **** /**
 178:../SPL/src/stm32f10x_rcc.c ****   * @}
 179:../SPL/src/stm32f10x_rcc.c ****   */ 
 180:../SPL/src/stm32f10x_rcc.c **** 
 181:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../SPL/src/stm32f10x_rcc.c ****   * @{
 183:../SPL/src/stm32f10x_rcc.c ****   */ 
 184:../SPL/src/stm32f10x_rcc.c **** 
 185:../SPL/src/stm32f10x_rcc.c **** /**
 186:../SPL/src/stm32f10x_rcc.c ****   * @}
 187:../SPL/src/stm32f10x_rcc.c ****   */ 
 188:../SPL/src/stm32f10x_rcc.c **** 
 189:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../SPL/src/stm32f10x_rcc.c ****   * @{
 191:../SPL/src/stm32f10x_rcc.c ****   */ 
 192:../SPL/src/stm32f10x_rcc.c **** 
 193:../SPL/src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../SPL/src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../SPL/src/stm32f10x_rcc.c **** 
 196:../SPL/src/stm32f10x_rcc.c **** /**
 197:../SPL/src/stm32f10x_rcc.c ****   * @}
 198:../SPL/src/stm32f10x_rcc.c ****   */
 199:../SPL/src/stm32f10x_rcc.c **** 
 200:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../SPL/src/stm32f10x_rcc.c ****   * @{
 202:../SPL/src/stm32f10x_rcc.c ****   */
 203:../SPL/src/stm32f10x_rcc.c **** 
 204:../SPL/src/stm32f10x_rcc.c **** /**
 205:../SPL/src/stm32f10x_rcc.c ****   * @}
 206:../SPL/src/stm32f10x_rcc.c ****   */
 207:../SPL/src/stm32f10x_rcc.c **** 
 208:../SPL/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../SPL/src/stm32f10x_rcc.c ****   * @{
 210:../SPL/src/stm32f10x_rcc.c ****   */
 211:../SPL/src/stm32f10x_rcc.c **** 
 212:../SPL/src/stm32f10x_rcc.c **** /**
 213:../SPL/src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../SPL/src/stm32f10x_rcc.c ****   * @param  None
 215:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 216:../SPL/src/stm32f10x_rcc.c ****   */
 217:../SPL/src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../SPL/src/stm32f10x_rcc.c **** {
  56              		.loc 1 218 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 4
  64              		.cfi_offset 7, -4
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI1:
  67              		.cfi_def_cfa_register 7
 219:../SPL/src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../SPL/src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  68              		.loc 1 220 0
  69 0004 154B     		ldr	r3, .L2
  70 0006 154A     		ldr	r2, .L2
  71 0008 1268     		ldr	r2, [r2, #0]
  72 000a 42F00102 		orr	r2, r2, #1
  73 000e 1A60     		str	r2, [r3, #0]
 221:../SPL/src/stm32f10x_rcc.c **** 
 222:../SPL/src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  74              		.loc 1 224 0
  75 0010 124A     		ldr	r2, .L2
  76 0012 124B     		ldr	r3, .L2
  77 0014 5968     		ldr	r1, [r3, #4]
  78 0016 124B     		ldr	r3, .L2+4
  79 0018 0B40     		ands	r3, r3, r1
  80 001a 5360     		str	r3, [r2, #4]
 225:../SPL/src/stm32f10x_rcc.c **** #else
 226:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../SPL/src/stm32f10x_rcc.c ****   
 229:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  81              		.loc 1 230 0
  82 001c 0F4A     		ldr	r2, .L2
  83 001e 0F4B     		ldr	r3, .L2
  84 0020 1B68     		ldr	r3, [r3, #0]
  85 0022 23F08473 		bic	r3, r3, #17301504
  86 0026 23F48033 		bic	r3, r3, #65536
  87 002a 1360     		str	r3, [r2, #0]
 231:../SPL/src/stm32f10x_rcc.c **** 
 232:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  88              		.loc 1 233 0
  89 002c 0B4B     		ldr	r3, .L2
  90 002e 0B4A     		ldr	r2, .L2
  91 0030 1268     		ldr	r2, [r2, #0]
  92 0032 22F48022 		bic	r2, r2, #262144
  93 0036 1A60     		str	r2, [r3, #0]
 234:../SPL/src/stm32f10x_rcc.c **** 
 235:../SPL/src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  94              		.loc 1 236 0
  95 0038 084B     		ldr	r3, .L2
  96 003a 084A     		ldr	r2, .L2
  97 003c 5268     		ldr	r2, [r2, #4]
  98 003e 22F4FE02 		bic	r2, r2, #8323072
  99 0042 5A60     		str	r2, [r3, #4]
 237:../SPL/src/stm32f10x_rcc.c **** 
 238:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../SPL/src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../SPL/src/stm32f10x_rcc.c **** 
 242:../SPL/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../SPL/src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../SPL/src/stm32f10x_rcc.c **** 
 245:../SPL/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../SPL/src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../SPL/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../SPL/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 100              		.loc 1 249 0
 101 0044 054B     		ldr	r3, .L2
 102 0046 4FF41F02 		mov	r2, #10420224
 103 004a 9A60     		str	r2, [r3, #8]
 250:../SPL/src/stm32f10x_rcc.c **** 
 251:../SPL/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 104              		.loc 1 252 0
 105 004c 034B     		ldr	r3, .L2
 106 004e 4FF00002 		mov	r2, #0
 107 0052 DA62     		str	r2, [r3, #44]
 253:../SPL/src/stm32f10x_rcc.c **** #else
 254:../SPL/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../SPL/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../SPL/src/stm32f10x_rcc.c **** 
 258:../SPL/src/stm32f10x_rcc.c **** }
 108              		.loc 1 258 0
 109 0054 BD46     		mov	sp, r7
 110 0056 80BC     		pop	{r7}
 111 0058 7047     		bx	lr
 112              	.L3:
 113 005a 00BF     		.align	2
 114              	.L2:
 115 005c 00100240 		.word	1073876992
 116 0060 0000FFF8 		.word	-117506048
 117              		.cfi_endproc
 118              	.LFE29:
 120              		.align	2
 121              		.global	RCC_HSEConfig
 122              		.thumb
 123              		.thumb_func
 125              	RCC_HSEConfig:
 126              	.LFB30:
 259:../SPL/src/stm32f10x_rcc.c **** 
 260:../SPL/src/stm32f10x_rcc.c **** /**
 261:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../SPL/src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 269:../SPL/src/stm32f10x_rcc.c ****   */
 270:../SPL/src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../SPL/src/stm32f10x_rcc.c **** {
 127              		.loc 1 271 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0064 80B4     		push	{r7}
 133              	.LCFI2:
 134              		.cfi_def_cfa_offset 4
 135              		.cfi_offset 7, -4
 136 0066 83B0     		sub	sp, sp, #12
 137              	.LCFI3:
 138              		.cfi_def_cfa_offset 16
 139 0068 00AF     		add	r7, sp, #0
 140              	.LCFI4:
 141              		.cfi_def_cfa_register 7
 142 006a 7860     		str	r0, [r7, #4]
 272:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 274:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 143              		.loc 1 276 0
 144 006c 134B     		ldr	r3, .L10
 145 006e 134A     		ldr	r2, .L10
 146 0070 1268     		ldr	r2, [r2, #0]
 147 0072 22F48032 		bic	r2, r2, #65536
 148 0076 1A60     		str	r2, [r3, #0]
 277:../SPL/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../SPL/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 149              		.loc 1 278 0
 150 0078 104B     		ldr	r3, .L10
 151 007a 104A     		ldr	r2, .L10
 152 007c 1268     		ldr	r2, [r2, #0]
 153 007e 22F48022 		bic	r2, r2, #262144
 154 0082 1A60     		str	r2, [r3, #0]
 279:../SPL/src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../SPL/src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 155              		.loc 1 280 0
 156 0084 7B68     		ldr	r3, [r7, #4]
 157 0086 B3F5803F 		cmp	r3, #65536
 158 008a 03D0     		beq	.L6
 159 008c B3F5802F 		cmp	r3, #262144
 160 0090 07D0     		beq	.L7
 161 0092 0DE0     		b	.L9
 162              	.L6:
 281:../SPL/src/stm32f10x_rcc.c ****   {
 282:../SPL/src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../SPL/src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../SPL/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 163              		.loc 1 284 0
 164 0094 094B     		ldr	r3, .L10
 165 0096 094A     		ldr	r2, .L10
 166 0098 1268     		ldr	r2, [r2, #0]
 167 009a 42F48032 		orr	r2, r2, #65536
 168 009e 1A60     		str	r2, [r3, #0]
 285:../SPL/src/stm32f10x_rcc.c ****       break;
 169              		.loc 1 285 0
 170 00a0 07E0     		b	.L4
 171              	.L7:
 286:../SPL/src/stm32f10x_rcc.c ****       
 287:../SPL/src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../SPL/src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../SPL/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 172              		.loc 1 289 0
 173 00a2 064B     		ldr	r3, .L10
 174 00a4 054A     		ldr	r2, .L10
 175 00a6 1268     		ldr	r2, [r2, #0]
 176 00a8 42F4A022 		orr	r2, r2, #327680
 177 00ac 1A60     		str	r2, [r3, #0]
 290:../SPL/src/stm32f10x_rcc.c ****       break;
 178              		.loc 1 290 0
 179 00ae 00E0     		b	.L4
 180              	.L9:
 291:../SPL/src/stm32f10x_rcc.c ****       
 292:../SPL/src/stm32f10x_rcc.c ****     default:
 293:../SPL/src/stm32f10x_rcc.c ****       break;
 181              		.loc 1 293 0
 182 00b0 00BF     		nop
 183              	.L4:
 294:../SPL/src/stm32f10x_rcc.c ****   }
 295:../SPL/src/stm32f10x_rcc.c **** }
 184              		.loc 1 295 0
 185 00b2 07F10C07 		add	r7, r7, #12
 186 00b6 BD46     		mov	sp, r7
 187 00b8 80BC     		pop	{r7}
 188 00ba 7047     		bx	lr
 189              	.L11:
 190              		.align	2
 191              	.L10:
 192 00bc 00100240 		.word	1073876992
 193              		.cfi_endproc
 194              	.LFE30:
 196              		.align	2
 197              		.global	RCC_WaitForHSEStartUp
 198              		.thumb
 199              		.thumb_func
 201              	RCC_WaitForHSEStartUp:
 202              	.LFB31:
 296:../SPL/src/stm32f10x_rcc.c **** 
 297:../SPL/src/stm32f10x_rcc.c **** /**
 298:../SPL/src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../SPL/src/stm32f10x_rcc.c ****   * @param  None
 300:../SPL/src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../SPL/src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../SPL/src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../SPL/src/stm32f10x_rcc.c ****   */
 304:../SPL/src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../SPL/src/stm32f10x_rcc.c **** {
 203              		.loc 1 305 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 8
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207 00c0 80B5     		push	{r7, lr}
 208              	.LCFI5:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 00c2 82B0     		sub	sp, sp, #8
 213              	.LCFI6:
 214              		.cfi_def_cfa_offset 16
 215 00c4 00AF     		add	r7, sp, #0
 216              	.LCFI7:
 217              		.cfi_def_cfa_register 7
 306:../SPL/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 218              		.loc 1 306 0
 219 00c6 4FF00003 		mov	r3, #0
 220 00ca 3B60     		str	r3, [r7, #0]
 307:../SPL/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 221              		.loc 1 307 0
 222 00cc 4FF00003 		mov	r3, #0
 223 00d0 FB71     		strb	r3, [r7, #7]
 308:../SPL/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 224              		.loc 1 308 0
 225 00d2 4FF00003 		mov	r3, #0
 226 00d6 BB71     		strb	r3, [r7, #6]
 227              	.L14:
 309:../SPL/src/stm32f10x_rcc.c ****   
 310:../SPL/src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../SPL/src/stm32f10x_rcc.c ****   do
 312:../SPL/src/stm32f10x_rcc.c ****   {
 313:../SPL/src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 228              		.loc 1 313 0 discriminator 1
 229 00d8 4FF03100 		mov	r0, #49
 230 00dc FFF7FEFF 		bl	RCC_GetFlagStatus
 231 00e0 0346     		mov	r3, r0
 232 00e2 BB71     		strb	r3, [r7, #6]
 314:../SPL/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 233              		.loc 1 314 0 discriminator 1
 234 00e4 3B68     		ldr	r3, [r7, #0]
 235 00e6 03F10103 		add	r3, r3, #1
 236 00ea 3B60     		str	r3, [r7, #0]
 315:../SPL/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 237              		.loc 1 315 0 discriminator 1
 238 00ec 3B68     		ldr	r3, [r7, #0]
 239 00ee B3F5A06F 		cmp	r3, #1280
 240 00f2 02D0     		beq	.L13
 241 00f4 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 242 00f6 002B     		cmp	r3, #0
 243 00f8 EED0     		beq	.L14
 244              	.L13:
 316:../SPL/src/stm32f10x_rcc.c ****   
 317:../SPL/src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 245              		.loc 1 317 0
 246 00fa 4FF03100 		mov	r0, #49
 247 00fe FFF7FEFF 		bl	RCC_GetFlagStatus
 248 0102 0346     		mov	r3, r0
 249 0104 002B     		cmp	r3, #0
 250 0106 03D0     		beq	.L15
 318:../SPL/src/stm32f10x_rcc.c ****   {
 319:../SPL/src/stm32f10x_rcc.c ****     status = SUCCESS;
 251              		.loc 1 319 0
 252 0108 4FF00103 		mov	r3, #1
 253 010c FB71     		strb	r3, [r7, #7]
 254 010e 02E0     		b	.L16
 255              	.L15:
 320:../SPL/src/stm32f10x_rcc.c ****   }
 321:../SPL/src/stm32f10x_rcc.c ****   else
 322:../SPL/src/stm32f10x_rcc.c ****   {
 323:../SPL/src/stm32f10x_rcc.c ****     status = ERROR;
 256              		.loc 1 323 0
 257 0110 4FF00003 		mov	r3, #0
 258 0114 FB71     		strb	r3, [r7, #7]
 259              	.L16:
 324:../SPL/src/stm32f10x_rcc.c ****   }  
 325:../SPL/src/stm32f10x_rcc.c ****   return (status);
 260              		.loc 1 325 0
 261 0116 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326:../SPL/src/stm32f10x_rcc.c **** }
 262              		.loc 1 326 0
 263 0118 1846     		mov	r0, r3
 264 011a 07F10807 		add	r7, r7, #8
 265 011e BD46     		mov	sp, r7
 266 0120 80BD     		pop	{r7, pc}
 267              		.cfi_endproc
 268              	.LFE31:
 270 0122 00BF     		.align	2
 271              		.global	RCC_AdjustHSICalibrationValue
 272              		.thumb
 273              		.thumb_func
 275              	RCC_AdjustHSICalibrationValue:
 276              	.LFB32:
 327:../SPL/src/stm32f10x_rcc.c **** 
 328:../SPL/src/stm32f10x_rcc.c **** /**
 329:../SPL/src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../SPL/src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../SPL/src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 333:../SPL/src/stm32f10x_rcc.c ****   */
 334:../SPL/src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../SPL/src/stm32f10x_rcc.c **** {
 277              		.loc 1 335 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 16
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282 0124 80B4     		push	{r7}
 283              	.LCFI8:
 284              		.cfi_def_cfa_offset 4
 285              		.cfi_offset 7, -4
 286 0126 85B0     		sub	sp, sp, #20
 287              	.LCFI9:
 288              		.cfi_def_cfa_offset 24
 289 0128 00AF     		add	r7, sp, #0
 290              	.LCFI10:
 291              		.cfi_def_cfa_register 7
 292 012a 0346     		mov	r3, r0
 293 012c FB71     		strb	r3, [r7, #7]
 336:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 294              		.loc 1 336 0
 295 012e 4FF00003 		mov	r3, #0
 296 0132 FB60     		str	r3, [r7, #12]
 337:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 339:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 297              		.loc 1 339 0
 298 0134 0A4B     		ldr	r3, .L19
 299 0136 1B68     		ldr	r3, [r3, #0]
 300 0138 FB60     		str	r3, [r7, #12]
 340:../SPL/src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 301              		.loc 1 341 0
 302 013a FB68     		ldr	r3, [r7, #12]
 303 013c 23F0F803 		bic	r3, r3, #248
 304 0140 FB60     		str	r3, [r7, #12]
 342:../SPL/src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 305              		.loc 1 343 0
 306 0142 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 307 0144 4FEAC303 		lsl	r3, r3, #3
 308 0148 FA68     		ldr	r2, [r7, #12]
 309 014a 1343     		orrs	r3, r3, r2
 310 014c FB60     		str	r3, [r7, #12]
 344:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 345:../SPL/src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 311              		.loc 1 345 0
 312 014e 044B     		ldr	r3, .L19
 313 0150 FA68     		ldr	r2, [r7, #12]
 314 0152 1A60     		str	r2, [r3, #0]
 346:../SPL/src/stm32f10x_rcc.c **** }
 315              		.loc 1 346 0
 316 0154 07F11407 		add	r7, r7, #20
 317 0158 BD46     		mov	sp, r7
 318 015a 80BC     		pop	{r7}
 319 015c 7047     		bx	lr
 320              	.L20:
 321 015e 00BF     		.align	2
 322              	.L19:
 323 0160 00100240 		.word	1073876992
 324              		.cfi_endproc
 325              	.LFE32:
 327              		.align	2
 328              		.global	RCC_HSICmd
 329              		.thumb
 330              		.thumb_func
 332              	RCC_HSICmd:
 333              	.LFB33:
 347:../SPL/src/stm32f10x_rcc.c **** 
 348:../SPL/src/stm32f10x_rcc.c **** /**
 349:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../SPL/src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 353:../SPL/src/stm32f10x_rcc.c ****   */
 354:../SPL/src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../SPL/src/stm32f10x_rcc.c **** {
 334              		.loc 1 355 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0164 80B4     		push	{r7}
 340              	.LCFI11:
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0166 83B0     		sub	sp, sp, #12
 344              	.LCFI12:
 345              		.cfi_def_cfa_offset 16
 346 0168 00AF     		add	r7, sp, #0
 347              	.LCFI13:
 348              		.cfi_def_cfa_register 7
 349 016a 0346     		mov	r3, r0
 350 016c FB71     		strb	r3, [r7, #7]
 356:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 351              		.loc 1 358 0
 352 016e 044B     		ldr	r3, .L22
 353 0170 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 354 0172 1A60     		str	r2, [r3, #0]
 359:../SPL/src/stm32f10x_rcc.c **** }
 355              		.loc 1 359 0
 356 0174 07F10C07 		add	r7, r7, #12
 357 0178 BD46     		mov	sp, r7
 358 017a 80BC     		pop	{r7}
 359 017c 7047     		bx	lr
 360              	.L23:
 361 017e 00BF     		.align	2
 362              	.L22:
 363 0180 00004242 		.word	1111621632
 364              		.cfi_endproc
 365              	.LFE33:
 367              		.align	2
 368              		.global	RCC_PLLConfig
 369              		.thumb
 370              		.thumb_func
 372              	RCC_PLLConfig:
 373              	.LFB34:
 360:../SPL/src/stm32f10x_rcc.c **** 
 361:../SPL/src/stm32f10x_rcc.c **** /**
 362:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../SPL/src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../SPL/src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 377:../SPL/src/stm32f10x_rcc.c ****   */
 378:../SPL/src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../SPL/src/stm32f10x_rcc.c **** {
 374              		.loc 1 379 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 16
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379 0184 80B4     		push	{r7}
 380              	.LCFI14:
 381              		.cfi_def_cfa_offset 4
 382              		.cfi_offset 7, -4
 383 0186 85B0     		sub	sp, sp, #20
 384              	.LCFI15:
 385              		.cfi_def_cfa_offset 24
 386 0188 00AF     		add	r7, sp, #0
 387              	.LCFI16:
 388              		.cfi_def_cfa_register 7
 389 018a 7860     		str	r0, [r7, #4]
 390 018c 3960     		str	r1, [r7, #0]
 380:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 391              		.loc 1 380 0
 392 018e 4FF00003 		mov	r3, #0
 393 0192 FB60     		str	r3, [r7, #12]
 381:../SPL/src/stm32f10x_rcc.c **** 
 382:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 384:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 385:../SPL/src/stm32f10x_rcc.c **** 
 386:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 394              		.loc 1 386 0
 395 0194 0A4B     		ldr	r3, .L25
 396 0196 5B68     		ldr	r3, [r3, #4]
 397 0198 FB60     		str	r3, [r7, #12]
 387:../SPL/src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 398              		.loc 1 388 0
 399 019a FB68     		ldr	r3, [r7, #12]
 400 019c 23F47413 		bic	r3, r3, #3997696
 401 01a0 FB60     		str	r3, [r7, #12]
 389:../SPL/src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 402              		.loc 1 390 0
 403 01a2 7A68     		ldr	r2, [r7, #4]
 404 01a4 3B68     		ldr	r3, [r7, #0]
 405 01a6 1343     		orrs	r3, r3, r2
 406 01a8 FA68     		ldr	r2, [r7, #12]
 407 01aa 1343     		orrs	r3, r3, r2
 408 01ac FB60     		str	r3, [r7, #12]
 391:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 392:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 409              		.loc 1 392 0
 410 01ae 044B     		ldr	r3, .L25
 411 01b0 FA68     		ldr	r2, [r7, #12]
 412 01b2 5A60     		str	r2, [r3, #4]
 393:../SPL/src/stm32f10x_rcc.c **** }
 413              		.loc 1 393 0
 414 01b4 07F11407 		add	r7, r7, #20
 415 01b8 BD46     		mov	sp, r7
 416 01ba 80BC     		pop	{r7}
 417 01bc 7047     		bx	lr
 418              	.L26:
 419 01be 00BF     		.align	2
 420              	.L25:
 421 01c0 00100240 		.word	1073876992
 422              		.cfi_endproc
 423              	.LFE34:
 425              		.align	2
 426              		.global	RCC_PLLCmd
 427              		.thumb
 428              		.thumb_func
 430              	RCC_PLLCmd:
 431              	.LFB35:
 394:../SPL/src/stm32f10x_rcc.c **** 
 395:../SPL/src/stm32f10x_rcc.c **** /**
 396:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../SPL/src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 400:../SPL/src/stm32f10x_rcc.c ****   */
 401:../SPL/src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../SPL/src/stm32f10x_rcc.c **** {
 432              		.loc 1 402 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 8
 435              		@ frame_needed = 1, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 437 01c4 80B4     		push	{r7}
 438              	.LCFI17:
 439              		.cfi_def_cfa_offset 4
 440              		.cfi_offset 7, -4
 441 01c6 83B0     		sub	sp, sp, #12
 442              	.LCFI18:
 443              		.cfi_def_cfa_offset 16
 444 01c8 00AF     		add	r7, sp, #0
 445              	.LCFI19:
 446              		.cfi_def_cfa_register 7
 447 01ca 0346     		mov	r3, r0
 448 01cc FB71     		strb	r3, [r7, #7]
 403:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../SPL/src/stm32f10x_rcc.c **** 
 406:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 449              		.loc 1 406 0
 450 01ce 044B     		ldr	r3, .L28
 451 01d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 452 01d2 1A60     		str	r2, [r3, #0]
 407:../SPL/src/stm32f10x_rcc.c **** }
 453              		.loc 1 407 0
 454 01d4 07F10C07 		add	r7, r7, #12
 455 01d8 BD46     		mov	sp, r7
 456 01da 80BC     		pop	{r7}
 457 01dc 7047     		bx	lr
 458              	.L29:
 459 01de 00BF     		.align	2
 460              	.L28:
 461 01e0 60004242 		.word	1111621728
 462              		.cfi_endproc
 463              	.LFE35:
 465              		.align	2
 466              		.global	RCC_PREDIV1Config
 467              		.thumb
 468              		.thumb_func
 470              	RCC_PREDIV1Config:
 471              	.LFB36:
 408:../SPL/src/stm32f10x_rcc.c **** 
 409:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../SPL/src/stm32f10x_rcc.c **** /**
 411:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../SPL/src/stm32f10x_rcc.c ****   * @note 
 413:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../SPL/src/stm32f10x_rcc.c ****   *     devices.
 416:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../SPL/src/stm32f10x_rcc.c ****   * @note 
 421:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 425:../SPL/src/stm32f10x_rcc.c ****   */
 426:../SPL/src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../SPL/src/stm32f10x_rcc.c **** {
 472              		.loc 1 427 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 16
 475              		@ frame_needed = 1, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 477 01e4 80B4     		push	{r7}
 478              	.LCFI20:
 479              		.cfi_def_cfa_offset 4
 480              		.cfi_offset 7, -4
 481 01e6 85B0     		sub	sp, sp, #20
 482              	.LCFI21:
 483              		.cfi_def_cfa_offset 24
 484 01e8 00AF     		add	r7, sp, #0
 485              	.LCFI22:
 486              		.cfi_def_cfa_register 7
 487 01ea 7860     		str	r0, [r7, #4]
 488 01ec 3960     		str	r1, [r7, #0]
 428:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 489              		.loc 1 428 0
 490 01ee 4FF00003 		mov	r3, #0
 491 01f2 FB60     		str	r3, [r7, #12]
 429:../SPL/src/stm32f10x_rcc.c ****   
 430:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../SPL/src/stm32f10x_rcc.c **** 
 434:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 492              		.loc 1 434 0
 493 01f4 0B4B     		ldr	r3, .L31
 494 01f6 DB6A     		ldr	r3, [r3, #44]
 495 01f8 FB60     		str	r3, [r7, #12]
 435:../SPL/src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 496              		.loc 1 436 0
 497 01fa FB68     		ldr	r3, [r7, #12]
 498 01fc 23F48033 		bic	r3, r3, #65536
 499 0200 23F00F03 		bic	r3, r3, #15
 500 0204 FB60     		str	r3, [r7, #12]
 437:../SPL/src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 501              		.loc 1 438 0
 502 0206 7A68     		ldr	r2, [r7, #4]
 503 0208 3B68     		ldr	r3, [r7, #0]
 504 020a 1343     		orrs	r3, r3, r2
 505 020c FA68     		ldr	r2, [r7, #12]
 506 020e 1343     		orrs	r3, r3, r2
 507 0210 FB60     		str	r3, [r7, #12]
 439:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 440:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 508              		.loc 1 440 0
 509 0212 044B     		ldr	r3, .L31
 510 0214 FA68     		ldr	r2, [r7, #12]
 511 0216 DA62     		str	r2, [r3, #44]
 441:../SPL/src/stm32f10x_rcc.c **** }
 512              		.loc 1 441 0
 513 0218 07F11407 		add	r7, r7, #20
 514 021c BD46     		mov	sp, r7
 515 021e 80BC     		pop	{r7}
 516 0220 7047     		bx	lr
 517              	.L32:
 518 0222 00BF     		.align	2
 519              	.L31:
 520 0224 00100240 		.word	1073876992
 521              		.cfi_endproc
 522              	.LFE36:
 524              		.align	2
 525              		.global	RCC_SYSCLKConfig
 526              		.thumb
 527              		.thumb_func
 529              	RCC_SYSCLKConfig:
 530              	.LFB37:
 442:../SPL/src/stm32f10x_rcc.c **** #endif
 443:../SPL/src/stm32f10x_rcc.c **** 
 444:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../SPL/src/stm32f10x_rcc.c **** /**
 446:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../SPL/src/stm32f10x_rcc.c ****   * @note 
 448:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 453:../SPL/src/stm32f10x_rcc.c ****   */
 454:../SPL/src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../SPL/src/stm32f10x_rcc.c **** {
 456:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../SPL/src/stm32f10x_rcc.c **** 
 458:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../SPL/src/stm32f10x_rcc.c **** 
 461:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../SPL/src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../SPL/src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 467:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../SPL/src/stm32f10x_rcc.c **** }
 469:../SPL/src/stm32f10x_rcc.c **** 
 470:../SPL/src/stm32f10x_rcc.c **** /**
 471:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../SPL/src/stm32f10x_rcc.c ****   * @note
 473:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 478:../SPL/src/stm32f10x_rcc.c ****   */
 479:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../SPL/src/stm32f10x_rcc.c **** {
 481:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../SPL/src/stm32f10x_rcc.c **** 
 483:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../SPL/src/stm32f10x_rcc.c **** 
 486:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../SPL/src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../SPL/src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 492:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../SPL/src/stm32f10x_rcc.c **** }
 494:../SPL/src/stm32f10x_rcc.c **** 
 495:../SPL/src/stm32f10x_rcc.c **** 
 496:../SPL/src/stm32f10x_rcc.c **** /**
 497:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../SPL/src/stm32f10x_rcc.c ****   * @note 
 499:../SPL/src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../SPL/src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 504:../SPL/src/stm32f10x_rcc.c ****   */
 505:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../SPL/src/stm32f10x_rcc.c **** {
 507:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../SPL/src/stm32f10x_rcc.c **** 
 510:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../SPL/src/stm32f10x_rcc.c **** }
 512:../SPL/src/stm32f10x_rcc.c **** 
 513:../SPL/src/stm32f10x_rcc.c **** 
 514:../SPL/src/stm32f10x_rcc.c **** /**
 515:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../SPL/src/stm32f10x_rcc.c ****   * @note 
 517:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 522:../SPL/src/stm32f10x_rcc.c ****   */
 523:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../SPL/src/stm32f10x_rcc.c **** {
 525:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../SPL/src/stm32f10x_rcc.c **** 
 527:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../SPL/src/stm32f10x_rcc.c **** 
 530:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../SPL/src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../SPL/src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 536:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../SPL/src/stm32f10x_rcc.c **** }
 538:../SPL/src/stm32f10x_rcc.c **** 
 539:../SPL/src/stm32f10x_rcc.c **** 
 540:../SPL/src/stm32f10x_rcc.c **** /**
 541:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../SPL/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 545:../SPL/src/stm32f10x_rcc.c ****   */
 546:../SPL/src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../SPL/src/stm32f10x_rcc.c **** {
 548:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../SPL/src/stm32f10x_rcc.c **** 
 550:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../SPL/src/stm32f10x_rcc.c **** }
 553:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../SPL/src/stm32f10x_rcc.c **** 
 555:../SPL/src/stm32f10x_rcc.c **** /**
 556:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 563:../SPL/src/stm32f10x_rcc.c ****   */
 564:../SPL/src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../SPL/src/stm32f10x_rcc.c **** {
 531              		.loc 1 565 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 16
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536 0228 80B4     		push	{r7}
 537              	.LCFI23:
 538              		.cfi_def_cfa_offset 4
 539              		.cfi_offset 7, -4
 540 022a 85B0     		sub	sp, sp, #20
 541              	.LCFI24:
 542              		.cfi_def_cfa_offset 24
 543 022c 00AF     		add	r7, sp, #0
 544              	.LCFI25:
 545              		.cfi_def_cfa_register 7
 546 022e 7860     		str	r0, [r7, #4]
 566:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 547              		.loc 1 566 0
 548 0230 4FF00003 		mov	r3, #0
 549 0234 FB60     		str	r3, [r7, #12]
 567:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 569:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 550              		.loc 1 569 0
 551 0236 094B     		ldr	r3, .L34
 552 0238 5B68     		ldr	r3, [r3, #4]
 553 023a FB60     		str	r3, [r7, #12]
 570:../SPL/src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 554              		.loc 1 571 0
 555 023c FB68     		ldr	r3, [r7, #12]
 556 023e 23F00303 		bic	r3, r3, #3
 557 0242 FB60     		str	r3, [r7, #12]
 572:../SPL/src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 558              		.loc 1 573 0
 559 0244 FA68     		ldr	r2, [r7, #12]
 560 0246 7B68     		ldr	r3, [r7, #4]
 561 0248 1343     		orrs	r3, r3, r2
 562 024a FB60     		str	r3, [r7, #12]
 574:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 575:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 563              		.loc 1 575 0
 564 024c 034B     		ldr	r3, .L34
 565 024e FA68     		ldr	r2, [r7, #12]
 566 0250 5A60     		str	r2, [r3, #4]
 576:../SPL/src/stm32f10x_rcc.c **** }
 567              		.loc 1 576 0
 568 0252 07F11407 		add	r7, r7, #20
 569 0256 BD46     		mov	sp, r7
 570 0258 80BC     		pop	{r7}
 571 025a 7047     		bx	lr
 572              	.L35:
 573              		.align	2
 574              	.L34:
 575 025c 00100240 		.word	1073876992
 576              		.cfi_endproc
 577              	.LFE37:
 579              		.align	2
 580              		.global	RCC_GetSYSCLKSource
 581              		.thumb
 582              		.thumb_func
 584              	RCC_GetSYSCLKSource:
 585              	.LFB38:
 577:../SPL/src/stm32f10x_rcc.c **** 
 578:../SPL/src/stm32f10x_rcc.c **** /**
 579:../SPL/src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../SPL/src/stm32f10x_rcc.c ****   * @param  None
 581:../SPL/src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../SPL/src/stm32f10x_rcc.c ****   *   be one of the following:
 583:../SPL/src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../SPL/src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../SPL/src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../SPL/src/stm32f10x_rcc.c ****   */
 587:../SPL/src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../SPL/src/stm32f10x_rcc.c **** {
 586              		.loc 1 588 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 1, uses_anonymous_args = 0
 590              		@ link register save eliminated.
 591 0260 80B4     		push	{r7}
 592              	.LCFI26:
 593              		.cfi_def_cfa_offset 4
 594              		.cfi_offset 7, -4
 595 0262 00AF     		add	r7, sp, #0
 596              	.LCFI27:
 597              		.cfi_def_cfa_register 7
 589:../SPL/src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 598              		.loc 1 589 0
 599 0264 044B     		ldr	r3, .L38
 600 0266 5B68     		ldr	r3, [r3, #4]
 601 0268 DBB2     		uxtb	r3, r3
 602 026a 03F00C03 		and	r3, r3, #12
 603 026e DBB2     		uxtb	r3, r3
 590:../SPL/src/stm32f10x_rcc.c **** }
 604              		.loc 1 590 0
 605 0270 1846     		mov	r0, r3
 606 0272 BD46     		mov	sp, r7
 607 0274 80BC     		pop	{r7}
 608 0276 7047     		bx	lr
 609              	.L39:
 610              		.align	2
 611              	.L38:
 612 0278 00100240 		.word	1073876992
 613              		.cfi_endproc
 614              	.LFE38:
 616              		.align	2
 617              		.global	RCC_HCLKConfig
 618              		.thumb
 619              		.thumb_func
 621              	RCC_HCLKConfig:
 622              	.LFB39:
 591:../SPL/src/stm32f10x_rcc.c **** 
 592:../SPL/src/stm32f10x_rcc.c **** /**
 593:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../SPL/src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 607:../SPL/src/stm32f10x_rcc.c ****   */
 608:../SPL/src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../SPL/src/stm32f10x_rcc.c **** {
 623              		.loc 1 609 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 16
 626              		@ frame_needed = 1, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628 027c 80B4     		push	{r7}
 629              	.LCFI28:
 630              		.cfi_def_cfa_offset 4
 631              		.cfi_offset 7, -4
 632 027e 85B0     		sub	sp, sp, #20
 633              	.LCFI29:
 634              		.cfi_def_cfa_offset 24
 635 0280 00AF     		add	r7, sp, #0
 636              	.LCFI30:
 637              		.cfi_def_cfa_register 7
 638 0282 7860     		str	r0, [r7, #4]
 610:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 639              		.loc 1 610 0
 640 0284 4FF00003 		mov	r3, #0
 641 0288 FB60     		str	r3, [r7, #12]
 611:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 613:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 642              		.loc 1 613 0
 643 028a 094B     		ldr	r3, .L41
 644 028c 5B68     		ldr	r3, [r3, #4]
 645 028e FB60     		str	r3, [r7, #12]
 614:../SPL/src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 646              		.loc 1 615 0
 647 0290 FB68     		ldr	r3, [r7, #12]
 648 0292 23F0F003 		bic	r3, r3, #240
 649 0296 FB60     		str	r3, [r7, #12]
 616:../SPL/src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 650              		.loc 1 617 0
 651 0298 FA68     		ldr	r2, [r7, #12]
 652 029a 7B68     		ldr	r3, [r7, #4]
 653 029c 1343     		orrs	r3, r3, r2
 654 029e FB60     		str	r3, [r7, #12]
 618:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 619:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 655              		.loc 1 619 0
 656 02a0 034B     		ldr	r3, .L41
 657 02a2 FA68     		ldr	r2, [r7, #12]
 658 02a4 5A60     		str	r2, [r3, #4]
 620:../SPL/src/stm32f10x_rcc.c **** }
 659              		.loc 1 620 0
 660 02a6 07F11407 		add	r7, r7, #20
 661 02aa BD46     		mov	sp, r7
 662 02ac 80BC     		pop	{r7}
 663 02ae 7047     		bx	lr
 664              	.L42:
 665              		.align	2
 666              	.L41:
 667 02b0 00100240 		.word	1073876992
 668              		.cfi_endproc
 669              	.LFE39:
 671              		.align	2
 672              		.global	RCC_PCLK1Config
 673              		.thumb
 674              		.thumb_func
 676              	RCC_PCLK1Config:
 677              	.LFB40:
 621:../SPL/src/stm32f10x_rcc.c **** 
 622:../SPL/src/stm32f10x_rcc.c **** /**
 623:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../SPL/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 633:../SPL/src/stm32f10x_rcc.c ****   */
 634:../SPL/src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../SPL/src/stm32f10x_rcc.c **** {
 678              		.loc 1 635 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 16
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683 02b4 80B4     		push	{r7}
 684              	.LCFI31:
 685              		.cfi_def_cfa_offset 4
 686              		.cfi_offset 7, -4
 687 02b6 85B0     		sub	sp, sp, #20
 688              	.LCFI32:
 689              		.cfi_def_cfa_offset 24
 690 02b8 00AF     		add	r7, sp, #0
 691              	.LCFI33:
 692              		.cfi_def_cfa_register 7
 693 02ba 7860     		str	r0, [r7, #4]
 636:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 694              		.loc 1 636 0
 695 02bc 4FF00003 		mov	r3, #0
 696 02c0 FB60     		str	r3, [r7, #12]
 637:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 639:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 697              		.loc 1 639 0
 698 02c2 094B     		ldr	r3, .L44
 699 02c4 5B68     		ldr	r3, [r3, #4]
 700 02c6 FB60     		str	r3, [r7, #12]
 640:../SPL/src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 701              		.loc 1 641 0
 702 02c8 FB68     		ldr	r3, [r7, #12]
 703 02ca 23F4E063 		bic	r3, r3, #1792
 704 02ce FB60     		str	r3, [r7, #12]
 642:../SPL/src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 705              		.loc 1 643 0
 706 02d0 FA68     		ldr	r2, [r7, #12]
 707 02d2 7B68     		ldr	r3, [r7, #4]
 708 02d4 1343     		orrs	r3, r3, r2
 709 02d6 FB60     		str	r3, [r7, #12]
 644:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 645:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 710              		.loc 1 645 0
 711 02d8 034B     		ldr	r3, .L44
 712 02da FA68     		ldr	r2, [r7, #12]
 713 02dc 5A60     		str	r2, [r3, #4]
 646:../SPL/src/stm32f10x_rcc.c **** }
 714              		.loc 1 646 0
 715 02de 07F11407 		add	r7, r7, #20
 716 02e2 BD46     		mov	sp, r7
 717 02e4 80BC     		pop	{r7}
 718 02e6 7047     		bx	lr
 719              	.L45:
 720              		.align	2
 721              	.L44:
 722 02e8 00100240 		.word	1073876992
 723              		.cfi_endproc
 724              	.LFE40:
 726              		.align	2
 727              		.global	RCC_PCLK2Config
 728              		.thumb
 729              		.thumb_func
 731              	RCC_PCLK2Config:
 732              	.LFB41:
 647:../SPL/src/stm32f10x_rcc.c **** 
 648:../SPL/src/stm32f10x_rcc.c **** /**
 649:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../SPL/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 659:../SPL/src/stm32f10x_rcc.c ****   */
 660:../SPL/src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../SPL/src/stm32f10x_rcc.c **** {
 733              		.loc 1 661 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 16
 736              		@ frame_needed = 1, uses_anonymous_args = 0
 737              		@ link register save eliminated.
 738 02ec 80B4     		push	{r7}
 739              	.LCFI34:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 7, -4
 742 02ee 85B0     		sub	sp, sp, #20
 743              	.LCFI35:
 744              		.cfi_def_cfa_offset 24
 745 02f0 00AF     		add	r7, sp, #0
 746              	.LCFI36:
 747              		.cfi_def_cfa_register 7
 748 02f2 7860     		str	r0, [r7, #4]
 662:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 749              		.loc 1 662 0
 750 02f4 4FF00003 		mov	r3, #0
 751 02f8 FB60     		str	r3, [r7, #12]
 663:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 665:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 752              		.loc 1 665 0
 753 02fa 0A4B     		ldr	r3, .L47
 754 02fc 5B68     		ldr	r3, [r3, #4]
 755 02fe FB60     		str	r3, [r7, #12]
 666:../SPL/src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 756              		.loc 1 667 0
 757 0300 FB68     		ldr	r3, [r7, #12]
 758 0302 23F46053 		bic	r3, r3, #14336
 759 0306 FB60     		str	r3, [r7, #12]
 668:../SPL/src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 760              		.loc 1 669 0
 761 0308 7B68     		ldr	r3, [r7, #4]
 762 030a 4FEAC303 		lsl	r3, r3, #3
 763 030e FA68     		ldr	r2, [r7, #12]
 764 0310 1343     		orrs	r3, r3, r2
 765 0312 FB60     		str	r3, [r7, #12]
 670:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 671:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 766              		.loc 1 671 0
 767 0314 034B     		ldr	r3, .L47
 768 0316 FA68     		ldr	r2, [r7, #12]
 769 0318 5A60     		str	r2, [r3, #4]
 672:../SPL/src/stm32f10x_rcc.c **** }
 770              		.loc 1 672 0
 771 031a 07F11407 		add	r7, r7, #20
 772 031e BD46     		mov	sp, r7
 773 0320 80BC     		pop	{r7}
 774 0322 7047     		bx	lr
 775              	.L48:
 776              		.align	2
 777              	.L47:
 778 0324 00100240 		.word	1073876992
 779              		.cfi_endproc
 780              	.LFE41:
 782              		.align	2
 783              		.global	RCC_ITConfig
 784              		.thumb
 785              		.thumb_func
 787              	RCC_ITConfig:
 788              	.LFB42:
 673:../SPL/src/stm32f10x_rcc.c **** 
 674:../SPL/src/stm32f10x_rcc.c **** /**
 675:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../SPL/src/stm32f10x_rcc.c ****   * 
 678:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../SPL/src/stm32f10x_rcc.c ****   *   of the following values        
 680:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../SPL/src/stm32f10x_rcc.c ****   * 
 688:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../SPL/src/stm32f10x_rcc.c ****   *   following values        
 690:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../SPL/src/stm32f10x_rcc.c ****   *       
 696:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 699:../SPL/src/stm32f10x_rcc.c ****   */
 700:../SPL/src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../SPL/src/stm32f10x_rcc.c **** {
 789              		.loc 1 701 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 8
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 0328 80B4     		push	{r7}
 795              	.LCFI37:
 796              		.cfi_def_cfa_offset 4
 797              		.cfi_offset 7, -4
 798 032a 83B0     		sub	sp, sp, #12
 799              	.LCFI38:
 800              		.cfi_def_cfa_offset 16
 801 032c 00AF     		add	r7, sp, #0
 802              	.LCFI39:
 803              		.cfi_def_cfa_register 7
 804 032e 0246     		mov	r2, r0
 805 0330 0B46     		mov	r3, r1
 806 0332 FA71     		strb	r2, [r7, #7]
 807 0334 BB71     		strb	r3, [r7, #6]
 702:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 704:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 705:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 808              		.loc 1 705 0
 809 0336 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 810 0338 002B     		cmp	r3, #0
 811 033a 08D0     		beq	.L50
 706:../SPL/src/stm32f10x_rcc.c ****   {
 707:../SPL/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../SPL/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 812              		.loc 1 708 0
 813 033c 0C4B     		ldr	r3, .L52
 814 033e 0C4A     		ldr	r2, .L52
 815 0340 1278     		ldrb	r2, [r2, #0]
 816 0342 D1B2     		uxtb	r1, r2
 817 0344 FA79     		ldrb	r2, [r7, #7]
 818 0346 0A43     		orrs	r2, r2, r1
 819 0348 D2B2     		uxtb	r2, r2
 820 034a 1A70     		strb	r2, [r3, #0]
 821 034c 0AE0     		b	.L49
 822              	.L50:
 709:../SPL/src/stm32f10x_rcc.c ****   }
 710:../SPL/src/stm32f10x_rcc.c ****   else
 711:../SPL/src/stm32f10x_rcc.c ****   {
 712:../SPL/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../SPL/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 823              		.loc 1 713 0
 824 034e 084B     		ldr	r3, .L52
 825 0350 074A     		ldr	r2, .L52
 826 0352 1278     		ldrb	r2, [r2, #0]
 827 0354 D1B2     		uxtb	r1, r2
 828 0356 FA79     		ldrb	r2, [r7, #7]
 829 0358 6FEA0202 		mvn	r2, r2
 830 035c D2B2     		uxtb	r2, r2
 831 035e 0A40     		ands	r2, r2, r1
 832 0360 D2B2     		uxtb	r2, r2
 833 0362 1A70     		strb	r2, [r3, #0]
 834              	.L49:
 714:../SPL/src/stm32f10x_rcc.c ****   }
 715:../SPL/src/stm32f10x_rcc.c **** }
 835              		.loc 1 715 0
 836 0364 07F10C07 		add	r7, r7, #12
 837 0368 BD46     		mov	sp, r7
 838 036a 80BC     		pop	{r7}
 839 036c 7047     		bx	lr
 840              	.L53:
 841 036e 00BF     		.align	2
 842              	.L52:
 843 0370 09100240 		.word	1073877001
 844              		.cfi_endproc
 845              	.LFE42:
 847              		.align	2
 848              		.global	RCC_USBCLKConfig
 849              		.thumb
 850              		.thumb_func
 852              	RCC_USBCLKConfig:
 853              	.LFB43:
 716:../SPL/src/stm32f10x_rcc.c **** 
 717:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../SPL/src/stm32f10x_rcc.c **** /**
 719:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../SPL/src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../SPL/src/stm32f10x_rcc.c ****   *                                     clock source
 725:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 727:../SPL/src/stm32f10x_rcc.c ****   */
 728:../SPL/src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../SPL/src/stm32f10x_rcc.c **** {
 854              		.loc 1 729 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 8
 857              		@ frame_needed = 1, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859 0374 80B4     		push	{r7}
 860              	.LCFI40:
 861              		.cfi_def_cfa_offset 4
 862              		.cfi_offset 7, -4
 863 0376 83B0     		sub	sp, sp, #12
 864              	.LCFI41:
 865              		.cfi_def_cfa_offset 16
 866 0378 00AF     		add	r7, sp, #0
 867              	.LCFI42:
 868              		.cfi_def_cfa_register 7
 869 037a 7860     		str	r0, [r7, #4]
 730:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 732:../SPL/src/stm32f10x_rcc.c **** 
 733:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 870              		.loc 1 733 0
 871 037c 034B     		ldr	r3, .L55
 872 037e 7A68     		ldr	r2, [r7, #4]
 873 0380 1A60     		str	r2, [r3, #0]
 734:../SPL/src/stm32f10x_rcc.c **** }
 874              		.loc 1 734 0
 875 0382 07F10C07 		add	r7, r7, #12
 876 0386 BD46     		mov	sp, r7
 877 0388 80BC     		pop	{r7}
 878 038a 7047     		bx	lr
 879              	.L56:
 880              		.align	2
 881              	.L55:
 882 038c D8004242 		.word	1111621848
 883              		.cfi_endproc
 884              	.LFE43:
 886              		.align	2
 887              		.global	RCC_ADCCLKConfig
 888              		.thumb
 889              		.thumb_func
 891              	RCC_ADCCLKConfig:
 892              	.LFB44:
 735:../SPL/src/stm32f10x_rcc.c **** #else
 736:../SPL/src/stm32f10x_rcc.c **** /**
 737:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../SPL/src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../SPL/src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../SPL/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../SPL/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 745:../SPL/src/stm32f10x_rcc.c ****   */
 746:../SPL/src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../SPL/src/stm32f10x_rcc.c **** {
 748:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../SPL/src/stm32f10x_rcc.c **** 
 751:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../SPL/src/stm32f10x_rcc.c **** }
 753:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../SPL/src/stm32f10x_rcc.c **** 
 755:../SPL/src/stm32f10x_rcc.c **** /**
 756:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../SPL/src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 765:../SPL/src/stm32f10x_rcc.c ****   */
 766:../SPL/src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../SPL/src/stm32f10x_rcc.c **** {
 893              		.loc 1 767 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 16
 896              		@ frame_needed = 1, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898 0390 80B4     		push	{r7}
 899              	.LCFI43:
 900              		.cfi_def_cfa_offset 4
 901              		.cfi_offset 7, -4
 902 0392 85B0     		sub	sp, sp, #20
 903              	.LCFI44:
 904              		.cfi_def_cfa_offset 24
 905 0394 00AF     		add	r7, sp, #0
 906              	.LCFI45:
 907              		.cfi_def_cfa_register 7
 908 0396 7860     		str	r0, [r7, #4]
 768:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 909              		.loc 1 768 0
 910 0398 4FF00003 		mov	r3, #0
 911 039c FB60     		str	r3, [r7, #12]
 769:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 771:../SPL/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 912              		.loc 1 771 0
 913 039e 094B     		ldr	r3, .L58
 914 03a0 5B68     		ldr	r3, [r3, #4]
 915 03a2 FB60     		str	r3, [r7, #12]
 772:../SPL/src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../SPL/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 916              		.loc 1 773 0
 917 03a4 FB68     		ldr	r3, [r7, #12]
 918 03a6 23F44043 		bic	r3, r3, #49152
 919 03aa FB60     		str	r3, [r7, #12]
 774:../SPL/src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../SPL/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 920              		.loc 1 775 0
 921 03ac FA68     		ldr	r2, [r7, #12]
 922 03ae 7B68     		ldr	r3, [r7, #4]
 923 03b0 1343     		orrs	r3, r3, r2
 924 03b2 FB60     		str	r3, [r7, #12]
 776:../SPL/src/stm32f10x_rcc.c ****   /* Store the new value */
 777:../SPL/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 925              		.loc 1 777 0
 926 03b4 034B     		ldr	r3, .L58
 927 03b6 FA68     		ldr	r2, [r7, #12]
 928 03b8 5A60     		str	r2, [r3, #4]
 778:../SPL/src/stm32f10x_rcc.c **** }
 929              		.loc 1 778 0
 930 03ba 07F11407 		add	r7, r7, #20
 931 03be BD46     		mov	sp, r7
 932 03c0 80BC     		pop	{r7}
 933 03c2 7047     		bx	lr
 934              	.L59:
 935              		.align	2
 936              	.L58:
 937 03c4 00100240 		.word	1073876992
 938              		.cfi_endproc
 939              	.LFE44:
 941              		.align	2
 942              		.global	RCC_LSEConfig
 943              		.thumb
 944              		.thumb_func
 946              	RCC_LSEConfig:
 947              	.LFB45:
 779:../SPL/src/stm32f10x_rcc.c **** 
 780:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../SPL/src/stm32f10x_rcc.c **** /**
 782:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../SPL/src/stm32f10x_rcc.c ****   * @note
 784:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 791:../SPL/src/stm32f10x_rcc.c ****   */
 792:../SPL/src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../SPL/src/stm32f10x_rcc.c **** {
 794:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../SPL/src/stm32f10x_rcc.c **** 
 797:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../SPL/src/stm32f10x_rcc.c **** }
 799:../SPL/src/stm32f10x_rcc.c **** 
 800:../SPL/src/stm32f10x_rcc.c **** /**
 801:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../SPL/src/stm32f10x_rcc.c ****   * @note
 803:../SPL/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../SPL/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 810:../SPL/src/stm32f10x_rcc.c ****   */
 811:../SPL/src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../SPL/src/stm32f10x_rcc.c **** {
 813:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../SPL/src/stm32f10x_rcc.c **** 
 816:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../SPL/src/stm32f10x_rcc.c **** }
 818:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../SPL/src/stm32f10x_rcc.c **** 
 820:../SPL/src/stm32f10x_rcc.c **** /**
 821:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 828:../SPL/src/stm32f10x_rcc.c ****   */
 829:../SPL/src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../SPL/src/stm32f10x_rcc.c **** {
 948              		.loc 1 830 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 8
 951              		@ frame_needed = 1, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 953 03c8 80B4     		push	{r7}
 954              	.LCFI46:
 955              		.cfi_def_cfa_offset 4
 956              		.cfi_offset 7, -4
 957 03ca 83B0     		sub	sp, sp, #12
 958              	.LCFI47:
 959              		.cfi_def_cfa_offset 16
 960 03cc 00AF     		add	r7, sp, #0
 961              	.LCFI48:
 962              		.cfi_def_cfa_register 7
 963 03ce 0346     		mov	r3, r0
 964 03d0 FB71     		strb	r3, [r7, #7]
 831:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 833:../SPL/src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../SPL/src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 965              		.loc 1 835 0
 966 03d2 0F4B     		ldr	r3, .L66
 967 03d4 4FF00002 		mov	r2, #0
 968 03d8 1A70     		strb	r2, [r3, #0]
 836:../SPL/src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 969              		.loc 1 837 0
 970 03da 0D4B     		ldr	r3, .L66
 971 03dc 4FF00002 		mov	r2, #0
 972 03e0 1A70     		strb	r2, [r3, #0]
 838:../SPL/src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../SPL/src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 973              		.loc 1 839 0
 974 03e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 975 03e4 012B     		cmp	r3, #1
 976 03e6 02D0     		beq	.L62
 977 03e8 042B     		cmp	r3, #4
 978 03ea 05D0     		beq	.L63
 979 03ec 09E0     		b	.L65
 980              	.L62:
 840:../SPL/src/stm32f10x_rcc.c ****   {
 841:../SPL/src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../SPL/src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../SPL/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 981              		.loc 1 843 0
 982 03ee 084B     		ldr	r3, .L66
 983 03f0 4FF00102 		mov	r2, #1
 984 03f4 1A70     		strb	r2, [r3, #0]
 844:../SPL/src/stm32f10x_rcc.c ****       break;
 985              		.loc 1 844 0
 986 03f6 05E0     		b	.L60
 987              	.L63:
 845:../SPL/src/stm32f10x_rcc.c ****       
 846:../SPL/src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../SPL/src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../SPL/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 988              		.loc 1 848 0
 989 03f8 054B     		ldr	r3, .L66
 990 03fa 4FF00502 		mov	r2, #5
 991 03fe 1A70     		strb	r2, [r3, #0]
 849:../SPL/src/stm32f10x_rcc.c ****       break;            
 992              		.loc 1 849 0
 993 0400 00E0     		b	.L60
 994              	.L65:
 850:../SPL/src/stm32f10x_rcc.c ****       
 851:../SPL/src/stm32f10x_rcc.c ****     default:
 852:../SPL/src/stm32f10x_rcc.c ****       break;      
 995              		.loc 1 852 0
 996 0402 00BF     		nop
 997              	.L60:
 853:../SPL/src/stm32f10x_rcc.c ****   }
 854:../SPL/src/stm32f10x_rcc.c **** }
 998              		.loc 1 854 0
 999 0404 07F10C07 		add	r7, r7, #12
 1000 0408 BD46     		mov	sp, r7
 1001 040a 80BC     		pop	{r7}
 1002 040c 7047     		bx	lr
 1003              	.L67:
 1004 040e 00BF     		.align	2
 1005              	.L66:
 1006 0410 20100240 		.word	1073877024
 1007              		.cfi_endproc
 1008              	.LFE45:
 1010              		.align	2
 1011              		.global	RCC_LSICmd
 1012              		.thumb
 1013              		.thumb_func
 1015              	RCC_LSICmd:
 1016              	.LFB46:
 855:../SPL/src/stm32f10x_rcc.c **** 
 856:../SPL/src/stm32f10x_rcc.c **** /**
 857:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../SPL/src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 861:../SPL/src/stm32f10x_rcc.c ****   */
 862:../SPL/src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../SPL/src/stm32f10x_rcc.c **** {
 1017              		.loc 1 863 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022 0414 80B4     		push	{r7}
 1023              	.LCFI49:
 1024              		.cfi_def_cfa_offset 4
 1025              		.cfi_offset 7, -4
 1026 0416 83B0     		sub	sp, sp, #12
 1027              	.LCFI50:
 1028              		.cfi_def_cfa_offset 16
 1029 0418 00AF     		add	r7, sp, #0
 1030              	.LCFI51:
 1031              		.cfi_def_cfa_register 7
 1032 041a 0346     		mov	r3, r0
 1033 041c FB71     		strb	r3, [r7, #7]
 864:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 1034              		.loc 1 866 0
 1035 041e 044B     		ldr	r3, .L69
 1036 0420 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1037 0422 1A60     		str	r2, [r3, #0]
 867:../SPL/src/stm32f10x_rcc.c **** }
 1038              		.loc 1 867 0
 1039 0424 07F10C07 		add	r7, r7, #12
 1040 0428 BD46     		mov	sp, r7
 1041 042a 80BC     		pop	{r7}
 1042 042c 7047     		bx	lr
 1043              	.L70:
 1044 042e 00BF     		.align	2
 1045              	.L69:
 1046 0430 80044242 		.word	1111622784
 1047              		.cfi_endproc
 1048              	.LFE46:
 1050              		.align	2
 1051              		.global	RCC_RTCCLKConfig
 1052              		.thumb
 1053              		.thumb_func
 1055              	RCC_RTCCLKConfig:
 1056              	.LFB47:
 868:../SPL/src/stm32f10x_rcc.c **** 
 869:../SPL/src/stm32f10x_rcc.c **** /**
 870:../SPL/src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../SPL/src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 878:../SPL/src/stm32f10x_rcc.c ****   */
 879:../SPL/src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../SPL/src/stm32f10x_rcc.c **** {
 1057              		.loc 1 880 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 8
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061              		@ link register save eliminated.
 1062 0434 80B4     		push	{r7}
 1063              	.LCFI52:
 1064              		.cfi_def_cfa_offset 4
 1065              		.cfi_offset 7, -4
 1066 0436 83B0     		sub	sp, sp, #12
 1067              	.LCFI53:
 1068              		.cfi_def_cfa_offset 16
 1069 0438 00AF     		add	r7, sp, #0
 1070              	.LCFI54:
 1071              		.cfi_def_cfa_register 7
 1072 043a 7860     		str	r0, [r7, #4]
 881:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 883:../SPL/src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../SPL/src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1073              		.loc 1 884 0
 1074 043c 054B     		ldr	r3, .L72
 1075 043e 054A     		ldr	r2, .L72
 1076 0440 116A     		ldr	r1, [r2, #32]
 1077 0442 7A68     		ldr	r2, [r7, #4]
 1078 0444 0A43     		orrs	r2, r2, r1
 1079 0446 1A62     		str	r2, [r3, #32]
 885:../SPL/src/stm32f10x_rcc.c **** }
 1080              		.loc 1 885 0
 1081 0448 07F10C07 		add	r7, r7, #12
 1082 044c BD46     		mov	sp, r7
 1083 044e 80BC     		pop	{r7}
 1084 0450 7047     		bx	lr
 1085              	.L73:
 1086 0452 00BF     		.align	2
 1087              	.L72:
 1088 0454 00100240 		.word	1073876992
 1089              		.cfi_endproc
 1090              	.LFE47:
 1092              		.align	2
 1093              		.global	RCC_RTCCLKCmd
 1094              		.thumb
 1095              		.thumb_func
 1097              	RCC_RTCCLKCmd:
 1098              	.LFB48:
 886:../SPL/src/stm32f10x_rcc.c **** 
 887:../SPL/src/stm32f10x_rcc.c **** /**
 888:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../SPL/src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 892:../SPL/src/stm32f10x_rcc.c ****   */
 893:../SPL/src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../SPL/src/stm32f10x_rcc.c **** {
 1099              		.loc 1 894 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 8
 1102              		@ frame_needed = 1, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
 1104 0458 80B4     		push	{r7}
 1105              	.LCFI55:
 1106              		.cfi_def_cfa_offset 4
 1107              		.cfi_offset 7, -4
 1108 045a 83B0     		sub	sp, sp, #12
 1109              	.LCFI56:
 1110              		.cfi_def_cfa_offset 16
 1111 045c 00AF     		add	r7, sp, #0
 1112              	.LCFI57:
 1113              		.cfi_def_cfa_register 7
 1114 045e 0346     		mov	r3, r0
 1115 0460 FB71     		strb	r3, [r7, #7]
 895:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 897:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1116              		.loc 1 897 0
 1117 0462 044B     		ldr	r3, .L75
 1118 0464 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1119 0466 1A60     		str	r2, [r3, #0]
 898:../SPL/src/stm32f10x_rcc.c **** }
 1120              		.loc 1 898 0
 1121 0468 07F10C07 		add	r7, r7, #12
 1122 046c BD46     		mov	sp, r7
 1123 046e 80BC     		pop	{r7}
 1124 0470 7047     		bx	lr
 1125              	.L76:
 1126 0472 00BF     		.align	2
 1127              	.L75:
 1128 0474 3C044242 		.word	1111622716
 1129              		.cfi_endproc
 1130              	.LFE48:
 1132              		.align	2
 1133              		.global	RCC_GetClocksFreq
 1134              		.thumb
 1135              		.thumb_func
 1137              	RCC_GetClocksFreq:
 1138              	.LFB49:
 899:../SPL/src/stm32f10x_rcc.c **** 
 900:../SPL/src/stm32f10x_rcc.c **** /**
 901:../SPL/src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../SPL/src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../SPL/src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../SPL/src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../SPL/src/stm32f10x_rcc.c ****   * @retval None
 907:../SPL/src/stm32f10x_rcc.c ****   */
 908:../SPL/src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../SPL/src/stm32f10x_rcc.c **** {
 1139              		.loc 1 909 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 32
 1142              		@ frame_needed = 1, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 1144 0478 80B4     		push	{r7}
 1145              	.LCFI58:
 1146              		.cfi_def_cfa_offset 4
 1147              		.cfi_offset 7, -4
 1148 047a 89B0     		sub	sp, sp, #36
 1149              	.LCFI59:
 1150              		.cfi_def_cfa_offset 40
 1151 047c 00AF     		add	r7, sp, #0
 1152              	.LCFI60:
 1153              		.cfi_def_cfa_register 7
 1154 047e 7860     		str	r0, [r7, #4]
 910:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 1155              		.loc 1 910 0
 1156 0480 4FF00003 		mov	r3, #0
 1157 0484 FB61     		str	r3, [r7, #28]
 1158 0486 4FF00003 		mov	r3, #0
 1159 048a BB61     		str	r3, [r7, #24]
 1160 048c 4FF00003 		mov	r3, #0
 1161 0490 7B61     		str	r3, [r7, #20]
 1162 0492 4FF00003 		mov	r3, #0
 1163 0496 3B61     		str	r3, [r7, #16]
 911:../SPL/src/stm32f10x_rcc.c **** 
 912:../SPL/src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../SPL/src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../SPL/src/stm32f10x_rcc.c **** 
 916:../SPL/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../SPL/src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 1164              		.loc 1 917 0
 1165 0498 4FF00003 		mov	r3, #0
 1166 049c FB60     		str	r3, [r7, #12]
 918:../SPL/src/stm32f10x_rcc.c **** #endif
 919:../SPL/src/stm32f10x_rcc.c ****     
 920:../SPL/src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1167              		.loc 1 921 0
 1168 049e 504B     		ldr	r3, .L86
 1169 04a0 5B68     		ldr	r3, [r3, #4]
 1170 04a2 03F00C03 		and	r3, r3, #12
 1171 04a6 FB61     		str	r3, [r7, #28]
 922:../SPL/src/stm32f10x_rcc.c ****   
 923:../SPL/src/stm32f10x_rcc.c ****   switch (tmp)
 1172              		.loc 1 923 0
 1173 04a8 FB69     		ldr	r3, [r7, #28]
 1174 04aa 042B     		cmp	r3, #4
 1175 04ac 07D0     		beq	.L80
 1176 04ae 082B     		cmp	r3, #8
 1177 04b0 09D0     		beq	.L81
 1178 04b2 002B     		cmp	r3, #0
 1179 04b4 32D1     		bne	.L85
 1180              	.L79:
 924:../SPL/src/stm32f10x_rcc.c ****   {
 925:../SPL/src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../SPL/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1181              		.loc 1 926 0
 1182 04b6 7B68     		ldr	r3, [r7, #4]
 1183 04b8 4A4A     		ldr	r2, .L86+4
 1184 04ba 1A60     		str	r2, [r3, #0]
 927:../SPL/src/stm32f10x_rcc.c ****       break;
 1185              		.loc 1 927 0
 1186 04bc 32E0     		b	.L82
 1187              	.L80:
 928:../SPL/src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../SPL/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1188              		.loc 1 929 0
 1189 04be 7B68     		ldr	r3, [r7, #4]
 1190 04c0 484A     		ldr	r2, .L86+4
 1191 04c2 1A60     		str	r2, [r3, #0]
 930:../SPL/src/stm32f10x_rcc.c ****       break;
 1192              		.loc 1 930 0
 1193 04c4 2EE0     		b	.L82
 1194              	.L81:
 931:../SPL/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../SPL/src/stm32f10x_rcc.c **** 
 933:../SPL/src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../SPL/src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 1195              		.loc 1 934 0
 1196 04c6 464B     		ldr	r3, .L86
 1197 04c8 5B68     		ldr	r3, [r3, #4]
 1198 04ca 03F47013 		and	r3, r3, #3932160
 1199 04ce BB61     		str	r3, [r7, #24]
 935:../SPL/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1200              		.loc 1 935 0
 1201 04d0 434B     		ldr	r3, .L86
 1202 04d2 5B68     		ldr	r3, [r3, #4]
 1203 04d4 03F48033 		and	r3, r3, #65536
 1204 04d8 7B61     		str	r3, [r7, #20]
 936:../SPL/src/stm32f10x_rcc.c ****       
 937:../SPL/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../SPL/src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1205              		.loc 1 938 0
 1206 04da BB69     		ldr	r3, [r7, #24]
 1207 04dc 4FEA9343 		lsr	r3, r3, #18
 1208 04e0 03F10203 		add	r3, r3, #2
 1209 04e4 BB61     		str	r3, [r7, #24]
 939:../SPL/src/stm32f10x_rcc.c ****       
 940:../SPL/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 1210              		.loc 1 940 0
 1211 04e6 7B69     		ldr	r3, [r7, #20]
 1212 04e8 002B     		cmp	r3, #0
 1213 04ea 06D1     		bne	.L83
 941:../SPL/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../SPL/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1214              		.loc 1 942 0
 1215 04ec BB69     		ldr	r3, [r7, #24]
 1216 04ee 3E4A     		ldr	r2, .L86+8
 1217 04f0 02FB03F2 		mul	r2, r2, r3
 1218 04f4 7B68     		ldr	r3, [r7, #4]
 1219 04f6 1A60     		str	r2, [r3, #0]
 943:../SPL/src/stm32f10x_rcc.c ****       }
 944:../SPL/src/stm32f10x_rcc.c ****       else
 945:../SPL/src/stm32f10x_rcc.c ****       {
 946:../SPL/src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../SPL/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../SPL/src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../SPL/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../SPL/src/stm32f10x_rcc.c ****  #else
 951:../SPL/src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../SPL/src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../SPL/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../SPL/src/stm32f10x_rcc.c ****         }
 956:../SPL/src/stm32f10x_rcc.c ****         else
 957:../SPL/src/stm32f10x_rcc.c ****         {
 958:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../SPL/src/stm32f10x_rcc.c ****         }
 960:../SPL/src/stm32f10x_rcc.c ****  #endif
 961:../SPL/src/stm32f10x_rcc.c ****       }
 962:../SPL/src/stm32f10x_rcc.c **** #else
 963:../SPL/src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../SPL/src/stm32f10x_rcc.c ****       
 965:../SPL/src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../SPL/src/stm32f10x_rcc.c ****       {
 967:../SPL/src/stm32f10x_rcc.c ****          pllmull += 2;
 968:../SPL/src/stm32f10x_rcc.c ****       }
 969:../SPL/src/stm32f10x_rcc.c ****       else
 970:../SPL/src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../SPL/src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../SPL/src/stm32f10x_rcc.c ****       }
 973:../SPL/src/stm32f10x_rcc.c ****             
 974:../SPL/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../SPL/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../SPL/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../SPL/src/stm32f10x_rcc.c ****       }
 978:../SPL/src/stm32f10x_rcc.c ****       else
 979:../SPL/src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../SPL/src/stm32f10x_rcc.c ****         
 981:../SPL/src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../SPL/src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../SPL/src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../SPL/src/stm32f10x_rcc.c ****         
 985:../SPL/src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../SPL/src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../SPL/src/stm32f10x_rcc.c ****         }
 989:../SPL/src/stm32f10x_rcc.c ****         else
 990:../SPL/src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../SPL/src/stm32f10x_rcc.c ****           
 992:../SPL/src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../SPL/src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../SPL/src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../SPL/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../SPL/src/stm32f10x_rcc.c ****         }
 997:../SPL/src/stm32f10x_rcc.c ****       }
 998:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../SPL/src/stm32f10x_rcc.c ****       break;
 1220              		.loc 1 999 0
 1221 04f8 14E0     		b	.L82
 1222              	.L83:
 947:../SPL/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 1223              		.loc 1 947 0
 1224 04fa 394B     		ldr	r3, .L86
 1225 04fc DB6A     		ldr	r3, [r3, #44]
 1226 04fe 03F00F03 		and	r3, r3, #15
 1227 0502 03F10103 		add	r3, r3, #1
 1228 0506 FB60     		str	r3, [r7, #12]
 949:../SPL/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 1229              		.loc 1 949 0
 1230 0508 364A     		ldr	r2, .L86+4
 1231 050a FB68     		ldr	r3, [r7, #12]
 1232 050c B2FBF3F3 		udiv	r3, r2, r3
 1233 0510 BA69     		ldr	r2, [r7, #24]
 1234 0512 02FB03F2 		mul	r2, r2, r3
 1235 0516 7B68     		ldr	r3, [r7, #4]
 1236 0518 1A60     		str	r2, [r3, #0]
 1237              		.loc 1 999 0
 1238 051a 03E0     		b	.L82
 1239              	.L85:
1000:../SPL/src/stm32f10x_rcc.c **** 
1001:../SPL/src/stm32f10x_rcc.c ****     default:
1002:../SPL/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1240              		.loc 1 1002 0
 1241 051c 7B68     		ldr	r3, [r7, #4]
 1242 051e 314A     		ldr	r2, .L86+4
 1243 0520 1A60     		str	r2, [r3, #0]
1003:../SPL/src/stm32f10x_rcc.c ****       break;
 1244              		.loc 1 1003 0
 1245 0522 00BF     		nop
 1246              	.L82:
1004:../SPL/src/stm32f10x_rcc.c ****   }
1005:../SPL/src/stm32f10x_rcc.c **** 
1006:../SPL/src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../SPL/src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1247              		.loc 1 1008 0
 1248 0524 2E4B     		ldr	r3, .L86
 1249 0526 5B68     		ldr	r3, [r3, #4]
 1250 0528 03F0F003 		and	r3, r3, #240
 1251 052c FB61     		str	r3, [r7, #28]
1009:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1252              		.loc 1 1009 0
 1253 052e FB69     		ldr	r3, [r7, #28]
 1254 0530 4FEA1313 		lsr	r3, r3, #4
 1255 0534 FB61     		str	r3, [r7, #28]
1010:../SPL/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1256              		.loc 1 1010 0
 1257 0536 2D4A     		ldr	r2, .L86+12
 1258 0538 FB69     		ldr	r3, [r7, #28]
 1259 053a D318     		adds	r3, r2, r3
 1260 053c 1B78     		ldrb	r3, [r3, #0]
 1261 053e DBB2     		uxtb	r3, r3
 1262 0540 3B61     		str	r3, [r7, #16]
1011:../SPL/src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1263              		.loc 1 1012 0
 1264 0542 7B68     		ldr	r3, [r7, #4]
 1265 0544 1A68     		ldr	r2, [r3, #0]
 1266 0546 3B69     		ldr	r3, [r7, #16]
 1267 0548 22FA03F2 		lsr	r2, r2, r3
 1268 054c 7B68     		ldr	r3, [r7, #4]
 1269 054e 5A60     		str	r2, [r3, #4]
1013:../SPL/src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1270              		.loc 1 1014 0
 1271 0550 234B     		ldr	r3, .L86
 1272 0552 5B68     		ldr	r3, [r3, #4]
 1273 0554 03F4E063 		and	r3, r3, #1792
 1274 0558 FB61     		str	r3, [r7, #28]
1015:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1275              		.loc 1 1015 0
 1276 055a FB69     		ldr	r3, [r7, #28]
 1277 055c 4FEA1323 		lsr	r3, r3, #8
 1278 0560 FB61     		str	r3, [r7, #28]
1016:../SPL/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1279              		.loc 1 1016 0
 1280 0562 224A     		ldr	r2, .L86+12
 1281 0564 FB69     		ldr	r3, [r7, #28]
 1282 0566 D318     		adds	r3, r2, r3
 1283 0568 1B78     		ldrb	r3, [r3, #0]
 1284 056a DBB2     		uxtb	r3, r3
 1285 056c 3B61     		str	r3, [r7, #16]
1017:../SPL/src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1286              		.loc 1 1018 0
 1287 056e 7B68     		ldr	r3, [r7, #4]
 1288 0570 5A68     		ldr	r2, [r3, #4]
 1289 0572 3B69     		ldr	r3, [r7, #16]
 1290 0574 22FA03F2 		lsr	r2, r2, r3
 1291 0578 7B68     		ldr	r3, [r7, #4]
 1292 057a 9A60     		str	r2, [r3, #8]
1019:../SPL/src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1293              		.loc 1 1020 0
 1294 057c 184B     		ldr	r3, .L86
 1295 057e 5B68     		ldr	r3, [r3, #4]
 1296 0580 03F46053 		and	r3, r3, #14336
 1297 0584 FB61     		str	r3, [r7, #28]
1021:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1298              		.loc 1 1021 0
 1299 0586 FB69     		ldr	r3, [r7, #28]
 1300 0588 4FEAD323 		lsr	r3, r3, #11
 1301 058c FB61     		str	r3, [r7, #28]
1022:../SPL/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1302              		.loc 1 1022 0
 1303 058e 174A     		ldr	r2, .L86+12
 1304 0590 FB69     		ldr	r3, [r7, #28]
 1305 0592 D318     		adds	r3, r2, r3
 1306 0594 1B78     		ldrb	r3, [r3, #0]
 1307 0596 DBB2     		uxtb	r3, r3
 1308 0598 3B61     		str	r3, [r7, #16]
1023:../SPL/src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1309              		.loc 1 1024 0
 1310 059a 7B68     		ldr	r3, [r7, #4]
 1311 059c 5A68     		ldr	r2, [r3, #4]
 1312 059e 3B69     		ldr	r3, [r7, #16]
 1313 05a0 22FA03F2 		lsr	r2, r2, r3
 1314 05a4 7B68     		ldr	r3, [r7, #4]
 1315 05a6 DA60     		str	r2, [r3, #12]
1025:../SPL/src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1316              		.loc 1 1026 0
 1317 05a8 0D4B     		ldr	r3, .L86
 1318 05aa 5B68     		ldr	r3, [r3, #4]
 1319 05ac 03F44043 		and	r3, r3, #49152
 1320 05b0 FB61     		str	r3, [r7, #28]
1027:../SPL/src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1321              		.loc 1 1027 0
 1322 05b2 FB69     		ldr	r3, [r7, #28]
 1323 05b4 4FEA9333 		lsr	r3, r3, #14
 1324 05b8 FB61     		str	r3, [r7, #28]
1028:../SPL/src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1325              		.loc 1 1028 0
 1326 05ba 0D4A     		ldr	r2, .L86+16
 1327 05bc FB69     		ldr	r3, [r7, #28]
 1328 05be D318     		adds	r3, r2, r3
 1329 05c0 1B78     		ldrb	r3, [r3, #0]
 1330 05c2 DBB2     		uxtb	r3, r3
 1331 05c4 3B61     		str	r3, [r7, #16]
1029:../SPL/src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../SPL/src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1332              		.loc 1 1030 0
 1333 05c6 7B68     		ldr	r3, [r7, #4]
 1334 05c8 DA68     		ldr	r2, [r3, #12]
 1335 05ca 3B69     		ldr	r3, [r7, #16]
 1336 05cc B2FBF3F2 		udiv	r2, r2, r3
 1337 05d0 7B68     		ldr	r3, [r7, #4]
 1338 05d2 1A61     		str	r2, [r3, #16]
1031:../SPL/src/stm32f10x_rcc.c **** }
 1339              		.loc 1 1031 0
 1340 05d4 07F12407 		add	r7, r7, #36
 1341 05d8 BD46     		mov	sp, r7
 1342 05da 80BC     		pop	{r7}
 1343 05dc 7047     		bx	lr
 1344              	.L87:
 1345 05de 00BF     		.align	2
 1346              	.L86:
 1347 05e0 00100240 		.word	1073876992
 1348 05e4 00127A00 		.word	8000000
 1349 05e8 00093D00 		.word	4000000
 1350 05ec 00000000 		.word	APBAHBPrescTable
 1351 05f0 10000000 		.word	ADCPrescTable
 1352              		.cfi_endproc
 1353              	.LFE49:
 1355              		.align	2
 1356              		.global	RCC_AHBPeriphClockCmd
 1357              		.thumb
 1358              		.thumb_func
 1360              	RCC_AHBPeriphClockCmd:
 1361              	.LFB50:
1032:../SPL/src/stm32f10x_rcc.c **** 
1033:../SPL/src/stm32f10x_rcc.c **** /**
1034:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../SPL/src/stm32f10x_rcc.c ****   *   
1037:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../SPL/src/stm32f10x_rcc.c ****   *   of the following values:        
1039:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../SPL/src/stm32f10x_rcc.c ****   * 
1049:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../SPL/src/stm32f10x_rcc.c ****   *   following values:        
1051:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../SPL/src/stm32f10x_rcc.c ****   *   
1059:../SPL/src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1063:../SPL/src/stm32f10x_rcc.c ****   */
1064:../SPL/src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../SPL/src/stm32f10x_rcc.c **** {
 1362              		.loc 1 1065 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 8
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366              		@ link register save eliminated.
 1367 05f4 80B4     		push	{r7}
 1368              	.LCFI61:
 1369              		.cfi_def_cfa_offset 4
 1370              		.cfi_offset 7, -4
 1371 05f6 83B0     		sub	sp, sp, #12
 1372              	.LCFI62:
 1373              		.cfi_def_cfa_offset 16
 1374 05f8 00AF     		add	r7, sp, #0
 1375              	.LCFI63:
 1376              		.cfi_def_cfa_register 7
 1377 05fa 7860     		str	r0, [r7, #4]
 1378 05fc 0B46     		mov	r3, r1
 1379 05fe FB70     		strb	r3, [r7, #3]
1066:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1068:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1069:../SPL/src/stm32f10x_rcc.c **** 
1070:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1380              		.loc 1 1070 0
 1381 0600 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1382 0602 002B     		cmp	r3, #0
 1383 0604 06D0     		beq	.L89
1071:../SPL/src/stm32f10x_rcc.c ****   {
1072:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1384              		.loc 1 1072 0
 1385 0606 0A4B     		ldr	r3, .L91
 1386 0608 094A     		ldr	r2, .L91
 1387 060a 5169     		ldr	r1, [r2, #20]
 1388 060c 7A68     		ldr	r2, [r7, #4]
 1389 060e 0A43     		orrs	r2, r2, r1
 1390 0610 5A61     		str	r2, [r3, #20]
 1391 0612 07E0     		b	.L88
 1392              	.L89:
1073:../SPL/src/stm32f10x_rcc.c ****   }
1074:../SPL/src/stm32f10x_rcc.c ****   else
1075:../SPL/src/stm32f10x_rcc.c ****   {
1076:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1393              		.loc 1 1076 0
 1394 0614 064B     		ldr	r3, .L91
 1395 0616 064A     		ldr	r2, .L91
 1396 0618 5169     		ldr	r1, [r2, #20]
 1397 061a 7A68     		ldr	r2, [r7, #4]
 1398 061c 6FEA0202 		mvn	r2, r2
 1399 0620 0A40     		ands	r2, r2, r1
 1400 0622 5A61     		str	r2, [r3, #20]
 1401              	.L88:
1077:../SPL/src/stm32f10x_rcc.c ****   }
1078:../SPL/src/stm32f10x_rcc.c **** }
 1402              		.loc 1 1078 0
 1403 0624 07F10C07 		add	r7, r7, #12
 1404 0628 BD46     		mov	sp, r7
 1405 062a 80BC     		pop	{r7}
 1406 062c 7047     		bx	lr
 1407              	.L92:
 1408 062e 00BF     		.align	2
 1409              	.L91:
 1410 0630 00100240 		.word	1073876992
 1411              		.cfi_endproc
 1412              	.LFE50:
 1414              		.align	2
 1415              		.global	RCC_APB2PeriphClockCmd
 1416              		.thumb
 1417              		.thumb_func
 1419              	RCC_APB2PeriphClockCmd:
 1420              	.LFB51:
1079:../SPL/src/stm32f10x_rcc.c **** 
1080:../SPL/src/stm32f10x_rcc.c **** /**
1081:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1094:../SPL/src/stm32f10x_rcc.c ****   */
1095:../SPL/src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../SPL/src/stm32f10x_rcc.c **** {
 1421              		.loc 1 1096 0
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 8
 1424              		@ frame_needed = 1, uses_anonymous_args = 0
 1425              		@ link register save eliminated.
 1426 0634 80B4     		push	{r7}
 1427              	.LCFI64:
 1428              		.cfi_def_cfa_offset 4
 1429              		.cfi_offset 7, -4
 1430 0636 83B0     		sub	sp, sp, #12
 1431              	.LCFI65:
 1432              		.cfi_def_cfa_offset 16
 1433 0638 00AF     		add	r7, sp, #0
 1434              	.LCFI66:
 1435              		.cfi_def_cfa_register 7
 1436 063a 7860     		str	r0, [r7, #4]
 1437 063c 0B46     		mov	r3, r1
 1438 063e FB70     		strb	r3, [r7, #3]
1097:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1099:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1439              		.loc 1 1100 0
 1440 0640 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1441 0642 002B     		cmp	r3, #0
 1442 0644 06D0     		beq	.L94
1101:../SPL/src/stm32f10x_rcc.c ****   {
1102:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1443              		.loc 1 1102 0
 1444 0646 0A4B     		ldr	r3, .L96
 1445 0648 094A     		ldr	r2, .L96
 1446 064a 9169     		ldr	r1, [r2, #24]
 1447 064c 7A68     		ldr	r2, [r7, #4]
 1448 064e 0A43     		orrs	r2, r2, r1
 1449 0650 9A61     		str	r2, [r3, #24]
 1450 0652 07E0     		b	.L93
 1451              	.L94:
1103:../SPL/src/stm32f10x_rcc.c ****   }
1104:../SPL/src/stm32f10x_rcc.c ****   else
1105:../SPL/src/stm32f10x_rcc.c ****   {
1106:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1452              		.loc 1 1106 0
 1453 0654 064B     		ldr	r3, .L96
 1454 0656 064A     		ldr	r2, .L96
 1455 0658 9169     		ldr	r1, [r2, #24]
 1456 065a 7A68     		ldr	r2, [r7, #4]
 1457 065c 6FEA0202 		mvn	r2, r2
 1458 0660 0A40     		ands	r2, r2, r1
 1459 0662 9A61     		str	r2, [r3, #24]
 1460              	.L93:
1107:../SPL/src/stm32f10x_rcc.c ****   }
1108:../SPL/src/stm32f10x_rcc.c **** }
 1461              		.loc 1 1108 0
 1462 0664 07F10C07 		add	r7, r7, #12
 1463 0668 BD46     		mov	sp, r7
 1464 066a 80BC     		pop	{r7}
 1465 066c 7047     		bx	lr
 1466              	.L97:
 1467 066e 00BF     		.align	2
 1468              	.L96:
 1469 0670 00100240 		.word	1073876992
 1470              		.cfi_endproc
 1471              	.LFE51:
 1473              		.align	2
 1474              		.global	RCC_APB1PeriphClockCmd
 1475              		.thumb
 1476              		.thumb_func
 1478              	RCC_APB1PeriphClockCmd:
 1479              	.LFB52:
1109:../SPL/src/stm32f10x_rcc.c **** 
1110:../SPL/src/stm32f10x_rcc.c **** /**
1111:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1125:../SPL/src/stm32f10x_rcc.c ****   */
1126:../SPL/src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../SPL/src/stm32f10x_rcc.c **** {
 1480              		.loc 1 1127 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 8
 1483              		@ frame_needed = 1, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485 0674 80B4     		push	{r7}
 1486              	.LCFI67:
 1487              		.cfi_def_cfa_offset 4
 1488              		.cfi_offset 7, -4
 1489 0676 83B0     		sub	sp, sp, #12
 1490              	.LCFI68:
 1491              		.cfi_def_cfa_offset 16
 1492 0678 00AF     		add	r7, sp, #0
 1493              	.LCFI69:
 1494              		.cfi_def_cfa_register 7
 1495 067a 7860     		str	r0, [r7, #4]
 1496 067c 0B46     		mov	r3, r1
 1497 067e FB70     		strb	r3, [r7, #3]
1128:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1130:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1498              		.loc 1 1131 0
 1499 0680 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1500 0682 002B     		cmp	r3, #0
 1501 0684 06D0     		beq	.L99
1132:../SPL/src/stm32f10x_rcc.c ****   {
1133:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1502              		.loc 1 1133 0
 1503 0686 0A4B     		ldr	r3, .L101
 1504 0688 094A     		ldr	r2, .L101
 1505 068a D169     		ldr	r1, [r2, #28]
 1506 068c 7A68     		ldr	r2, [r7, #4]
 1507 068e 0A43     		orrs	r2, r2, r1
 1508 0690 DA61     		str	r2, [r3, #28]
 1509 0692 07E0     		b	.L98
 1510              	.L99:
1134:../SPL/src/stm32f10x_rcc.c ****   }
1135:../SPL/src/stm32f10x_rcc.c ****   else
1136:../SPL/src/stm32f10x_rcc.c ****   {
1137:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1511              		.loc 1 1137 0
 1512 0694 064B     		ldr	r3, .L101
 1513 0696 064A     		ldr	r2, .L101
 1514 0698 D169     		ldr	r1, [r2, #28]
 1515 069a 7A68     		ldr	r2, [r7, #4]
 1516 069c 6FEA0202 		mvn	r2, r2
 1517 06a0 0A40     		ands	r2, r2, r1
 1518 06a2 DA61     		str	r2, [r3, #28]
 1519              	.L98:
1138:../SPL/src/stm32f10x_rcc.c ****   }
1139:../SPL/src/stm32f10x_rcc.c **** }
 1520              		.loc 1 1139 0
 1521 06a4 07F10C07 		add	r7, r7, #12
 1522 06a8 BD46     		mov	sp, r7
 1523 06aa 80BC     		pop	{r7}
 1524 06ac 7047     		bx	lr
 1525              	.L102:
 1526 06ae 00BF     		.align	2
 1527              	.L101:
 1528 06b0 00100240 		.word	1073876992
 1529              		.cfi_endproc
 1530              	.LFE52:
 1532              		.align	2
 1533              		.global	RCC_APB2PeriphResetCmd
 1534              		.thumb
 1535              		.thumb_func
 1537              	RCC_APB2PeriphResetCmd:
 1538              	.LFB53:
1140:../SPL/src/stm32f10x_rcc.c **** 
1141:../SPL/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../SPL/src/stm32f10x_rcc.c **** /**
1143:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../SPL/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1152:../SPL/src/stm32f10x_rcc.c ****   */
1153:../SPL/src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../SPL/src/stm32f10x_rcc.c **** {
1155:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../SPL/src/stm32f10x_rcc.c **** 
1159:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../SPL/src/stm32f10x_rcc.c ****   {
1161:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../SPL/src/stm32f10x_rcc.c ****   }
1163:../SPL/src/stm32f10x_rcc.c ****   else
1164:../SPL/src/stm32f10x_rcc.c ****   {
1165:../SPL/src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../SPL/src/stm32f10x_rcc.c ****   }
1167:../SPL/src/stm32f10x_rcc.c **** }
1168:../SPL/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../SPL/src/stm32f10x_rcc.c **** 
1170:../SPL/src/stm32f10x_rcc.c **** /**
1171:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1184:../SPL/src/stm32f10x_rcc.c ****   */
1185:../SPL/src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../SPL/src/stm32f10x_rcc.c **** {
 1539              		.loc 1 1186 0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 8
 1542              		@ frame_needed = 1, uses_anonymous_args = 0
 1543              		@ link register save eliminated.
 1544 06b4 80B4     		push	{r7}
 1545              	.LCFI70:
 1546              		.cfi_def_cfa_offset 4
 1547              		.cfi_offset 7, -4
 1548 06b6 83B0     		sub	sp, sp, #12
 1549              	.LCFI71:
 1550              		.cfi_def_cfa_offset 16
 1551 06b8 00AF     		add	r7, sp, #0
 1552              	.LCFI72:
 1553              		.cfi_def_cfa_register 7
 1554 06ba 7860     		str	r0, [r7, #4]
 1555 06bc 0B46     		mov	r3, r1
 1556 06be FB70     		strb	r3, [r7, #3]
1187:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1189:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1190:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1557              		.loc 1 1190 0
 1558 06c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1559 06c2 002B     		cmp	r3, #0
 1560 06c4 06D0     		beq	.L104
1191:../SPL/src/stm32f10x_rcc.c ****   {
1192:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1561              		.loc 1 1192 0
 1562 06c6 0A4B     		ldr	r3, .L106
 1563 06c8 094A     		ldr	r2, .L106
 1564 06ca D168     		ldr	r1, [r2, #12]
 1565 06cc 7A68     		ldr	r2, [r7, #4]
 1566 06ce 0A43     		orrs	r2, r2, r1
 1567 06d0 DA60     		str	r2, [r3, #12]
 1568 06d2 07E0     		b	.L103
 1569              	.L104:
1193:../SPL/src/stm32f10x_rcc.c ****   }
1194:../SPL/src/stm32f10x_rcc.c ****   else
1195:../SPL/src/stm32f10x_rcc.c ****   {
1196:../SPL/src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1570              		.loc 1 1196 0
 1571 06d4 064B     		ldr	r3, .L106
 1572 06d6 064A     		ldr	r2, .L106
 1573 06d8 D168     		ldr	r1, [r2, #12]
 1574 06da 7A68     		ldr	r2, [r7, #4]
 1575 06dc 6FEA0202 		mvn	r2, r2
 1576 06e0 0A40     		ands	r2, r2, r1
 1577 06e2 DA60     		str	r2, [r3, #12]
 1578              	.L103:
1197:../SPL/src/stm32f10x_rcc.c ****   }
1198:../SPL/src/stm32f10x_rcc.c **** }
 1579              		.loc 1 1198 0
 1580 06e4 07F10C07 		add	r7, r7, #12
 1581 06e8 BD46     		mov	sp, r7
 1582 06ea 80BC     		pop	{r7}
 1583 06ec 7047     		bx	lr
 1584              	.L107:
 1585 06ee 00BF     		.align	2
 1586              	.L106:
 1587 06f0 00100240 		.word	1073876992
 1588              		.cfi_endproc
 1589              	.LFE53:
 1591              		.align	2
 1592              		.global	RCC_APB1PeriphResetCmd
 1593              		.thumb
 1594              		.thumb_func
 1596              	RCC_APB1PeriphResetCmd:
 1597              	.LFB54:
1199:../SPL/src/stm32f10x_rcc.c **** 
1200:../SPL/src/stm32f10x_rcc.c **** /**
1201:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../SPL/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1215:../SPL/src/stm32f10x_rcc.c ****   */
1216:../SPL/src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../SPL/src/stm32f10x_rcc.c **** {
 1598              		.loc 1 1217 0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 8
 1601              		@ frame_needed = 1, uses_anonymous_args = 0
 1602              		@ link register save eliminated.
 1603 06f4 80B4     		push	{r7}
 1604              	.LCFI73:
 1605              		.cfi_def_cfa_offset 4
 1606              		.cfi_offset 7, -4
 1607 06f6 83B0     		sub	sp, sp, #12
 1608              	.LCFI74:
 1609              		.cfi_def_cfa_offset 16
 1610 06f8 00AF     		add	r7, sp, #0
 1611              	.LCFI75:
 1612              		.cfi_def_cfa_register 7
 1613 06fa 7860     		str	r0, [r7, #4]
 1614 06fc 0B46     		mov	r3, r1
 1615 06fe FB70     		strb	r3, [r7, #3]
1218:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1220:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1221:../SPL/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1616              		.loc 1 1221 0
 1617 0700 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1618 0702 002B     		cmp	r3, #0
 1619 0704 06D0     		beq	.L109
1222:../SPL/src/stm32f10x_rcc.c ****   {
1223:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1620              		.loc 1 1223 0
 1621 0706 0A4B     		ldr	r3, .L111
 1622 0708 094A     		ldr	r2, .L111
 1623 070a 1169     		ldr	r1, [r2, #16]
 1624 070c 7A68     		ldr	r2, [r7, #4]
 1625 070e 0A43     		orrs	r2, r2, r1
 1626 0710 1A61     		str	r2, [r3, #16]
 1627 0712 07E0     		b	.L108
 1628              	.L109:
1224:../SPL/src/stm32f10x_rcc.c ****   }
1225:../SPL/src/stm32f10x_rcc.c ****   else
1226:../SPL/src/stm32f10x_rcc.c ****   {
1227:../SPL/src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1629              		.loc 1 1227 0
 1630 0714 064B     		ldr	r3, .L111
 1631 0716 064A     		ldr	r2, .L111
 1632 0718 1169     		ldr	r1, [r2, #16]
 1633 071a 7A68     		ldr	r2, [r7, #4]
 1634 071c 6FEA0202 		mvn	r2, r2
 1635 0720 0A40     		ands	r2, r2, r1
 1636 0722 1A61     		str	r2, [r3, #16]
 1637              	.L108:
1228:../SPL/src/stm32f10x_rcc.c ****   }
1229:../SPL/src/stm32f10x_rcc.c **** }
 1638              		.loc 1 1229 0
 1639 0724 07F10C07 		add	r7, r7, #12
 1640 0728 BD46     		mov	sp, r7
 1641 072a 80BC     		pop	{r7}
 1642 072c 7047     		bx	lr
 1643              	.L112:
 1644 072e 00BF     		.align	2
 1645              	.L111:
 1646 0730 00100240 		.word	1073876992
 1647              		.cfi_endproc
 1648              	.LFE54:
 1650              		.align	2
 1651              		.global	RCC_BackupResetCmd
 1652              		.thumb
 1653              		.thumb_func
 1655              	RCC_BackupResetCmd:
 1656              	.LFB55:
1230:../SPL/src/stm32f10x_rcc.c **** 
1231:../SPL/src/stm32f10x_rcc.c **** /**
1232:../SPL/src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1236:../SPL/src/stm32f10x_rcc.c ****   */
1237:../SPL/src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../SPL/src/stm32f10x_rcc.c **** {
 1657              		.loc 1 1238 0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 8
 1660              		@ frame_needed = 1, uses_anonymous_args = 0
 1661              		@ link register save eliminated.
 1662 0734 80B4     		push	{r7}
 1663              	.LCFI76:
 1664              		.cfi_def_cfa_offset 4
 1665              		.cfi_offset 7, -4
 1666 0736 83B0     		sub	sp, sp, #12
 1667              	.LCFI77:
 1668              		.cfi_def_cfa_offset 16
 1669 0738 00AF     		add	r7, sp, #0
 1670              	.LCFI78:
 1671              		.cfi_def_cfa_register 7
 1672 073a 0346     		mov	r3, r0
 1673 073c FB71     		strb	r3, [r7, #7]
1239:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1241:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1674              		.loc 1 1241 0
 1675 073e 044B     		ldr	r3, .L114
 1676 0740 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1677 0742 1A60     		str	r2, [r3, #0]
1242:../SPL/src/stm32f10x_rcc.c **** }
 1678              		.loc 1 1242 0
 1679 0744 07F10C07 		add	r7, r7, #12
 1680 0748 BD46     		mov	sp, r7
 1681 074a 80BC     		pop	{r7}
 1682 074c 7047     		bx	lr
 1683              	.L115:
 1684 074e 00BF     		.align	2
 1685              	.L114:
 1686 0750 40044242 		.word	1111622720
 1687              		.cfi_endproc
 1688              	.LFE55:
 1690              		.align	2
 1691              		.global	RCC_ClockSecuritySystemCmd
 1692              		.thumb
 1693              		.thumb_func
 1695              	RCC_ClockSecuritySystemCmd:
 1696              	.LFB56:
1243:../SPL/src/stm32f10x_rcc.c **** 
1244:../SPL/src/stm32f10x_rcc.c **** /**
1245:../SPL/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../SPL/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../SPL/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1249:../SPL/src/stm32f10x_rcc.c ****   */
1250:../SPL/src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../SPL/src/stm32f10x_rcc.c **** {
 1697              		.loc 1 1251 0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 8
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
 1701              		@ link register save eliminated.
 1702 0754 80B4     		push	{r7}
 1703              	.LCFI79:
 1704              		.cfi_def_cfa_offset 4
 1705              		.cfi_offset 7, -4
 1706 0756 83B0     		sub	sp, sp, #12
 1707              	.LCFI80:
 1708              		.cfi_def_cfa_offset 16
 1709 0758 00AF     		add	r7, sp, #0
 1710              	.LCFI81:
 1711              		.cfi_def_cfa_register 7
 1712 075a 0346     		mov	r3, r0
 1713 075c FB71     		strb	r3, [r7, #7]
1252:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1254:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1714              		.loc 1 1254 0
 1715 075e 044B     		ldr	r3, .L117
 1716 0760 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1717 0762 1A60     		str	r2, [r3, #0]
1255:../SPL/src/stm32f10x_rcc.c **** }
 1718              		.loc 1 1255 0
 1719 0764 07F10C07 		add	r7, r7, #12
 1720 0768 BD46     		mov	sp, r7
 1721 076a 80BC     		pop	{r7}
 1722 076c 7047     		bx	lr
 1723              	.L118:
 1724 076e 00BF     		.align	2
 1725              	.L117:
 1726 0770 4C004242 		.word	1111621708
 1727              		.cfi_endproc
 1728              	.LFE56:
 1730              		.align	2
 1731              		.global	RCC_MCOConfig
 1732              		.thumb
 1733              		.thumb_func
 1735              	RCC_MCOConfig:
 1736              	.LFB57:
1256:../SPL/src/stm32f10x_rcc.c **** 
1257:../SPL/src/stm32f10x_rcc.c **** /**
1258:../SPL/src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../SPL/src/stm32f10x_rcc.c ****   *   
1261:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../SPL/src/stm32f10x_rcc.c ****   *   following values:       
1263:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../SPL/src/stm32f10x_rcc.c ****   * 
1273:../SPL/src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../SPL/src/stm32f10x_rcc.c ****   *   
1280:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1281:../SPL/src/stm32f10x_rcc.c ****   */
1282:../SPL/src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../SPL/src/stm32f10x_rcc.c **** {
 1737              		.loc 1 1283 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 8
 1740              		@ frame_needed = 1, uses_anonymous_args = 0
 1741              		@ link register save eliminated.
 1742 0774 80B4     		push	{r7}
 1743              	.LCFI82:
 1744              		.cfi_def_cfa_offset 4
 1745              		.cfi_offset 7, -4
 1746 0776 83B0     		sub	sp, sp, #12
 1747              	.LCFI83:
 1748              		.cfi_def_cfa_offset 16
 1749 0778 00AF     		add	r7, sp, #0
 1750              	.LCFI84:
 1751              		.cfi_def_cfa_register 7
 1752 077a 0346     		mov	r3, r0
 1753 077c FB71     		strb	r3, [r7, #7]
1284:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1286:../SPL/src/stm32f10x_rcc.c **** 
1287:../SPL/src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1754              		.loc 1 1288 0
 1755 077e 044B     		ldr	r3, .L120
 1756 0780 FA79     		ldrb	r2, [r7, #7]
 1757 0782 1A70     		strb	r2, [r3, #0]
1289:../SPL/src/stm32f10x_rcc.c **** }
 1758              		.loc 1 1289 0
 1759 0784 07F10C07 		add	r7, r7, #12
 1760 0788 BD46     		mov	sp, r7
 1761 078a 80BC     		pop	{r7}
 1762 078c 7047     		bx	lr
 1763              	.L121:
 1764 078e 00BF     		.align	2
 1765              	.L120:
 1766 0790 07100240 		.word	1073876999
 1767              		.cfi_endproc
 1768              	.LFE57:
 1770              		.align	2
 1771              		.global	RCC_GetFlagStatus
 1772              		.thumb
 1773              		.thumb_func
 1775              	RCC_GetFlagStatus:
 1776              	.LFB58:
1290:../SPL/src/stm32f10x_rcc.c **** 
1291:../SPL/src/stm32f10x_rcc.c **** /**
1292:../SPL/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../SPL/src/stm32f10x_rcc.c ****   *   
1295:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../SPL/src/stm32f10x_rcc.c ****   *   following values:
1297:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../SPL/src/stm32f10x_rcc.c ****   * 
1311:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../SPL/src/stm32f10x_rcc.c ****   *   
1324:../SPL/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../SPL/src/stm32f10x_rcc.c ****   */
1326:../SPL/src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../SPL/src/stm32f10x_rcc.c **** {
 1777              		.loc 1 1327 0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 24
 1780              		@ frame_needed = 1, uses_anonymous_args = 0
 1781              		@ link register save eliminated.
 1782 0794 80B4     		push	{r7}
 1783              	.LCFI85:
 1784              		.cfi_def_cfa_offset 4
 1785              		.cfi_offset 7, -4
 1786 0796 87B0     		sub	sp, sp, #28
 1787              	.LCFI86:
 1788              		.cfi_def_cfa_offset 32
 1789 0798 00AF     		add	r7, sp, #0
 1790              	.LCFI87:
 1791              		.cfi_def_cfa_register 7
 1792 079a 0346     		mov	r3, r0
 1793 079c FB71     		strb	r3, [r7, #7]
1328:../SPL/src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 1794              		.loc 1 1328 0
 1795 079e 4FF00003 		mov	r3, #0
 1796 07a2 FB60     		str	r3, [r7, #12]
1329:../SPL/src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 1797              		.loc 1 1329 0
 1798 07a4 4FF00003 		mov	r3, #0
 1799 07a8 7B61     		str	r3, [r7, #20]
1330:../SPL/src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 1800              		.loc 1 1330 0
 1801 07aa 4FF00003 		mov	r3, #0
 1802 07ae FB74     		strb	r3, [r7, #19]
1331:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1333:../SPL/src/stm32f10x_rcc.c **** 
1334:../SPL/src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1803              		.loc 1 1335 0
 1804 07b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1805 07b2 4FEA5313 		lsr	r3, r3, #5
 1806 07b6 DBB2     		uxtb	r3, r3
 1807 07b8 FB60     		str	r3, [r7, #12]
1336:../SPL/src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1808              		.loc 1 1336 0
 1809 07ba FB68     		ldr	r3, [r7, #12]
 1810 07bc 012B     		cmp	r3, #1
 1811 07be 03D1     		bne	.L123
1337:../SPL/src/stm32f10x_rcc.c ****   {
1338:../SPL/src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 1812              		.loc 1 1338 0
 1813 07c0 134B     		ldr	r3, .L129
 1814 07c2 1B68     		ldr	r3, [r3, #0]
 1815 07c4 7B61     		str	r3, [r7, #20]
 1816 07c6 09E0     		b	.L124
 1817              	.L123:
1339:../SPL/src/stm32f10x_rcc.c ****   }
1340:../SPL/src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1818              		.loc 1 1340 0
 1819 07c8 FB68     		ldr	r3, [r7, #12]
 1820 07ca 022B     		cmp	r3, #2
 1821 07cc 03D1     		bne	.L125
1341:../SPL/src/stm32f10x_rcc.c ****   {
1342:../SPL/src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 1822              		.loc 1 1342 0
 1823 07ce 104B     		ldr	r3, .L129
 1824 07d0 1B6A     		ldr	r3, [r3, #32]
 1825 07d2 7B61     		str	r3, [r7, #20]
 1826 07d4 02E0     		b	.L124
 1827              	.L125:
1343:../SPL/src/stm32f10x_rcc.c ****   }
1344:../SPL/src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../SPL/src/stm32f10x_rcc.c ****   {
1346:../SPL/src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1828              		.loc 1 1346 0
 1829 07d6 0E4B     		ldr	r3, .L129
 1830 07d8 5B6A     		ldr	r3, [r3, #36]
 1831 07da 7B61     		str	r3, [r7, #20]
 1832              	.L124:
1347:../SPL/src/stm32f10x_rcc.c ****   }
1348:../SPL/src/stm32f10x_rcc.c **** 
1349:../SPL/src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../SPL/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1833              		.loc 1 1350 0
 1834 07dc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1835 07de 03F01F03 		and	r3, r3, #31
 1836 07e2 FB60     		str	r3, [r7, #12]
1351:../SPL/src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1837              		.loc 1 1351 0
 1838 07e4 FB68     		ldr	r3, [r7, #12]
 1839 07e6 7A69     		ldr	r2, [r7, #20]
 1840 07e8 22FA03F3 		lsr	r3, r2, r3
 1841 07ec 03F00103 		and	r3, r3, #1
 1842 07f0 002B     		cmp	r3, #0
 1843 07f2 03D0     		beq	.L126
1352:../SPL/src/stm32f10x_rcc.c ****   {
1353:../SPL/src/stm32f10x_rcc.c ****     bitstatus = SET;
 1844              		.loc 1 1353 0
 1845 07f4 4FF00103 		mov	r3, #1
 1846 07f8 FB74     		strb	r3, [r7, #19]
 1847 07fa 02E0     		b	.L127
 1848              	.L126:
1354:../SPL/src/stm32f10x_rcc.c ****   }
1355:../SPL/src/stm32f10x_rcc.c ****   else
1356:../SPL/src/stm32f10x_rcc.c ****   {
1357:../SPL/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1849              		.loc 1 1357 0
 1850 07fc 4FF00003 		mov	r3, #0
 1851 0800 FB74     		strb	r3, [r7, #19]
 1852              	.L127:
1358:../SPL/src/stm32f10x_rcc.c ****   }
1359:../SPL/src/stm32f10x_rcc.c **** 
1360:../SPL/src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../SPL/src/stm32f10x_rcc.c ****   return bitstatus;
 1853              		.loc 1 1361 0
 1854 0802 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1362:../SPL/src/stm32f10x_rcc.c **** }
 1855              		.loc 1 1362 0
 1856 0804 1846     		mov	r0, r3
 1857 0806 07F11C07 		add	r7, r7, #28
 1858 080a BD46     		mov	sp, r7
 1859 080c 80BC     		pop	{r7}
 1860 080e 7047     		bx	lr
 1861              	.L130:
 1862              		.align	2
 1863              	.L129:
 1864 0810 00100240 		.word	1073876992
 1865              		.cfi_endproc
 1866              	.LFE58:
 1868              		.align	2
 1869              		.global	RCC_ClearFlag
 1870              		.thumb
 1871              		.thumb_func
 1873              	RCC_ClearFlag:
 1874              	.LFB59:
1363:../SPL/src/stm32f10x_rcc.c **** 
1364:../SPL/src/stm32f10x_rcc.c **** /**
1365:../SPL/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../SPL/src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../SPL/src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../SPL/src/stm32f10x_rcc.c ****   * @param  None
1369:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1370:../SPL/src/stm32f10x_rcc.c ****   */
1371:../SPL/src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../SPL/src/stm32f10x_rcc.c **** {
 1875              		.loc 1 1372 0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 1, uses_anonymous_args = 0
 1879              		@ link register save eliminated.
 1880 0814 80B4     		push	{r7}
 1881              	.LCFI88:
 1882              		.cfi_def_cfa_offset 4
 1883              		.cfi_offset 7, -4
 1884 0816 00AF     		add	r7, sp, #0
 1885              	.LCFI89:
 1886              		.cfi_def_cfa_register 7
1373:../SPL/src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../SPL/src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 1887              		.loc 1 1374 0
 1888 0818 044B     		ldr	r3, .L132
 1889 081a 044A     		ldr	r2, .L132
 1890 081c 526A     		ldr	r2, [r2, #36]
 1891 081e 42F08072 		orr	r2, r2, #16777216
 1892 0822 5A62     		str	r2, [r3, #36]
1375:../SPL/src/stm32f10x_rcc.c **** }
 1893              		.loc 1 1375 0
 1894 0824 BD46     		mov	sp, r7
 1895 0826 80BC     		pop	{r7}
 1896 0828 7047     		bx	lr
 1897              	.L133:
 1898 082a 00BF     		.align	2
 1899              	.L132:
 1900 082c 00100240 		.word	1073876992
 1901              		.cfi_endproc
 1902              	.LFE59:
 1904              		.align	2
 1905              		.global	RCC_GetITStatus
 1906              		.thumb
 1907              		.thumb_func
 1909              	RCC_GetITStatus:
 1910              	.LFB60:
1376:../SPL/src/stm32f10x_rcc.c **** 
1377:../SPL/src/stm32f10x_rcc.c **** /**
1378:../SPL/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../SPL/src/stm32f10x_rcc.c ****   *   
1381:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../SPL/src/stm32f10x_rcc.c ****   *   following values:
1383:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../SPL/src/stm32f10x_rcc.c ****   * 
1392:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../SPL/src/stm32f10x_rcc.c ****   *   
1400:../SPL/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../SPL/src/stm32f10x_rcc.c ****   */
1402:../SPL/src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../SPL/src/stm32f10x_rcc.c **** {
 1911              		.loc 1 1403 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 16
 1914              		@ frame_needed = 1, uses_anonymous_args = 0
 1915              		@ link register save eliminated.
 1916 0830 80B4     		push	{r7}
 1917              	.LCFI90:
 1918              		.cfi_def_cfa_offset 4
 1919              		.cfi_offset 7, -4
 1920 0832 85B0     		sub	sp, sp, #20
 1921              	.LCFI91:
 1922              		.cfi_def_cfa_offset 24
 1923 0834 00AF     		add	r7, sp, #0
 1924              	.LCFI92:
 1925              		.cfi_def_cfa_register 7
 1926 0836 0346     		mov	r3, r0
 1927 0838 FB71     		strb	r3, [r7, #7]
1404:../SPL/src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 1928              		.loc 1 1404 0
 1929 083a 4FF00003 		mov	r3, #0
 1930 083e FB73     		strb	r3, [r7, #15]
1405:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1407:../SPL/src/stm32f10x_rcc.c **** 
1408:../SPL/src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../SPL/src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1931              		.loc 1 1409 0
 1932 0840 094B     		ldr	r3, .L138
 1933 0842 9A68     		ldr	r2, [r3, #8]
 1934 0844 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1935 0846 1340     		ands	r3, r3, r2
 1936 0848 002B     		cmp	r3, #0
 1937 084a 03D0     		beq	.L135
1410:../SPL/src/stm32f10x_rcc.c ****   {
1411:../SPL/src/stm32f10x_rcc.c ****     bitstatus = SET;
 1938              		.loc 1 1411 0
 1939 084c 4FF00103 		mov	r3, #1
 1940 0850 FB73     		strb	r3, [r7, #15]
 1941 0852 02E0     		b	.L136
 1942              	.L135:
1412:../SPL/src/stm32f10x_rcc.c ****   }
1413:../SPL/src/stm32f10x_rcc.c ****   else
1414:../SPL/src/stm32f10x_rcc.c ****   {
1415:../SPL/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1943              		.loc 1 1415 0
 1944 0854 4FF00003 		mov	r3, #0
 1945 0858 FB73     		strb	r3, [r7, #15]
 1946              	.L136:
1416:../SPL/src/stm32f10x_rcc.c ****   }
1417:../SPL/src/stm32f10x_rcc.c **** 
1418:../SPL/src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../SPL/src/stm32f10x_rcc.c ****   return  bitstatus;
 1947              		.loc 1 1419 0
 1948 085a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1420:../SPL/src/stm32f10x_rcc.c **** }
 1949              		.loc 1 1420 0
 1950 085c 1846     		mov	r0, r3
 1951 085e 07F11407 		add	r7, r7, #20
 1952 0862 BD46     		mov	sp, r7
 1953 0864 80BC     		pop	{r7}
 1954 0866 7047     		bx	lr
 1955              	.L139:
 1956              		.align	2
 1957              	.L138:
 1958 0868 00100240 		.word	1073876992
 1959              		.cfi_endproc
 1960              	.LFE60:
 1962              		.align	2
 1963              		.global	RCC_ClearITPendingBit
 1964              		.thumb
 1965              		.thumb_func
 1967              	RCC_ClearITPendingBit:
 1968              	.LFB61:
1421:../SPL/src/stm32f10x_rcc.c **** 
1422:../SPL/src/stm32f10x_rcc.c **** /**
1423:../SPL/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../SPL/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../SPL/src/stm32f10x_rcc.c ****   *   
1426:../SPL/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../SPL/src/stm32f10x_rcc.c ****   *   of the following values:
1428:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../SPL/src/stm32f10x_rcc.c ****   * 
1437:../SPL/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../SPL/src/stm32f10x_rcc.c ****   *   following values:        
1439:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../SPL/src/stm32f10x_rcc.c ****   *   
1445:../SPL/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../SPL/src/stm32f10x_rcc.c ****   * @retval None
1447:../SPL/src/stm32f10x_rcc.c ****   */
1448:../SPL/src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../SPL/src/stm32f10x_rcc.c **** {
 1969              		.loc 1 1449 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 8
 1972              		@ frame_needed = 1, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
 1974 086c 80B4     		push	{r7}
 1975              	.LCFI93:
 1976              		.cfi_def_cfa_offset 4
 1977              		.cfi_offset 7, -4
 1978 086e 83B0     		sub	sp, sp, #12
 1979              	.LCFI94:
 1980              		.cfi_def_cfa_offset 16
 1981 0870 00AF     		add	r7, sp, #0
 1982              	.LCFI95:
 1983              		.cfi_def_cfa_register 7
 1984 0872 0346     		mov	r3, r0
 1985 0874 FB71     		strb	r3, [r7, #7]
1450:../SPL/src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../SPL/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1452:../SPL/src/stm32f10x_rcc.c **** 
1453:../SPL/src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../SPL/src/stm32f10x_rcc.c ****      pending bits */
1455:../SPL/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1986              		.loc 1 1455 0
 1987 0876 044B     		ldr	r3, .L141
 1988 0878 FA79     		ldrb	r2, [r7, #7]
 1989 087a 1A70     		strb	r2, [r3, #0]
1456:../SPL/src/stm32f10x_rcc.c **** }
 1990              		.loc 1 1456 0
 1991 087c 07F10C07 		add	r7, r7, #12
 1992 0880 BD46     		mov	sp, r7
 1993 0882 80BC     		pop	{r7}
 1994 0884 7047     		bx	lr
 1995              	.L142:
 1996 0886 00BF     		.align	2
 1997              	.L141:
 1998 0888 0A100240 		.word	1073877002
 1999              		.cfi_endproc
 2000              	.LFE61:
 2002              	.Letext0:
 2003              		.file 2 "/home/knik/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-eabi
 2004              		.file 3 "/home/knik/temp/workspace/stm32_ld_vl/CMSIS/stm32f10x.h"
 2005              		.file 4 "/home/knik/temp/workspace/stm32_ld_vl/SPL/inc/stm32f10x_rcc.h"
 2006              		.file 5 "/home/knik/temp/workspace/stm32_ld_vl/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
     /tmp/cc9LEInF.s:19     .data:00000000 $d
     /tmp/cc9LEInF.s:22     .data:00000000 APBAHBPrescTable
     /tmp/cc9LEInF.s:42     .data:00000010 ADCPrescTable
     /tmp/cc9LEInF.s:48     .text:00000000 $t
     /tmp/cc9LEInF.s:53     .text:00000000 RCC_DeInit
     /tmp/cc9LEInF.s:115    .text:0000005c $d
     /tmp/cc9LEInF.s:120    .text:00000064 $t
     /tmp/cc9LEInF.s:125    .text:00000064 RCC_HSEConfig
     /tmp/cc9LEInF.s:192    .text:000000bc $d
     /tmp/cc9LEInF.s:196    .text:000000c0 $t
     /tmp/cc9LEInF.s:201    .text:000000c0 RCC_WaitForHSEStartUp
     /tmp/cc9LEInF.s:1775   .text:00000794 RCC_GetFlagStatus
     /tmp/cc9LEInF.s:275    .text:00000124 RCC_AdjustHSICalibrationValue
     /tmp/cc9LEInF.s:323    .text:00000160 $d
     /tmp/cc9LEInF.s:327    .text:00000164 $t
     /tmp/cc9LEInF.s:332    .text:00000164 RCC_HSICmd
     /tmp/cc9LEInF.s:363    .text:00000180 $d
     /tmp/cc9LEInF.s:367    .text:00000184 $t
     /tmp/cc9LEInF.s:372    .text:00000184 RCC_PLLConfig
     /tmp/cc9LEInF.s:421    .text:000001c0 $d
     /tmp/cc9LEInF.s:425    .text:000001c4 $t
     /tmp/cc9LEInF.s:430    .text:000001c4 RCC_PLLCmd
     /tmp/cc9LEInF.s:461    .text:000001e0 $d
     /tmp/cc9LEInF.s:465    .text:000001e4 $t
     /tmp/cc9LEInF.s:470    .text:000001e4 RCC_PREDIV1Config
     /tmp/cc9LEInF.s:520    .text:00000224 $d
     /tmp/cc9LEInF.s:524    .text:00000228 $t
     /tmp/cc9LEInF.s:529    .text:00000228 RCC_SYSCLKConfig
     /tmp/cc9LEInF.s:575    .text:0000025c $d
     /tmp/cc9LEInF.s:579    .text:00000260 $t
     /tmp/cc9LEInF.s:584    .text:00000260 RCC_GetSYSCLKSource
     /tmp/cc9LEInF.s:612    .text:00000278 $d
     /tmp/cc9LEInF.s:616    .text:0000027c $t
     /tmp/cc9LEInF.s:621    .text:0000027c RCC_HCLKConfig
     /tmp/cc9LEInF.s:667    .text:000002b0 $d
     /tmp/cc9LEInF.s:671    .text:000002b4 $t
     /tmp/cc9LEInF.s:676    .text:000002b4 RCC_PCLK1Config
     /tmp/cc9LEInF.s:722    .text:000002e8 $d
     /tmp/cc9LEInF.s:726    .text:000002ec $t
     /tmp/cc9LEInF.s:731    .text:000002ec RCC_PCLK2Config
     /tmp/cc9LEInF.s:778    .text:00000324 $d
     /tmp/cc9LEInF.s:782    .text:00000328 $t
     /tmp/cc9LEInF.s:787    .text:00000328 RCC_ITConfig
     /tmp/cc9LEInF.s:843    .text:00000370 $d
     /tmp/cc9LEInF.s:847    .text:00000374 $t
     /tmp/cc9LEInF.s:852    .text:00000374 RCC_USBCLKConfig
     /tmp/cc9LEInF.s:882    .text:0000038c $d
     /tmp/cc9LEInF.s:886    .text:00000390 $t
     /tmp/cc9LEInF.s:891    .text:00000390 RCC_ADCCLKConfig
     /tmp/cc9LEInF.s:937    .text:000003c4 $d
     /tmp/cc9LEInF.s:941    .text:000003c8 $t
     /tmp/cc9LEInF.s:946    .text:000003c8 RCC_LSEConfig
     /tmp/cc9LEInF.s:1006   .text:00000410 $d
     /tmp/cc9LEInF.s:1010   .text:00000414 $t
     /tmp/cc9LEInF.s:1015   .text:00000414 RCC_LSICmd
     /tmp/cc9LEInF.s:1046   .text:00000430 $d
     /tmp/cc9LEInF.s:1050   .text:00000434 $t
     /tmp/cc9LEInF.s:1055   .text:00000434 RCC_RTCCLKConfig
     /tmp/cc9LEInF.s:1088   .text:00000454 $d
     /tmp/cc9LEInF.s:1092   .text:00000458 $t
     /tmp/cc9LEInF.s:1097   .text:00000458 RCC_RTCCLKCmd
     /tmp/cc9LEInF.s:1128   .text:00000474 $d
     /tmp/cc9LEInF.s:1132   .text:00000478 $t
     /tmp/cc9LEInF.s:1137   .text:00000478 RCC_GetClocksFreq
     /tmp/cc9LEInF.s:1347   .text:000005e0 $d
     /tmp/cc9LEInF.s:1355   .text:000005f4 $t
     /tmp/cc9LEInF.s:1360   .text:000005f4 RCC_AHBPeriphClockCmd
     /tmp/cc9LEInF.s:1410   .text:00000630 $d
     /tmp/cc9LEInF.s:1414   .text:00000634 $t
     /tmp/cc9LEInF.s:1419   .text:00000634 RCC_APB2PeriphClockCmd
     /tmp/cc9LEInF.s:1469   .text:00000670 $d
     /tmp/cc9LEInF.s:1473   .text:00000674 $t
     /tmp/cc9LEInF.s:1478   .text:00000674 RCC_APB1PeriphClockCmd
     /tmp/cc9LEInF.s:1528   .text:000006b0 $d
     /tmp/cc9LEInF.s:1532   .text:000006b4 $t
     /tmp/cc9LEInF.s:1537   .text:000006b4 RCC_APB2PeriphResetCmd
     /tmp/cc9LEInF.s:1587   .text:000006f0 $d
     /tmp/cc9LEInF.s:1591   .text:000006f4 $t
     /tmp/cc9LEInF.s:1596   .text:000006f4 RCC_APB1PeriphResetCmd
     /tmp/cc9LEInF.s:1646   .text:00000730 $d
     /tmp/cc9LEInF.s:1650   .text:00000734 $t
     /tmp/cc9LEInF.s:1655   .text:00000734 RCC_BackupResetCmd
     /tmp/cc9LEInF.s:1686   .text:00000750 $d
     /tmp/cc9LEInF.s:1690   .text:00000754 $t
     /tmp/cc9LEInF.s:1695   .text:00000754 RCC_ClockSecuritySystemCmd
     /tmp/cc9LEInF.s:1726   .text:00000770 $d
     /tmp/cc9LEInF.s:1730   .text:00000774 $t
     /tmp/cc9LEInF.s:1735   .text:00000774 RCC_MCOConfig
     /tmp/cc9LEInF.s:1766   .text:00000790 $d
     /tmp/cc9LEInF.s:1770   .text:00000794 $t
     /tmp/cc9LEInF.s:1864   .text:00000810 $d
     /tmp/cc9LEInF.s:1868   .text:00000814 $t
     /tmp/cc9LEInF.s:1873   .text:00000814 RCC_ClearFlag
     /tmp/cc9LEInF.s:1900   .text:0000082c $d
     /tmp/cc9LEInF.s:1904   .text:00000830 $t
     /tmp/cc9LEInF.s:1909   .text:00000830 RCC_GetITStatus
     /tmp/cc9LEInF.s:1958   .text:00000868 $d
     /tmp/cc9LEInF.s:1962   .text:0000086c $t
     /tmp/cc9LEInF.s:1967   .text:0000086c RCC_ClearITPendingBit
     /tmp/cc9LEInF.s:1998   .text:00000888 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.15d5e41296b380d25e233262bbc38056
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.67.b2ac3f177eed824c6a7f550d9877061e

NO UNDEFINED SYMBOLS
