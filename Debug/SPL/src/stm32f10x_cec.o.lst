   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_cec.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CEC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	CEC_DeInit:
  24              	.LFB29:
  25              		.file 1 "../SPL/src/stm32f10x_cec.c"
   1:../SPL/src/stm32f10x_cec.c **** /**
   2:../SPL/src/stm32f10x_cec.c ****   ******************************************************************************
   3:../SPL/src/stm32f10x_cec.c ****   * @file    stm32f10x_cec.c
   4:../SPL/src/stm32f10x_cec.c ****   * @author  MCD Application Team
   5:../SPL/src/stm32f10x_cec.c ****   * @version V3.5.0
   6:../SPL/src/stm32f10x_cec.c ****   * @date    11-March-2011
   7:../SPL/src/stm32f10x_cec.c ****   * @brief   This file provides all the CEC firmware functions.
   8:../SPL/src/stm32f10x_cec.c ****   ******************************************************************************
   9:../SPL/src/stm32f10x_cec.c ****   * @attention
  10:../SPL/src/stm32f10x_cec.c ****   *
  11:../SPL/src/stm32f10x_cec.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../SPL/src/stm32f10x_cec.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../SPL/src/stm32f10x_cec.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../SPL/src/stm32f10x_cec.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../SPL/src/stm32f10x_cec.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../SPL/src/stm32f10x_cec.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../SPL/src/stm32f10x_cec.c ****   *
  18:../SPL/src/stm32f10x_cec.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../SPL/src/stm32f10x_cec.c ****   ******************************************************************************
  20:../SPL/src/stm32f10x_cec.c ****   */
  21:../SPL/src/stm32f10x_cec.c **** 
  22:../SPL/src/stm32f10x_cec.c **** /* Includes ------------------------------------------------------------------*/
  23:../SPL/src/stm32f10x_cec.c **** #include "stm32f10x_cec.h"
  24:../SPL/src/stm32f10x_cec.c **** #include "stm32f10x_rcc.h"
  25:../SPL/src/stm32f10x_cec.c **** 
  26:../SPL/src/stm32f10x_cec.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../SPL/src/stm32f10x_cec.c ****   * @{
  28:../SPL/src/stm32f10x_cec.c ****   */
  29:../SPL/src/stm32f10x_cec.c **** 
  30:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC 
  31:../SPL/src/stm32f10x_cec.c ****   * @brief CEC driver modules
  32:../SPL/src/stm32f10x_cec.c ****   * @{
  33:../SPL/src/stm32f10x_cec.c ****   */
  34:../SPL/src/stm32f10x_cec.c **** 
  35:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_TypesDefinitions
  36:../SPL/src/stm32f10x_cec.c ****   * @{
  37:../SPL/src/stm32f10x_cec.c ****   */
  38:../SPL/src/stm32f10x_cec.c **** 
  39:../SPL/src/stm32f10x_cec.c **** /**
  40:../SPL/src/stm32f10x_cec.c ****   * @}
  41:../SPL/src/stm32f10x_cec.c ****   */
  42:../SPL/src/stm32f10x_cec.c **** 
  43:../SPL/src/stm32f10x_cec.c **** 
  44:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Defines
  45:../SPL/src/stm32f10x_cec.c ****   * @{
  46:../SPL/src/stm32f10x_cec.c ****   */ 
  47:../SPL/src/stm32f10x_cec.c **** 
  48:../SPL/src/stm32f10x_cec.c **** /* ------------ CEC registers bit address in the alias region ----------- */
  49:../SPL/src/stm32f10x_cec.c **** #define CEC_OFFSET                (CEC_BASE - PERIPH_BASE)
  50:../SPL/src/stm32f10x_cec.c **** 
  51:../SPL/src/stm32f10x_cec.c **** /* --- CFGR Register ---*/
  52:../SPL/src/stm32f10x_cec.c **** 
  53:../SPL/src/stm32f10x_cec.c **** /* Alias word address of PE bit */
  54:../SPL/src/stm32f10x_cec.c **** #define CFGR_OFFSET                 (CEC_OFFSET + 0x00)
  55:../SPL/src/stm32f10x_cec.c **** #define PE_BitNumber                0x00
  56:../SPL/src/stm32f10x_cec.c **** #define CFGR_PE_BB                  (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (PE_BitNumber * 4))
  57:../SPL/src/stm32f10x_cec.c **** 
  58:../SPL/src/stm32f10x_cec.c **** /* Alias word address of IE bit */
  59:../SPL/src/stm32f10x_cec.c **** #define IE_BitNumber                0x01
  60:../SPL/src/stm32f10x_cec.c **** #define CFGR_IE_BB                  (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (IE_BitNumber * 4))
  61:../SPL/src/stm32f10x_cec.c **** 
  62:../SPL/src/stm32f10x_cec.c **** /* --- CSR Register ---*/
  63:../SPL/src/stm32f10x_cec.c **** 
  64:../SPL/src/stm32f10x_cec.c **** /* Alias word address of TSOM bit */
  65:../SPL/src/stm32f10x_cec.c **** #define CSR_OFFSET                  (CEC_OFFSET + 0x10)
  66:../SPL/src/stm32f10x_cec.c **** #define TSOM_BitNumber              0x00
  67:../SPL/src/stm32f10x_cec.c **** #define CSR_TSOM_BB                 (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TSOM_BitNumber * 4))
  68:../SPL/src/stm32f10x_cec.c **** 
  69:../SPL/src/stm32f10x_cec.c **** /* Alias word address of TEOM bit */
  70:../SPL/src/stm32f10x_cec.c **** #define TEOM_BitNumber              0x01
  71:../SPL/src/stm32f10x_cec.c **** #define CSR_TEOM_BB                 (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TEOM_BitNumber * 4))
  72:../SPL/src/stm32f10x_cec.c ****   
  73:../SPL/src/stm32f10x_cec.c **** #define CFGR_CLEAR_Mask            (uint8_t)(0xF3)        /* CFGR register Mask */
  74:../SPL/src/stm32f10x_cec.c **** #define FLAG_Mask                  ((uint32_t)0x00FFFFFF) /* CEC FLAG mask */
  75:../SPL/src/stm32f10x_cec.c ****  
  76:../SPL/src/stm32f10x_cec.c **** /**
  77:../SPL/src/stm32f10x_cec.c ****   * @}
  78:../SPL/src/stm32f10x_cec.c ****   */ 
  79:../SPL/src/stm32f10x_cec.c **** 
  80:../SPL/src/stm32f10x_cec.c **** 
  81:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Macros
  82:../SPL/src/stm32f10x_cec.c ****   * @{
  83:../SPL/src/stm32f10x_cec.c ****   */ 
  84:../SPL/src/stm32f10x_cec.c **** 
  85:../SPL/src/stm32f10x_cec.c **** /**
  86:../SPL/src/stm32f10x_cec.c ****   * @}
  87:../SPL/src/stm32f10x_cec.c ****   */ 
  88:../SPL/src/stm32f10x_cec.c **** 
  89:../SPL/src/stm32f10x_cec.c **** 
  90:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Variables
  91:../SPL/src/stm32f10x_cec.c ****   * @{
  92:../SPL/src/stm32f10x_cec.c ****   */ 
  93:../SPL/src/stm32f10x_cec.c **** 
  94:../SPL/src/stm32f10x_cec.c **** /**
  95:../SPL/src/stm32f10x_cec.c ****   * @}
  96:../SPL/src/stm32f10x_cec.c ****   */ 
  97:../SPL/src/stm32f10x_cec.c **** 
  98:../SPL/src/stm32f10x_cec.c **** 
  99:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_FunctionPrototypes
 100:../SPL/src/stm32f10x_cec.c ****   * @{
 101:../SPL/src/stm32f10x_cec.c ****   */
 102:../SPL/src/stm32f10x_cec.c ****  
 103:../SPL/src/stm32f10x_cec.c **** /**
 104:../SPL/src/stm32f10x_cec.c ****   * @}
 105:../SPL/src/stm32f10x_cec.c ****   */ 
 106:../SPL/src/stm32f10x_cec.c **** 
 107:../SPL/src/stm32f10x_cec.c **** 
 108:../SPL/src/stm32f10x_cec.c **** /** @defgroup CEC_Private_Functions
 109:../SPL/src/stm32f10x_cec.c ****   * @{
 110:../SPL/src/stm32f10x_cec.c ****   */ 
 111:../SPL/src/stm32f10x_cec.c **** 
 112:../SPL/src/stm32f10x_cec.c **** /**
 113:../SPL/src/stm32f10x_cec.c ****   * @brief  Deinitializes the CEC peripheral registers to their default reset 
 114:../SPL/src/stm32f10x_cec.c ****   *         values.
 115:../SPL/src/stm32f10x_cec.c ****   * @param  None
 116:../SPL/src/stm32f10x_cec.c ****   * @retval None
 117:../SPL/src/stm32f10x_cec.c ****   */
 118:../SPL/src/stm32f10x_cec.c **** void CEC_DeInit(void)
 119:../SPL/src/stm32f10x_cec.c **** {
  26              		.loc 1 119 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 120:../SPL/src/stm32f10x_cec.c ****   /* Enable CEC reset state */
 121:../SPL/src/stm32f10x_cec.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
  38              		.loc 1 121 0
  39 0004 4FF08040 		mov	r0, #1073741824
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122:../SPL/src/stm32f10x_cec.c ****   /* Release CEC from reset state */
 123:../SPL/src/stm32f10x_cec.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
  42              		.loc 1 123 0
  43 0010 4FF08040 		mov	r0, #1073741824
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 124:../SPL/src/stm32f10x_cec.c **** }
  46              		.loc 1 124 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE29:
  51 001e 00BF     		.align	2
  52              		.global	CEC_Init
  53              		.thumb
  54              		.thumb_func
  56              	CEC_Init:
  57              	.LFB30:
 125:../SPL/src/stm32f10x_cec.c **** 
 126:../SPL/src/stm32f10x_cec.c **** 
 127:../SPL/src/stm32f10x_cec.c **** /**
 128:../SPL/src/stm32f10x_cec.c ****   * @brief  Initializes the CEC peripheral according to the specified 
 129:../SPL/src/stm32f10x_cec.c ****   *         parameters in the CEC_InitStruct.
 130:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_InitStruct: pointer to an CEC_InitTypeDef structure that
 131:../SPL/src/stm32f10x_cec.c ****   *         contains the configuration information for the specified
 132:../SPL/src/stm32f10x_cec.c ****   *         CEC peripheral.
 133:../SPL/src/stm32f10x_cec.c ****   * @retval None
 134:../SPL/src/stm32f10x_cec.c ****   */
 135:../SPL/src/stm32f10x_cec.c **** void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
 136:../SPL/src/stm32f10x_cec.c **** {
  58              		.loc 1 136 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0020 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0022 85B0     		sub	sp, sp, #20
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 24
  70 0024 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0026 7860     		str	r0, [r7, #4]
 137:../SPL/src/stm32f10x_cec.c ****   uint16_t tmpreg = 0;
  74              		.loc 1 137 0
  75 0028 4FF00003 		mov	r3, #0
  76 002c FB81     		strh	r3, [r7, #14]	@ movhi
 138:../SPL/src/stm32f10x_cec.c ****  
 139:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 140:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
 141:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
 142:../SPL/src/stm32f10x_cec.c ****      
 143:../SPL/src/stm32f10x_cec.c ****   /*---------------------------- CEC CFGR Configuration -----------------*/
 144:../SPL/src/stm32f10x_cec.c ****   /* Get the CEC CFGR value */
 145:../SPL/src/stm32f10x_cec.c ****   tmpreg = CEC->CFGR;
  77              		.loc 1 145 0
  78 002e 0C4B     		ldr	r3, .L3
  79 0030 1B68     		ldr	r3, [r3, #0]
  80 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 146:../SPL/src/stm32f10x_cec.c ****   
 147:../SPL/src/stm32f10x_cec.c ****   /* Clear BTEM and BPEM bits */
 148:../SPL/src/stm32f10x_cec.c ****   tmpreg &= CFGR_CLEAR_Mask;
  81              		.loc 1 148 0
  82 0034 FB89     		ldrh	r3, [r7, #14]	@ movhi
  83 0036 03F0F303 		and	r3, r3, #243
  84 003a FB81     		strh	r3, [r7, #14]	@ movhi
 149:../SPL/src/stm32f10x_cec.c ****   
 150:../SPL/src/stm32f10x_cec.c ****   /* Configure CEC: Bit Timing Error and Bit Period Error */
 151:../SPL/src/stm32f10x_cec.c ****   tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);
  85              		.loc 1 151 0
  86 003c 7B68     		ldr	r3, [r7, #4]
  87 003e 1A88     		ldrh	r2, [r3, #0]
  88 0040 7B68     		ldr	r3, [r7, #4]
  89 0042 5B88     		ldrh	r3, [r3, #2]
  90 0044 1343     		orrs	r3, r3, r2
  91 0046 9AB2     		uxth	r2, r3
  92 0048 FB89     		ldrh	r3, [r7, #14]	@ movhi
  93 004a 1343     		orrs	r3, r3, r2
  94 004c FB81     		strh	r3, [r7, #14]	@ movhi
 152:../SPL/src/stm32f10x_cec.c **** 
 153:../SPL/src/stm32f10x_cec.c ****   /* Write to CEC CFGR  register*/
 154:../SPL/src/stm32f10x_cec.c ****   CEC->CFGR = tmpreg;
  95              		.loc 1 154 0
  96 004e 044B     		ldr	r3, .L3
  97 0050 FA89     		ldrh	r2, [r7, #14]
  98 0052 1A60     		str	r2, [r3, #0]
 155:../SPL/src/stm32f10x_cec.c ****   
 156:../SPL/src/stm32f10x_cec.c **** }
  99              		.loc 1 156 0
 100 0054 07F11407 		add	r7, r7, #20
 101 0058 BD46     		mov	sp, r7
 102 005a 80BC     		pop	{r7}
 103 005c 7047     		bx	lr
 104              	.L4:
 105 005e 00BF     		.align	2
 106              	.L3:
 107 0060 00780040 		.word	1073772544
 108              		.cfi_endproc
 109              	.LFE30:
 111              		.align	2
 112              		.global	CEC_Cmd
 113              		.thumb
 114              		.thumb_func
 116              	CEC_Cmd:
 117              	.LFB31:
 157:../SPL/src/stm32f10x_cec.c **** 
 158:../SPL/src/stm32f10x_cec.c **** /**
 159:../SPL/src/stm32f10x_cec.c ****   * @brief  Enables or disables the specified CEC peripheral.
 160:../SPL/src/stm32f10x_cec.c ****   * @param  NewState: new state of the CEC peripheral. 
 161:../SPL/src/stm32f10x_cec.c ****   *     This parameter can be: ENABLE or DISABLE.
 162:../SPL/src/stm32f10x_cec.c ****   * @retval None
 163:../SPL/src/stm32f10x_cec.c ****   */
 164:../SPL/src/stm32f10x_cec.c **** void CEC_Cmd(FunctionalState NewState)
 165:../SPL/src/stm32f10x_cec.c **** {
 118              		.loc 1 165 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 8
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123 0064 80B4     		push	{r7}
 124              	.LCFI5:
 125              		.cfi_def_cfa_offset 4
 126              		.cfi_offset 7, -4
 127 0066 83B0     		sub	sp, sp, #12
 128              	.LCFI6:
 129              		.cfi_def_cfa_offset 16
 130 0068 00AF     		add	r7, sp, #0
 131              	.LCFI7:
 132              		.cfi_def_cfa_register 7
 133 006a 0346     		mov	r3, r0
 134 006c FB71     		strb	r3, [r7, #7]
 166:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 167:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 168:../SPL/src/stm32f10x_cec.c **** 
 169:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
 135              		.loc 1 169 0
 136 006e 094B     		ldr	r3, .L8
 137 0070 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 138 0072 1A60     		str	r2, [r3, #0]
 170:../SPL/src/stm32f10x_cec.c **** 
 171:../SPL/src/stm32f10x_cec.c ****   if(NewState == DISABLE)
 139              		.loc 1 171 0
 140 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 141 0076 002B     		cmp	r3, #0
 142 0078 06D1     		bne	.L5
 172:../SPL/src/stm32f10x_cec.c ****   {
 173:../SPL/src/stm32f10x_cec.c ****     /* Wait until the PE bit is cleared by hardware (Idle Line detected) */
 174:../SPL/src/stm32f10x_cec.c ****     while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
 143              		.loc 1 174 0
 144 007a 00BF     		nop
 145              	.L7:
 146              		.loc 1 174 0 is_stmt 0 discriminator 1
 147 007c 064B     		ldr	r3, .L8+4
 148 007e 1B68     		ldr	r3, [r3, #0]
 149 0080 03F00103 		and	r3, r3, #1
 150 0084 002B     		cmp	r3, #0
 151 0086 F9D1     		bne	.L7
 152              	.L5:
 175:../SPL/src/stm32f10x_cec.c ****     {
 176:../SPL/src/stm32f10x_cec.c ****     }  
 177:../SPL/src/stm32f10x_cec.c ****   }  
 178:../SPL/src/stm32f10x_cec.c **** }
 153              		.loc 1 178 0 is_stmt 1
 154 0088 07F10C07 		add	r7, r7, #12
 155 008c BD46     		mov	sp, r7
 156 008e 80BC     		pop	{r7}
 157 0090 7047     		bx	lr
 158              	.L9:
 159 0092 00BF     		.align	2
 160              	.L8:
 161 0094 00000F42 		.word	1108279296
 162 0098 00780040 		.word	1073772544
 163              		.cfi_endproc
 164              	.LFE31:
 166              		.align	2
 167              		.global	CEC_ITConfig
 168              		.thumb
 169              		.thumb_func
 171              	CEC_ITConfig:
 172              	.LFB32:
 179:../SPL/src/stm32f10x_cec.c **** 
 180:../SPL/src/stm32f10x_cec.c **** /**
 181:../SPL/src/stm32f10x_cec.c ****   * @brief  Enables or disables the CEC interrupt.
 182:../SPL/src/stm32f10x_cec.c ****   * @param  NewState: new state of the CEC interrupt.
 183:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be: ENABLE or DISABLE.
 184:../SPL/src/stm32f10x_cec.c ****   * @retval None
 185:../SPL/src/stm32f10x_cec.c ****   */
 186:../SPL/src/stm32f10x_cec.c **** void CEC_ITConfig(FunctionalState NewState)
 187:../SPL/src/stm32f10x_cec.c **** {
 173              		.loc 1 187 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 8
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178 009c 80B4     		push	{r7}
 179              	.LCFI8:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 7, -4
 182 009e 83B0     		sub	sp, sp, #12
 183              	.LCFI9:
 184              		.cfi_def_cfa_offset 16
 185 00a0 00AF     		add	r7, sp, #0
 186              	.LCFI10:
 187              		.cfi_def_cfa_register 7
 188 00a2 0346     		mov	r3, r0
 189 00a4 FB71     		strb	r3, [r7, #7]
 188:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 189:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 190:../SPL/src/stm32f10x_cec.c **** 
 191:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
 190              		.loc 1 191 0
 191 00a6 044B     		ldr	r3, .L11
 192 00a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 193 00aa 1A60     		str	r2, [r3, #0]
 192:../SPL/src/stm32f10x_cec.c **** }
 194              		.loc 1 192 0
 195 00ac 07F10C07 		add	r7, r7, #12
 196 00b0 BD46     		mov	sp, r7
 197 00b2 80BC     		pop	{r7}
 198 00b4 7047     		bx	lr
 199              	.L12:
 200 00b6 00BF     		.align	2
 201              	.L11:
 202 00b8 04000F42 		.word	1108279300
 203              		.cfi_endproc
 204              	.LFE32:
 206              		.align	2
 207              		.global	CEC_OwnAddressConfig
 208              		.thumb
 209              		.thumb_func
 211              	CEC_OwnAddressConfig:
 212              	.LFB33:
 193:../SPL/src/stm32f10x_cec.c **** 
 194:../SPL/src/stm32f10x_cec.c **** /**
 195:../SPL/src/stm32f10x_cec.c ****   * @brief  Defines the Own Address of the CEC device.
 196:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_OwnAddress: The CEC own address
 197:../SPL/src/stm32f10x_cec.c ****   * @retval None
 198:../SPL/src/stm32f10x_cec.c ****   */
 199:../SPL/src/stm32f10x_cec.c **** void CEC_OwnAddressConfig(uint8_t CEC_OwnAddress)
 200:../SPL/src/stm32f10x_cec.c **** {
 213              		.loc 1 200 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 8
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 00bc 80B4     		push	{r7}
 219              	.LCFI11:
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 7, -4
 222 00be 83B0     		sub	sp, sp, #12
 223              	.LCFI12:
 224              		.cfi_def_cfa_offset 16
 225 00c0 00AF     		add	r7, sp, #0
 226              	.LCFI13:
 227              		.cfi_def_cfa_register 7
 228 00c2 0346     		mov	r3, r0
 229 00c4 FB71     		strb	r3, [r7, #7]
 201:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 202:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));
 203:../SPL/src/stm32f10x_cec.c **** 
 204:../SPL/src/stm32f10x_cec.c ****   /* Set the CEC own address */
 205:../SPL/src/stm32f10x_cec.c ****   CEC->OAR = CEC_OwnAddress;
 230              		.loc 1 205 0
 231 00c6 044B     		ldr	r3, .L14
 232 00c8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 233 00ca 5A60     		str	r2, [r3, #4]
 206:../SPL/src/stm32f10x_cec.c **** }
 234              		.loc 1 206 0
 235 00cc 07F10C07 		add	r7, r7, #12
 236 00d0 BD46     		mov	sp, r7
 237 00d2 80BC     		pop	{r7}
 238 00d4 7047     		bx	lr
 239              	.L15:
 240 00d6 00BF     		.align	2
 241              	.L14:
 242 00d8 00780040 		.word	1073772544
 243              		.cfi_endproc
 244              	.LFE33:
 246              		.align	2
 247              		.global	CEC_SetPrescaler
 248              		.thumb
 249              		.thumb_func
 251              	CEC_SetPrescaler:
 252              	.LFB34:
 207:../SPL/src/stm32f10x_cec.c **** 
 208:../SPL/src/stm32f10x_cec.c **** /**
 209:../SPL/src/stm32f10x_cec.c ****   * @brief  Sets the CEC prescaler value.
 210:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_Prescaler: CEC prescaler new value
 211:../SPL/src/stm32f10x_cec.c ****   * @retval None
 212:../SPL/src/stm32f10x_cec.c ****   */
 213:../SPL/src/stm32f10x_cec.c **** void CEC_SetPrescaler(uint16_t CEC_Prescaler)
 214:../SPL/src/stm32f10x_cec.c **** {
 253              		.loc 1 214 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 8
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258 00dc 80B4     		push	{r7}
 259              	.LCFI14:
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 7, -4
 262 00de 83B0     		sub	sp, sp, #12
 263              	.LCFI15:
 264              		.cfi_def_cfa_offset 16
 265 00e0 00AF     		add	r7, sp, #0
 266              	.LCFI16:
 267              		.cfi_def_cfa_register 7
 268 00e2 0346     		mov	r3, r0
 269 00e4 FB80     		strh	r3, [r7, #6]	@ movhi
 215:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 216:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_PRESCALER(CEC_Prescaler));
 217:../SPL/src/stm32f10x_cec.c **** 
 218:../SPL/src/stm32f10x_cec.c ****   /* Set the  Prescaler value*/
 219:../SPL/src/stm32f10x_cec.c ****   CEC->PRES = CEC_Prescaler;
 270              		.loc 1 219 0
 271 00e6 044B     		ldr	r3, .L17
 272 00e8 FA88     		ldrh	r2, [r7, #6]
 273 00ea 9A60     		str	r2, [r3, #8]
 220:../SPL/src/stm32f10x_cec.c **** }
 274              		.loc 1 220 0
 275 00ec 07F10C07 		add	r7, r7, #12
 276 00f0 BD46     		mov	sp, r7
 277 00f2 80BC     		pop	{r7}
 278 00f4 7047     		bx	lr
 279              	.L18:
 280 00f6 00BF     		.align	2
 281              	.L17:
 282 00f8 00780040 		.word	1073772544
 283              		.cfi_endproc
 284              	.LFE34:
 286              		.align	2
 287              		.global	CEC_SendDataByte
 288              		.thumb
 289              		.thumb_func
 291              	CEC_SendDataByte:
 292              	.LFB35:
 221:../SPL/src/stm32f10x_cec.c **** 
 222:../SPL/src/stm32f10x_cec.c **** /**
 223:../SPL/src/stm32f10x_cec.c ****   * @brief  Transmits single data through the CEC peripheral.
 224:../SPL/src/stm32f10x_cec.c ****   * @param  Data: the data to transmit.
 225:../SPL/src/stm32f10x_cec.c ****   * @retval None
 226:../SPL/src/stm32f10x_cec.c ****   */
 227:../SPL/src/stm32f10x_cec.c **** void CEC_SendDataByte(uint8_t Data)
 228:../SPL/src/stm32f10x_cec.c **** {  
 293              		.loc 1 228 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 8
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298 00fc 80B4     		push	{r7}
 299              	.LCFI17:
 300              		.cfi_def_cfa_offset 4
 301              		.cfi_offset 7, -4
 302 00fe 83B0     		sub	sp, sp, #12
 303              	.LCFI18:
 304              		.cfi_def_cfa_offset 16
 305 0100 00AF     		add	r7, sp, #0
 306              	.LCFI19:
 307              		.cfi_def_cfa_register 7
 308 0102 0346     		mov	r3, r0
 309 0104 FB71     		strb	r3, [r7, #7]
 229:../SPL/src/stm32f10x_cec.c ****   /* Transmit Data */
 230:../SPL/src/stm32f10x_cec.c ****   CEC->TXD = Data ;
 310              		.loc 1 230 0
 311 0106 044B     		ldr	r3, .L20
 312 0108 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 313 010a 5A61     		str	r2, [r3, #20]
 231:../SPL/src/stm32f10x_cec.c **** }
 314              		.loc 1 231 0
 315 010c 07F10C07 		add	r7, r7, #12
 316 0110 BD46     		mov	sp, r7
 317 0112 80BC     		pop	{r7}
 318 0114 7047     		bx	lr
 319              	.L21:
 320 0116 00BF     		.align	2
 321              	.L20:
 322 0118 00780040 		.word	1073772544
 323              		.cfi_endproc
 324              	.LFE35:
 326              		.align	2
 327              		.global	CEC_ReceiveDataByte
 328              		.thumb
 329              		.thumb_func
 331              	CEC_ReceiveDataByte:
 332              	.LFB36:
 232:../SPL/src/stm32f10x_cec.c **** 
 233:../SPL/src/stm32f10x_cec.c **** 
 234:../SPL/src/stm32f10x_cec.c **** /**
 235:../SPL/src/stm32f10x_cec.c ****   * @brief  Returns the most recent received data by the CEC peripheral.
 236:../SPL/src/stm32f10x_cec.c ****   * @param  None
 237:../SPL/src/stm32f10x_cec.c ****   * @retval The received data.
 238:../SPL/src/stm32f10x_cec.c ****   */
 239:../SPL/src/stm32f10x_cec.c **** uint8_t CEC_ReceiveDataByte(void)
 240:../SPL/src/stm32f10x_cec.c **** {
 333              		.loc 1 240 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338 011c 80B4     		push	{r7}
 339              	.LCFI20:
 340              		.cfi_def_cfa_offset 4
 341              		.cfi_offset 7, -4
 342 011e 00AF     		add	r7, sp, #0
 343              	.LCFI21:
 344              		.cfi_def_cfa_register 7
 241:../SPL/src/stm32f10x_cec.c ****   /* Receive Data */
 242:../SPL/src/stm32f10x_cec.c ****   return (uint8_t)(CEC->RXD);
 345              		.loc 1 242 0
 346 0120 034B     		ldr	r3, .L24
 347 0122 9B69     		ldr	r3, [r3, #24]
 348 0124 DBB2     		uxtb	r3, r3
 243:../SPL/src/stm32f10x_cec.c **** }
 349              		.loc 1 243 0
 350 0126 1846     		mov	r0, r3
 351 0128 BD46     		mov	sp, r7
 352 012a 80BC     		pop	{r7}
 353 012c 7047     		bx	lr
 354              	.L25:
 355 012e 00BF     		.align	2
 356              	.L24:
 357 0130 00780040 		.word	1073772544
 358              		.cfi_endproc
 359              	.LFE36:
 361              		.align	2
 362              		.global	CEC_StartOfMessage
 363              		.thumb
 364              		.thumb_func
 366              	CEC_StartOfMessage:
 367              	.LFB37:
 244:../SPL/src/stm32f10x_cec.c **** 
 245:../SPL/src/stm32f10x_cec.c **** /**
 246:../SPL/src/stm32f10x_cec.c ****   * @brief  Starts a new message.
 247:../SPL/src/stm32f10x_cec.c ****   * @param  None
 248:../SPL/src/stm32f10x_cec.c ****   * @retval None
 249:../SPL/src/stm32f10x_cec.c ****   */
 250:../SPL/src/stm32f10x_cec.c **** void CEC_StartOfMessage(void)
 251:../SPL/src/stm32f10x_cec.c **** {  
 368              		.loc 1 251 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 1, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373 0134 80B4     		push	{r7}
 374              	.LCFI22:
 375              		.cfi_def_cfa_offset 4
 376              		.cfi_offset 7, -4
 377 0136 00AF     		add	r7, sp, #0
 378              	.LCFI23:
 379              		.cfi_def_cfa_register 7
 252:../SPL/src/stm32f10x_cec.c ****   /* Starts of new message */
 253:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
 380              		.loc 1 253 0
 381 0138 034B     		ldr	r3, .L27
 382 013a 4FF00102 		mov	r2, #1
 383 013e 1A60     		str	r2, [r3, #0]
 254:../SPL/src/stm32f10x_cec.c **** }
 384              		.loc 1 254 0
 385 0140 BD46     		mov	sp, r7
 386 0142 80BC     		pop	{r7}
 387 0144 7047     		bx	lr
 388              	.L28:
 389 0146 00BF     		.align	2
 390              	.L27:
 391 0148 00020F42 		.word	1108279808
 392              		.cfi_endproc
 393              	.LFE37:
 395              		.align	2
 396              		.global	CEC_EndOfMessageCmd
 397              		.thumb
 398              		.thumb_func
 400              	CEC_EndOfMessageCmd:
 401              	.LFB38:
 255:../SPL/src/stm32f10x_cec.c **** 
 256:../SPL/src/stm32f10x_cec.c **** /**
 257:../SPL/src/stm32f10x_cec.c ****   * @brief  Transmits message with or without an EOM bit.
 258:../SPL/src/stm32f10x_cec.c ****   * @param  NewState: new state of the CEC Tx End Of Message. 
 259:../SPL/src/stm32f10x_cec.c ****   *     This parameter can be: ENABLE or DISABLE.
 260:../SPL/src/stm32f10x_cec.c ****   * @retval None
 261:../SPL/src/stm32f10x_cec.c ****   */
 262:../SPL/src/stm32f10x_cec.c **** void CEC_EndOfMessageCmd(FunctionalState NewState)
 263:../SPL/src/stm32f10x_cec.c **** {   
 402              		.loc 1 263 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 8
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407 014c 80B4     		push	{r7}
 408              	.LCFI24:
 409              		.cfi_def_cfa_offset 4
 410              		.cfi_offset 7, -4
 411 014e 83B0     		sub	sp, sp, #12
 412              	.LCFI25:
 413              		.cfi_def_cfa_offset 16
 414 0150 00AF     		add	r7, sp, #0
 415              	.LCFI26:
 416              		.cfi_def_cfa_register 7
 417 0152 0346     		mov	r3, r0
 418 0154 FB71     		strb	r3, [r7, #7]
 264:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 265:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 266:../SPL/src/stm32f10x_cec.c ****   
 267:../SPL/src/stm32f10x_cec.c ****   /* The data byte will be transmitted with or without an EOM bit*/
 268:../SPL/src/stm32f10x_cec.c ****   *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
 419              		.loc 1 268 0
 420 0156 044B     		ldr	r3, .L30
 421 0158 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 422 015a 1A60     		str	r2, [r3, #0]
 269:../SPL/src/stm32f10x_cec.c **** }
 423              		.loc 1 269 0
 424 015c 07F10C07 		add	r7, r7, #12
 425 0160 BD46     		mov	sp, r7
 426 0162 80BC     		pop	{r7}
 427 0164 7047     		bx	lr
 428              	.L31:
 429 0166 00BF     		.align	2
 430              	.L30:
 431 0168 04020F42 		.word	1108279812
 432              		.cfi_endproc
 433              	.LFE38:
 435              		.align	2
 436              		.global	CEC_GetFlagStatus
 437              		.thumb
 438              		.thumb_func
 440              	CEC_GetFlagStatus:
 441              	.LFB39:
 270:../SPL/src/stm32f10x_cec.c **** 
 271:../SPL/src/stm32f10x_cec.c **** /**
 272:../SPL/src/stm32f10x_cec.c ****   * @brief  Gets the CEC flag status
 273:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_FLAG: specifies the CEC flag to check. 
 274:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be one of the following values:
 275:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_BTE: Bit Timing Error
 276:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_BPE: Bit Period Error
 277:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RBTFE: Rx Block Transfer Finished Error
 278:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_SBE: Start Bit Error
 279:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_ACKE: Block Acknowledge Error
 280:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_LINE: Line Error
 281:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TBTFE: Tx Block Transfer Finished Error
 282:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TEOM: Tx End Of Message 
 283:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TERR: Tx Error
 284:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TBTRF: Tx Byte Transfer Request or Block Transfer Finished
 285:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RSOM: Rx Start Of Message
 286:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_REOM: Rx End Of Message
 287:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RERR: Rx Error
 288:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RBTF: Rx Byte/Block Transfer Finished
 289:../SPL/src/stm32f10x_cec.c ****   * @retval The new state of CEC_FLAG (SET or RESET)
 290:../SPL/src/stm32f10x_cec.c ****   */
 291:../SPL/src/stm32f10x_cec.c **** FlagStatus CEC_GetFlagStatus(uint32_t CEC_FLAG) 
 292:../SPL/src/stm32f10x_cec.c **** {
 442              		.loc 1 292 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 24
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 016c 80B4     		push	{r7}
 448              	.LCFI27:
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 7, -4
 451 016e 87B0     		sub	sp, sp, #28
 452              	.LCFI28:
 453              		.cfi_def_cfa_offset 32
 454 0170 00AF     		add	r7, sp, #0
 455              	.LCFI29:
 456              		.cfi_def_cfa_register 7
 457 0172 7860     		str	r0, [r7, #4]
 293:../SPL/src/stm32f10x_cec.c ****   FlagStatus bitstatus = RESET;
 458              		.loc 1 293 0
 459 0174 4FF00003 		mov	r3, #0
 460 0178 FB75     		strb	r3, [r7, #23]
 294:../SPL/src/stm32f10x_cec.c ****   uint32_t cecreg = 0, cecbase = 0;
 461              		.loc 1 294 0
 462 017a 4FF00003 		mov	r3, #0
 463 017e FB60     		str	r3, [r7, #12]
 464 0180 4FF00003 		mov	r3, #0
 465 0184 3B61     		str	r3, [r7, #16]
 295:../SPL/src/stm32f10x_cec.c ****   
 296:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 297:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_GET_FLAG(CEC_FLAG));
 298:../SPL/src/stm32f10x_cec.c ****  
 299:../SPL/src/stm32f10x_cec.c ****   /* Get the CEC peripheral base address */
 300:../SPL/src/stm32f10x_cec.c ****   cecbase = (uint32_t)(CEC_BASE);
 466              		.loc 1 300 0
 467 0186 174B     		ldr	r3, .L38
 468 0188 3B61     		str	r3, [r7, #16]
 301:../SPL/src/stm32f10x_cec.c ****   
 302:../SPL/src/stm32f10x_cec.c ****   /* Read flag register index */
 303:../SPL/src/stm32f10x_cec.c ****   cecreg = CEC_FLAG >> 28;
 469              		.loc 1 303 0
 470 018a 7B68     		ldr	r3, [r7, #4]
 471 018c 4FEA1373 		lsr	r3, r3, #28
 472 0190 FB60     		str	r3, [r7, #12]
 304:../SPL/src/stm32f10x_cec.c ****   
 305:../SPL/src/stm32f10x_cec.c ****   /* Get bit[23:0] of the flag */
 306:../SPL/src/stm32f10x_cec.c ****   CEC_FLAG &= FLAG_Mask;
 473              		.loc 1 306 0
 474 0192 7B68     		ldr	r3, [r7, #4]
 475 0194 23F07F43 		bic	r3, r3, #-16777216
 476 0198 7B60     		str	r3, [r7, #4]
 307:../SPL/src/stm32f10x_cec.c ****   
 308:../SPL/src/stm32f10x_cec.c ****   if(cecreg != 0)
 477              		.loc 1 308 0
 478 019a FB68     		ldr	r3, [r7, #12]
 479 019c 002B     		cmp	r3, #0
 480 019e 08D0     		beq	.L33
 309:../SPL/src/stm32f10x_cec.c ****   {
 310:../SPL/src/stm32f10x_cec.c ****     /* Flag in CEC ESR Register */
 311:../SPL/src/stm32f10x_cec.c ****     CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
 481              		.loc 1 311 0
 482 01a0 7B68     		ldr	r3, [r7, #4]
 483 01a2 4FEA1343 		lsr	r3, r3, #16
 484 01a6 7B60     		str	r3, [r7, #4]
 312:../SPL/src/stm32f10x_cec.c ****     
 313:../SPL/src/stm32f10x_cec.c ****     /* Get the CEC ESR register address */
 314:../SPL/src/stm32f10x_cec.c ****     cecbase += 0xC;
 485              		.loc 1 314 0
 486 01a8 3B69     		ldr	r3, [r7, #16]
 487 01aa 03F10C03 		add	r3, r3, #12
 488 01ae 3B61     		str	r3, [r7, #16]
 489 01b0 03E0     		b	.L34
 490              	.L33:
 315:../SPL/src/stm32f10x_cec.c ****   }
 316:../SPL/src/stm32f10x_cec.c ****   else
 317:../SPL/src/stm32f10x_cec.c ****   {
 318:../SPL/src/stm32f10x_cec.c ****     /* Get the CEC CSR register address */
 319:../SPL/src/stm32f10x_cec.c ****     cecbase += 0x10;
 491              		.loc 1 319 0
 492 01b2 3B69     		ldr	r3, [r7, #16]
 493 01b4 03F11003 		add	r3, r3, #16
 494 01b8 3B61     		str	r3, [r7, #16]
 495              	.L34:
 320:../SPL/src/stm32f10x_cec.c ****   }
 321:../SPL/src/stm32f10x_cec.c ****   
 322:../SPL/src/stm32f10x_cec.c ****   if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
 496              		.loc 1 322 0
 497 01ba 3B69     		ldr	r3, [r7, #16]
 498 01bc 1A68     		ldr	r2, [r3, #0]
 499 01be 7B68     		ldr	r3, [r7, #4]
 500 01c0 1340     		ands	r3, r3, r2
 501 01c2 002B     		cmp	r3, #0
 502 01c4 03D0     		beq	.L35
 323:../SPL/src/stm32f10x_cec.c ****   {
 324:../SPL/src/stm32f10x_cec.c ****     /* CEC_FLAG is set */
 325:../SPL/src/stm32f10x_cec.c ****     bitstatus = SET;
 503              		.loc 1 325 0
 504 01c6 4FF00103 		mov	r3, #1
 505 01ca FB75     		strb	r3, [r7, #23]
 506 01cc 02E0     		b	.L36
 507              	.L35:
 326:../SPL/src/stm32f10x_cec.c ****   }
 327:../SPL/src/stm32f10x_cec.c ****   else
 328:../SPL/src/stm32f10x_cec.c ****   {
 329:../SPL/src/stm32f10x_cec.c ****     /* CEC_FLAG is reset */
 330:../SPL/src/stm32f10x_cec.c ****     bitstatus = RESET;
 508              		.loc 1 330 0
 509 01ce 4FF00003 		mov	r3, #0
 510 01d2 FB75     		strb	r3, [r7, #23]
 511              	.L36:
 331:../SPL/src/stm32f10x_cec.c ****   }
 332:../SPL/src/stm32f10x_cec.c ****   
 333:../SPL/src/stm32f10x_cec.c ****   /* Return the CEC_FLAG status */
 334:../SPL/src/stm32f10x_cec.c ****   return  bitstatus;
 512              		.loc 1 334 0
 513 01d4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 335:../SPL/src/stm32f10x_cec.c **** }
 514              		.loc 1 335 0
 515 01d6 1846     		mov	r0, r3
 516 01d8 07F11C07 		add	r7, r7, #28
 517 01dc BD46     		mov	sp, r7
 518 01de 80BC     		pop	{r7}
 519 01e0 7047     		bx	lr
 520              	.L39:
 521 01e2 00BF     		.align	2
 522              	.L38:
 523 01e4 00780040 		.word	1073772544
 524              		.cfi_endproc
 525              	.LFE39:
 527              		.align	2
 528              		.global	CEC_ClearFlag
 529              		.thumb
 530              		.thumb_func
 532              	CEC_ClearFlag:
 533              	.LFB40:
 336:../SPL/src/stm32f10x_cec.c **** 
 337:../SPL/src/stm32f10x_cec.c **** /**
 338:../SPL/src/stm32f10x_cec.c ****   * @brief  Clears the CEC's pending flags.
 339:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_FLAG: specifies the flag to clear. 
 340:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be any combination of the following values:
 341:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TERR: Tx Error
 342:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_TBTRF: Tx Byte Transfer Request or Block Transfer Finished
 343:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RSOM: Rx Start Of Message
 344:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_REOM: Rx End Of Message
 345:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RERR: Rx Error
 346:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_FLAG_RBTF: Rx Byte/Block Transfer Finished
 347:../SPL/src/stm32f10x_cec.c ****   * @retval None
 348:../SPL/src/stm32f10x_cec.c ****   */
 349:../SPL/src/stm32f10x_cec.c **** void CEC_ClearFlag(uint32_t CEC_FLAG)
 350:../SPL/src/stm32f10x_cec.c **** { 
 534              		.loc 1 350 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 16
 537              		@ frame_needed = 1, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 539 01e8 80B4     		push	{r7}
 540              	.LCFI30:
 541              		.cfi_def_cfa_offset 4
 542              		.cfi_offset 7, -4
 543 01ea 85B0     		sub	sp, sp, #20
 544              	.LCFI31:
 545              		.cfi_def_cfa_offset 24
 546 01ec 00AF     		add	r7, sp, #0
 547              	.LCFI32:
 548              		.cfi_def_cfa_register 7
 549 01ee 7860     		str	r0, [r7, #4]
 351:../SPL/src/stm32f10x_cec.c ****   uint32_t tmp = 0x0;
 550              		.loc 1 351 0
 551 01f0 4FF00003 		mov	r3, #0
 552 01f4 FB60     		str	r3, [r7, #12]
 352:../SPL/src/stm32f10x_cec.c ****   
 353:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 354:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));
 355:../SPL/src/stm32f10x_cec.c **** 
 356:../SPL/src/stm32f10x_cec.c ****   tmp = CEC->CSR & 0x2;
 553              		.loc 1 356 0
 554 01f6 0B4B     		ldr	r3, .L41
 555 01f8 1B69     		ldr	r3, [r3, #16]
 556 01fa 03F00203 		and	r3, r3, #2
 557 01fe FB60     		str	r3, [r7, #12]
 357:../SPL/src/stm32f10x_cec.c ****        
 358:../SPL/src/stm32f10x_cec.c ****   /* Clear the selected CEC flags */
 359:../SPL/src/stm32f10x_cec.c ****   CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 558              		.loc 1 359 0
 559 0200 084B     		ldr	r3, .L41
 560 0202 084A     		ldr	r2, .L41
 561 0204 1169     		ldr	r1, [r2, #16]
 562 0206 7A68     		ldr	r2, [r7, #4]
 563 0208 6FEA0202 		mvn	r2, r2
 564 020c 22F00300 		bic	r0, r2, #3
 565 0210 FA68     		ldr	r2, [r7, #12]
 566 0212 0243     		orrs	r2, r2, r0
 567 0214 0A40     		ands	r2, r2, r1
 568 0216 1A61     		str	r2, [r3, #16]
 360:../SPL/src/stm32f10x_cec.c **** }
 569              		.loc 1 360 0
 570 0218 07F11407 		add	r7, r7, #20
 571 021c BD46     		mov	sp, r7
 572 021e 80BC     		pop	{r7}
 573 0220 7047     		bx	lr
 574              	.L42:
 575 0222 00BF     		.align	2
 576              	.L41:
 577 0224 00780040 		.word	1073772544
 578              		.cfi_endproc
 579              	.LFE40:
 581              		.align	2
 582              		.global	CEC_GetITStatus
 583              		.thumb
 584              		.thumb_func
 586              	CEC_GetITStatus:
 587              	.LFB41:
 361:../SPL/src/stm32f10x_cec.c **** 
 362:../SPL/src/stm32f10x_cec.c **** /**
 363:../SPL/src/stm32f10x_cec.c ****   * @brief  Checks whether the specified CEC interrupt has occurred or not.
 364:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_IT: specifies the CEC interrupt source to check. 
 365:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be one of the following values:
 366:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TERR: Tx Error
 367:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TBTF: Tx Block Transfer Finished
 368:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RERR: Rx Error
 369:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RBTF: Rx Block Transfer Finished
 370:../SPL/src/stm32f10x_cec.c ****   * @retval The new state of CEC_IT (SET or RESET).
 371:../SPL/src/stm32f10x_cec.c ****   */
 372:../SPL/src/stm32f10x_cec.c **** ITStatus CEC_GetITStatus(uint8_t CEC_IT)
 373:../SPL/src/stm32f10x_cec.c **** {
 588              		.loc 1 373 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 16
 591              		@ frame_needed = 1, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 593 0228 80B4     		push	{r7}
 594              	.LCFI33:
 595              		.cfi_def_cfa_offset 4
 596              		.cfi_offset 7, -4
 597 022a 85B0     		sub	sp, sp, #20
 598              	.LCFI34:
 599              		.cfi_def_cfa_offset 24
 600 022c 00AF     		add	r7, sp, #0
 601              	.LCFI35:
 602              		.cfi_def_cfa_register 7
 603 022e 0346     		mov	r3, r0
 604 0230 FB71     		strb	r3, [r7, #7]
 374:../SPL/src/stm32f10x_cec.c ****   ITStatus bitstatus = RESET;
 605              		.loc 1 374 0
 606 0232 4FF00003 		mov	r3, #0
 607 0236 FB73     		strb	r3, [r7, #15]
 375:../SPL/src/stm32f10x_cec.c ****   uint32_t enablestatus = 0;
 608              		.loc 1 375 0
 609 0238 4FF00003 		mov	r3, #0
 610 023c BB60     		str	r3, [r7, #8]
 376:../SPL/src/stm32f10x_cec.c ****   
 377:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 378:../SPL/src/stm32f10x_cec.c ****    assert_param(IS_CEC_GET_IT(CEC_IT));
 379:../SPL/src/stm32f10x_cec.c ****    
 380:../SPL/src/stm32f10x_cec.c ****   /* Get the CEC IT enable bit status */
 381:../SPL/src/stm32f10x_cec.c ****   enablestatus = (CEC->CFGR & (uint8_t)CEC_CFGR_IE) ;
 611              		.loc 1 381 0
 612 023e 0E4B     		ldr	r3, .L47
 613 0240 1B68     		ldr	r3, [r3, #0]
 614 0242 03F00203 		and	r3, r3, #2
 615 0246 BB60     		str	r3, [r7, #8]
 382:../SPL/src/stm32f10x_cec.c ****   
 383:../SPL/src/stm32f10x_cec.c ****   /* Check the status of the specified CEC interrupt */
 384:../SPL/src/stm32f10x_cec.c ****   if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 616              		.loc 1 384 0
 617 0248 0B4B     		ldr	r3, .L47
 618 024a 1A69     		ldr	r2, [r3, #16]
 619 024c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 620 024e 1340     		ands	r3, r3, r2
 621 0250 002B     		cmp	r3, #0
 622 0252 06D0     		beq	.L44
 623              		.loc 1 384 0 is_stmt 0 discriminator 1
 624 0254 BB68     		ldr	r3, [r7, #8]
 625 0256 002B     		cmp	r3, #0
 626 0258 03D0     		beq	.L44
 385:../SPL/src/stm32f10x_cec.c ****   {
 386:../SPL/src/stm32f10x_cec.c ****     /* CEC_IT is set */
 387:../SPL/src/stm32f10x_cec.c ****     bitstatus = SET;
 627              		.loc 1 387 0 is_stmt 1
 628 025a 4FF00103 		mov	r3, #1
 629 025e FB73     		strb	r3, [r7, #15]
 630 0260 02E0     		b	.L45
 631              	.L44:
 388:../SPL/src/stm32f10x_cec.c ****   }
 389:../SPL/src/stm32f10x_cec.c ****   else
 390:../SPL/src/stm32f10x_cec.c ****   {
 391:../SPL/src/stm32f10x_cec.c ****     /* CEC_IT is reset */
 392:../SPL/src/stm32f10x_cec.c ****     bitstatus = RESET;
 632              		.loc 1 392 0
 633 0262 4FF00003 		mov	r3, #0
 634 0266 FB73     		strb	r3, [r7, #15]
 635              	.L45:
 393:../SPL/src/stm32f10x_cec.c ****   }
 394:../SPL/src/stm32f10x_cec.c ****   /* Return the CEC_IT status */
 395:../SPL/src/stm32f10x_cec.c ****   return  bitstatus;
 636              		.loc 1 395 0
 637 0268 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 396:../SPL/src/stm32f10x_cec.c **** }
 638              		.loc 1 396 0
 639 026a 1846     		mov	r0, r3
 640 026c 07F11407 		add	r7, r7, #20
 641 0270 BD46     		mov	sp, r7
 642 0272 80BC     		pop	{r7}
 643 0274 7047     		bx	lr
 644              	.L48:
 645 0276 00BF     		.align	2
 646              	.L47:
 647 0278 00780040 		.word	1073772544
 648              		.cfi_endproc
 649              	.LFE41:
 651              		.align	2
 652              		.global	CEC_ClearITPendingBit
 653              		.thumb
 654              		.thumb_func
 656              	CEC_ClearITPendingBit:
 657              	.LFB42:
 397:../SPL/src/stm32f10x_cec.c **** 
 398:../SPL/src/stm32f10x_cec.c **** /**
 399:../SPL/src/stm32f10x_cec.c ****   * @brief  Clears the CEC's interrupt pending bits.
 400:../SPL/src/stm32f10x_cec.c ****   * @param  CEC_IT: specifies the CEC interrupt pending bit to clear.
 401:../SPL/src/stm32f10x_cec.c ****   *   This parameter can be any combination of the following values:
 402:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TERR: Tx Error
 403:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_TBTF: Tx Block Transfer Finished
 404:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RERR: Rx Error
 405:../SPL/src/stm32f10x_cec.c ****   *     @arg CEC_IT_RBTF: Rx Block Transfer Finished
 406:../SPL/src/stm32f10x_cec.c ****   * @retval None
 407:../SPL/src/stm32f10x_cec.c ****   */
 408:../SPL/src/stm32f10x_cec.c **** void CEC_ClearITPendingBit(uint16_t CEC_IT)
 409:../SPL/src/stm32f10x_cec.c **** {
 658              		.loc 1 409 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 16
 661              		@ frame_needed = 1, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 663 027c 80B4     		push	{r7}
 664              	.LCFI36:
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 027e 85B0     		sub	sp, sp, #20
 668              	.LCFI37:
 669              		.cfi_def_cfa_offset 24
 670 0280 00AF     		add	r7, sp, #0
 671              	.LCFI38:
 672              		.cfi_def_cfa_register 7
 673 0282 0346     		mov	r3, r0
 674 0284 FB80     		strh	r3, [r7, #6]	@ movhi
 410:../SPL/src/stm32f10x_cec.c ****   uint32_t tmp = 0x0;
 675              		.loc 1 410 0
 676 0286 4FF00003 		mov	r3, #0
 677 028a FB60     		str	r3, [r7, #12]
 411:../SPL/src/stm32f10x_cec.c ****   
 412:../SPL/src/stm32f10x_cec.c ****   /* Check the parameters */
 413:../SPL/src/stm32f10x_cec.c ****   assert_param(IS_CEC_GET_IT(CEC_IT));
 414:../SPL/src/stm32f10x_cec.c ****   
 415:../SPL/src/stm32f10x_cec.c ****   tmp = CEC->CSR & 0x2;
 678              		.loc 1 415 0
 679 028c 0A4B     		ldr	r3, .L50
 680 028e 1B69     		ldr	r3, [r3, #16]
 681 0290 03F00203 		and	r3, r3, #2
 682 0294 FB60     		str	r3, [r7, #12]
 416:../SPL/src/stm32f10x_cec.c ****   
 417:../SPL/src/stm32f10x_cec.c ****   /* Clear the selected CEC interrupt pending bits */
 418:../SPL/src/stm32f10x_cec.c ****   CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 683              		.loc 1 418 0
 684 0296 084B     		ldr	r3, .L50
 685 0298 074A     		ldr	r2, .L50
 686 029a 1169     		ldr	r1, [r2, #16]
 687 029c FA88     		ldrh	r2, [r7, #6]
 688 029e 6FEA0202 		mvn	r2, r2
 689 02a2 22F00300 		bic	r0, r2, #3
 690 02a6 FA68     		ldr	r2, [r7, #12]
 691 02a8 0243     		orrs	r2, r2, r0
 692 02aa 0A40     		ands	r2, r2, r1
 693 02ac 1A61     		str	r2, [r3, #16]
 419:../SPL/src/stm32f10x_cec.c **** }
 694              		.loc 1 419 0
 695 02ae 07F11407 		add	r7, r7, #20
 696 02b2 BD46     		mov	sp, r7
 697 02b4 80BC     		pop	{r7}
 698 02b6 7047     		bx	lr
 699              	.L51:
 700              		.align	2
 701              	.L50:
 702 02b8 00780040 		.word	1073772544
 703              		.cfi_endproc
 704              	.LFE42:
 706              	.Letext0:
 707              		.file 2 "/home/knik/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-eabi
 708              		.file 3 "/home/knik/temp/workspace/stm32_ld_vl/CMSIS/stm32f10x.h"
 709              		.file 4 "/home/knik/temp/workspace/stm32_ld_vl/SPL/inc/stm32f10x_cec.h"
 710              		.file 5 "/home/knik/temp/workspace/stm32_ld_vl/CMSIS/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_cec.c
     /tmp/cc3DFoGp.s:18     .text:00000000 $t
     /tmp/cc3DFoGp.s:23     .text:00000000 CEC_DeInit
     /tmp/cc3DFoGp.s:56     .text:00000020 CEC_Init
     /tmp/cc3DFoGp.s:107    .text:00000060 $d
     /tmp/cc3DFoGp.s:111    .text:00000064 $t
     /tmp/cc3DFoGp.s:116    .text:00000064 CEC_Cmd
     /tmp/cc3DFoGp.s:161    .text:00000094 $d
     /tmp/cc3DFoGp.s:166    .text:0000009c $t
     /tmp/cc3DFoGp.s:171    .text:0000009c CEC_ITConfig
     /tmp/cc3DFoGp.s:202    .text:000000b8 $d
     /tmp/cc3DFoGp.s:206    .text:000000bc $t
     /tmp/cc3DFoGp.s:211    .text:000000bc CEC_OwnAddressConfig
     /tmp/cc3DFoGp.s:242    .text:000000d8 $d
     /tmp/cc3DFoGp.s:246    .text:000000dc $t
     /tmp/cc3DFoGp.s:251    .text:000000dc CEC_SetPrescaler
     /tmp/cc3DFoGp.s:282    .text:000000f8 $d
     /tmp/cc3DFoGp.s:286    .text:000000fc $t
     /tmp/cc3DFoGp.s:291    .text:000000fc CEC_SendDataByte
     /tmp/cc3DFoGp.s:322    .text:00000118 $d
     /tmp/cc3DFoGp.s:326    .text:0000011c $t
     /tmp/cc3DFoGp.s:331    .text:0000011c CEC_ReceiveDataByte
     /tmp/cc3DFoGp.s:357    .text:00000130 $d
     /tmp/cc3DFoGp.s:361    .text:00000134 $t
     /tmp/cc3DFoGp.s:366    .text:00000134 CEC_StartOfMessage
     /tmp/cc3DFoGp.s:391    .text:00000148 $d
     /tmp/cc3DFoGp.s:395    .text:0000014c $t
     /tmp/cc3DFoGp.s:400    .text:0000014c CEC_EndOfMessageCmd
     /tmp/cc3DFoGp.s:431    .text:00000168 $d
     /tmp/cc3DFoGp.s:435    .text:0000016c $t
     /tmp/cc3DFoGp.s:440    .text:0000016c CEC_GetFlagStatus
     /tmp/cc3DFoGp.s:523    .text:000001e4 $d
     /tmp/cc3DFoGp.s:527    .text:000001e8 $t
     /tmp/cc3DFoGp.s:532    .text:000001e8 CEC_ClearFlag
     /tmp/cc3DFoGp.s:577    .text:00000224 $d
     /tmp/cc3DFoGp.s:581    .text:00000228 $t
     /tmp/cc3DFoGp.s:586    .text:00000228 CEC_GetITStatus
     /tmp/cc3DFoGp.s:647    .text:00000278 $d
     /tmp/cc3DFoGp.s:651    .text:0000027c $t
     /tmp/cc3DFoGp.s:656    .text:0000027c CEC_ClearITPendingBit
     /tmp/cc3DFoGp.s:702    .text:000002b8 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.15d5e41296b380d25e233262bbc38056
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.115ebb8291fa96f8c9e0b9a9b670f703
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_cec.h.69.3b05352e3d7007a358a8fce991202354

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
